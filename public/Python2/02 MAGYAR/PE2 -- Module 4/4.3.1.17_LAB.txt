<problem chapter='4' section='3' slide='1' problem='17' title="LAB: A diákok eredményeinek kiértékelése">

<!--
Update history:
2020-10-07 Grzegorz (review, PEP-8 compliance check)
-->

<code>
class StudentsDataException(Exception):
    pass


class WrongLine(StudentsDataException):
    # Write your code here.


class FileEmpty(StudentsDataException):
    # Write your code here.

</code>

<span class="label" style="background-color:rgb(205, 168, 105);"><b>LABORGYAKORLAT</b></span>

<br><br>

<h2>Becsült idő</h2>
<p>60-120 perc</p>


<h2>Nehézségi szint</h2>
<p>Közepes-Nehéz</p>


<h2>Célok</h2>
<ul>
    <li>a tanuló fájlműveletekkel (olvasás) kapcsolatos készségeinek fejlesztése</li>
    <li>a tanuló képességeinek tökéletesítése a saját maga által létrehozott kivételek és szótárak meghatározásában és használatában.</li>
</ul>


<h2>Forgatókönyv</h2>
<p>Prof. Jekyll órákat tart a diákjainak, és közben rendszeresen jegyzetel egy szöveges fájlba. A fájl minden sora három elemet tartalmaz: a hallgató keresztnevét, vezetéknevét és a hallgató által az egyes órákon kapott pontszámot.</p>

<p>Az elemek whitespace karakterekkel (szóközök, tabulátorok) vannak elválasztva. Minden diák többször is szerepelhet Prof. Jekyll fájljában.</p>

<p>A fájl a következőképpen nézhet ki:</p>

<codep>John	Smith	5
Anna	Boleyn	4.5
John	Smith	2
Anna	Boleyn	11
Andrew	Cox	1.5</codep>
<p style="text-align: right;"><font size="-2"><b>samplefile.txt</b></font></p>


<p>A Te feladatod egy olyan program írása, amely:</p>

<ul>
    <li>megkérdezi a felhasználótól Prof. Jekyll fájljának nevét;</li>
    <li>beolvassa a fájl tartalmát, és megszámolja a kapott pontok összegét minden egyes tanuló esetében;</li>
    <li>az alábbihoz hasonló, egyszerű (de rendezett) jelentést nyomtat:</li>
</ul>

<codep>Andrew Cox 	 1.5
Anna Boleyn 	 15.5
John Smith 	 7.0</codep>
<p style="text-align: right;"><font size="-2"><b>kimenet</b></font></p>

<p>Megjegyzés:</p>

<ul>
    <li>a programodat fel kell készíteni minden lehetséges hibára: a fájl nem létezik, a fájl üres, vagy bármilyen bemeneti adat hibája ellen; adathiba esetén a program futását meg kell szakítani, és a hiba okát a felhasználó elé kell tárni;</li>

    <li>valósítsuk meg és használjuk a saját – szerkesztőablakban bemutatott - kivételhierarchiánkat; a második kivételt akkor kell létrehozni, ha hibás sort észlelünk, a harmadikat pedig akkor, ha a forrásfájl létezik, de üres.</li>
</ul>


<p><strong>Tipp</strong>: Használj szótárat a diákok adatainak tárolására.</p>

<sampleSolution># A base exception class for our code:
class StudentsDataException(Exception):
    pass


# An exception for erroneous lines:
class WrongLine(StudentsDataException):
    def __init__(self, line_number, line_string):
        super().__init__(self)
        self.line_number = line_number
        self.line_string = line_string


# An exception for an empty file.
class FileEmpty(StudentsDataException):
    def __init__(self):
        super().__init__(self)


from os import strerror

# A dictionary for students' data:
data = { }

file_name = input("Enter student's data filename: ")
line_number = 1
try:
    f = open(file_name, "rt")
    # Read the whole file into list.
    lines = f.readlines()
    f.close()
    # Is the file empty?
    if len(lines) == 0:
        raise FileEmpty()
    # Scan the file line by line.
    for i in range(len(lines)):
        # Get the i'th line.
        line = lines[i]
        # Divide it into columns.
        columns = line.split()
        # There shoule be 3 columns - are they there?
        if len(columns) != 3:
            raise WrongLine(i + 1, line)
        # Build a key from student's given name and surname.
        student = columns[0] + ' ' + columns[1]
        # Get points.
        try:
            points = float(columns[2])
        except ValueError:
            raise WrongLine(i + 1, line)
        # Update dictionary.
        try:
            data[student] += points
        except KeyError:
            data[student] = points
    # Print results.
    for student in sorted(data.keys()):
        print(student,'\t', data[student])

except IOError as e:
    print("I/O error occurred: ", strerror(e.errno))
except WrongLine as e:
    print("Wrong line #" + str(e.line_number) + " in source file:" + e.line_string)
except FileEmpty:
    print("Source file empty")

</sampleSolution>

<studyMode>false</studyMode>
<labMode>true</labMode>

</problem>