<problem chapter='3' section='2' slide='1' problem='9' title='A procedurálistól az objektumorientált megközelítésig'>

<!--
Update history:
2020-09-30 Grzegorz (review, PEP-8 compliance check, update)
-->

<code>class Stack:
    def __init__(self):
        self.__stack_list = []

    def push(self, val):
        self.__stack_list.append(val)

    def pop(self):
        val = self.__stack_list[-1]
        del self.__stack_list[-1]
        return val


# Enter code here.

</code>



<h1>Az objektumos megközelítés: verem létrehozása (folytatás)</h1>

<p>Elemezzük az alábbi részletet - létrehoztunk három objektumot a <codel>Stack</codel> osztályból. Ezután zsonglőrködtünk velük. Próbáljuk megjósolni a képernyőre kiadott értéket.</p>


<codep class="syntax-color copy line-numbers">class Stack:
    def __init__(self):
        self.__stack_list = []

    def push(self, val):
        self.__stack_list.append(val)

    def pop(self):
        val = self.__stack_list[-1]
        del self.__stack_list[-1]
        return val


little_stack = Stack()
another_stack = Stack()
funny_stack = Stack()

little_stack.push(1)
another_stack.push(little_stack.pop() + 1)
funny_stack.push(another_stack.pop() - 2)

print(funny_stack.pop())
</codep>
<br>

<p>Vajon mi az eredmény? Futtasd le a programot, és ellenőrizd, hogy igazad volt-e!</p>


<br>
<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
