<problem chapter='4' section='3' slide='1' problem='11' title='Working with real files'>

<!--
Update history:
2020-10-07 Grzegorz (review, PEP-8 compliance check)
2020-10-29 Grzegorz (code fix: strrerror instead of strerr)
2021-07-07 Grzegorz (code corrections - important!)
-->

<code>from os import strerror

data = bytearray(10)

for i in range(len(data)):
    data[i] = 10 + i

try:
    binary_file = open('file.bin', 'wb')
    binary_file.write(data)
    binary_file.close()
except IOError as e:
    print("I/O error occurred:", strerror(e.errno))

# Your code that reads bytes from the stream should go here.

</code>



<h1>Bytearrays: continued</h1>


<p>So, how do we write a byte array to a binary file?</p>

<p>Look at the code in the editor. Let's analyze it:</p>

<ul>
<li>first, we initialize the <codel>bytearray</codel> with subsequent values starting from <codel>10</codel>; if you want the file's contents to be clearly readable, replace <codel>10</codel> with something like <codel>ord('a')</codel> – this will produce bytes containing values corresponding to the alphabetical part of the ASCII code (don't think it will make the file a text file – it's still <b>binary</b>, as it was created with a <codel>wb</codel> flag);</li>



<li>then, we create the file using the <codel>open()</codel> function – the only difference compared to the previous variants is the open mode containing the <codel>b</codel> flag;</li>



<li>the <codel>write()</codel> method takes its argument (<codel>bytearray</codel>) and sends it (as a whole) to the file;</li>



<li>the stream is then closed in a routine way.</li>
</ul>

 

<p>The <codel>write()</codel> method returns a number of successfully written bytes.</p>

<p>If the values differ from the length of the method's arguments, it may announce some write errors.</p>

<p>In this case, we haven't made use of the result – this may not be appropriate in every case.</p>

 

<p>Try to run the code and analyze the contents of the newly created output file.</p>

<p>You're going to use it in the next step. </p>

<br>


<h2>How to read bytes from a stream</h2>


<p>Reading from a binary file requires the use of a specialized method name <codel>readinto()</codel>, as the method doesn't create a new byte array object, but fills a previously created one with the values taken from the binary file.</p>

<p>Note:</p>

<ul>
<li>the method returns the number of successfully read bytes;</li>


<li>the method tries to fill the whole space available inside its argument; if there are more data in the file than space in the argument, the read operation will stop before the end of the file; otherwise, the method's result may indicate that the byte array has only been filled fragmentarily (the result will show you that, too, and the part of the array not being used by the newly read contents remains untouched)</li>
</ul>
 

<p>Look at the complete code below:</p>

<codep class="syntax-color copy line-numbers">from os import strerror

data = bytearray(10)

try:
    binary_file = open('file.bin', 'rb')
    binary_file.readinto(data)
    binary_file.close()

    for b in data:
        print(hex(b), end=' ')
except IOError as e:
    print("I/O error occurred:", strerror(e.errno))
</codep>

<br>
 

<p>Let's analyze it:</p>

<ul>
<li>first, we open the file (the one you created using the previous code) with the mode described as <codel>rb</codel>;</li>


<li>then, we read its contents into the byte array named <codel>data</codel>, of size ten bytes;</li>

<li>finally, we print the byte array contents – are they the same as you expected?</li>
</ul>

<p>Run the code and check if it's working.</p>


<br>
<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
