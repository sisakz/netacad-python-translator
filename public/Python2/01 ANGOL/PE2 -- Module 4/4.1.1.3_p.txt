<problem chapter='4' section='1' slide='1' problem='3' title='Generators and closures'>

<!--
Update history:
2020-10-05 Grzegorz (review, PEP-8 compliance check)
2021-07-07 Grzegorz (IMPORTANT – code corrections)
-->

<code>class Fib:
    def __init__(self, nn):
        self.__n = nn
        self.__i = 0
        self.__p1 = self.__p2 = 1

    def __iter__(self):
        print("Fib iter")
        return self

    def __next__(self):
        self.__i += 1
        if self.__i > self.__n:
            raise StopIteration
        if self.__i in [1, 2]:
            return 1
        ret = self.__p1 + self.__p2
        self.__p1, self.__p2 = self.__p2, ret
        return ret


class Class:
    def __init__(self, n):
        self.__iter = Fib(n)

    def __iter__(self):
        print("Class iter")
        return self.__iter


object = Class(8)

for i in object:
    print(i)

</code>



<h1>Generators – where to find them: continued</h1>


<p>The previous example shows you a solution where the <strong>iterator object is a part of a more complex class</strong>.</p>

<p>The code isn't really sophisticated, but it presents the concept in a clear way.</p>

<p>Take a look at the code in the editor.</p>
 

<p>We've built the <codel>Fib</codel> iterator into another class (we can say that we've composed it into the <codel>Class</codel> class). It's instantiated along with <codel>Class</codel>'s object.</p>

<p>The object of the class may be used as an iterator when (and only when) it positively answers to the <codel>__iter__</codel> invocation – this class can do it, and if it's invoked in this way, it provides an object able to obey the iteration protocol.</p>

<p>This is why the output of the code is the same as previously, although the object of the <codel>Fib</codel> class isn't used explicitly inside the <codel>for</codel> loop's context.</p>


<br>
<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
