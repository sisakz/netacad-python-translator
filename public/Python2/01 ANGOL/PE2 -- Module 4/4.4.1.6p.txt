<problem chapter='4' section='4' slide='1' problem='6' title='The os module'>

<!--
Update history:
2020-03-30 Sebastian (first version)
2020-10-08 Grzegorz (review, PEP-8 compliance check)
-->

<code>import os

os.mkdir("my_first_directory")
print(os.listdir())
os.rmdir("my_first_directory")
print(os.listdir())

</code>



<h1>Deleting directories in Python</h1>


<p>The <i>os</i> module also allows you to delete directories. It gives you the option of deleting a single directory or a directory with its subdirectories. To delete a single directory, you can use a function called <codel>rmdir</codel>, which takes the path as its argument. Look at the code in the editor.</p>

<p>The above example is really simple. First, the <i>my_first_directory</i> directory is created, and then it's removed using the <i>rmdir</i> function. The <i>listdir</i> function is used as proof that the directory has been removed successfully. In this case, it returns an empty list. When deleting a directory, make sure it exists and is empty, otherwise an exception will be raised.<p>

<p>To remove a directory and its subdirectories, you can use the <codel>removedirs</codel> function, which requires you to specify a path containing all directories that should be removed:<p>

<p><codep class="syntax-color copy">import os

os.makedirs("my_first_directory/my_second_directory")
os.removedirs("my_first_directory/my_second_directory")
print(os.listdir())
</codep></p>


<p>As with the <i>rmdir</i> function, if one of the directories doesn't exist or isn't empty, an exception will be raised.</p>

<p><b>NOTE:</b> In both Windows and Unix, there's a command called <i>rmdir</i>, which, just like the <i>rmdir</i> function, removes directories. What's more, both systems have commands to delete a directory and its contents. In Unix, this is the <i>rm</i> command with the <i>-r</i> flag.</p>



<br>
<br>


<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>