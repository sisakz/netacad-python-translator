<problem chapter='4' section='5' slide='1' problem='23' title='SECTION SUMMARY'>

<!--
Update history:
2020-03-30 Sebastian (first version)
2020-10-12 Grzegorz (file creation, review, PEP-8 compliance check)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">


<h1>Key takeaways</h1>


<p>1. To create a <codel>date</codel> object, you must pass the year, month, and day arguments as follows:</p>

<p><codep class="syntax-color copy">from datetime import date

my_date = date(2020, 9, 29)
print("Year:", my_date.year) # Year: 2020
print("Month:", my_date.month) # Month: 9
print("Day:", my_date.day) # Day: 29
</codep></p>

<p>The <codel>date</codel> object has three (read-only) attributes: year, month, and day.</p>

<br>

<p>2. The <codel>today</codel> method returns a date object representing the current local date:</p>

<p><codep class="syntax-color copy">from datetime import date
print("Today:", date.today()) # Displays: Today: 2020-09-29
</codep></p>

<br>

<p>3. In Unix, the timestamp expresses the number of seconds since January 1, 1970, 00:00:00 (UTC). This date is called the "Unix epoch", because it began the counting of time on Unix systems. The timestamp is actually the difference between a particular date (including time) and January 1, 1970, 00:00:00 (UTC), expressed in seconds. To create a date object from a timestamp, we must pass a Unix timestamp to the <codel>fromtimestamp</codel> method:</p>

<p><codep class="syntax-color copy">from datetime import date
import time

timestamp = time.time()
d = date.fromtimestamp(timestamp)
</codep></p>

<p>Note: The <codel>time</codel> function returns the number of seconds from January 1, 1970 to the current moment in the form of a float number.</p>

<br>


<p>4. The constructor of the <codel>time</codel> class accepts six arguments (<i>hour</i>, <i>minute</i>, <i>second</i>, <i>microsecond</i>, <i>tzinfo</i>, and <i>fold</i>). Each of these arguments is optional.</p>

<p><codep class="syntax-color copy">from datetime import time

t = time(13, 22, 20)

print("Hour:", t.hour) # Hour: 13
print("Minute:", t.minute) # Minute: 22
print("Second:", t.second) # Second: 20
</codep></p>

<br>

<p>5. The <codel>time</codel> module contains the <codel>sleep</codel> function, which suspends program execution for a given number of seconds, e.g.:</p>

<p><codep class="syntax-color copy">import time

time.sleep(10)
print("Hello world!") # This text will be displayed after 10 seconds.
</codep></p>

<br>

<p>6. In the <codel>datetime</codel> module, date and time can be represented either as separate objects, or as one object. The class that combines date and time is called <i>datetime</i>. All arguments passed to the constructor go to read-only class attributes. They are <i>year</i>, <i>month</i>, <i>day</i>, <i>hour</i>, <i>minute</i>, <i>second</i>, <i>microsecond</i>, <i>tzinfo</i>, and <i>fold</i>:</p>

<p><codep class="syntax-color copy">from datetime import datetime

dt = datetime(2020, 9, 29, 13, 51)
print("Datetime:", dt) # Displays: Datetime: 2020-09-29 13:51:00
</codep></p>

<br>


<p>7. The <codel>strftime</codel> method takes only one argument in the form of a string specifying a format that can consist of directives. A directive is a string consisting of the character <codel>%</codel> (percent) and a lower-case or upper-case letter. Below are some useful directives:</p>

<ul>
<li><codel>%Y</codel> – returns the year with the century as a decimal number;</li>
<li><codel>%m</codel> – returns the month as a zero-padded decimal number;</li>
<li><codel>%d</codel> – returns the day as a zero-padded decimal number;</li>
<li><codel>%H</codel> – returns the hour as a zero-padded decimal number;</li>
<li><codel>%M</codel> – returns the minute as a zero-padded decimal number;</li>
<li><codel>%S</codel> – returns the second as a zero-padded decimal number.</li>
</ul>

<p>Example:</p>

<p><codep class="syntax-color copy">from datetime import date

d = date(2020, 9, 29)
print(d.strftime('%Y/%m/%d')) # Displays: 2020/09/29
</codep></p>

<br>

<p>8. It's possible to perform calculations on <codel>date</codel> and <codel>datetime</codel> objects, e.g.:</p>

<p><codep class="syntax-color copy">from datetime import date

d1 = date(2020, 11, 4)
d2 = date(2019, 11, 4)

d = d1 - d2
print(d) # Displays: 366 days, 0:00:00.
print(d * 2) # Displays: 732 days, 0:00:00.
</codep></p>


<p>The result of the subtraction is returned as a <codel>timedelta</codel> object that expresses the difference in days between the two dates in the example above.</p>

<p>Note that the difference in hours, minutes, and seconds is also displayed. The <codel>timedelta</codel> object can be used for further calculations (e.g. you can multiply it by 2).</p>



<br> 
<br>

</div>






<div class="small-12 large-6 columns">

<br>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>

<p><strong>Exercise 1</strong></p>
<p>What is the output of the following snippet?</p>

<p><codep>from datetime import time

t = time(14, 39)
print(t.strftime("%H:%M:%S"))

</codep></p>

<button class="button tiny" onclick="solution('sol')">Check</button>

<p id="sol" style="display: none;"><codep>14:53:00</codep>
</p>


<br><br>

<p><strong>Exercise 2</strong></p>
<p>What is the output of the following snippet?</p>

<p><codep>from datetime import datetime

dt1 = datetime(2020, 9, 29, 14, 41, 0)
dt2 = datetime(2020, 9, 28, 14, 41, 0)

print(dt1 - dt2)

</codep></p>

<button class="button tiny" onclick="solution('sol2')">Check</button>

<p id="sol2" style="display: none;"><codep>1 day, 0:00:00</codep>
</p>



<br>
<br>


</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
