<problem chapter='1' section='3' slide='1' problem='4' title='Modules and Packages'>

<!--
Update history:
2020-09-08 Grzegorz (review, PEP-8 compliance check, update)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">


<h1>Your first module: step 7</h1>

<p>This module will contain two simple functions, and if you want to know how many times the functions have been invoked, you need a counter initialized to zero when the module is being imported.</p>

<p>You can do it this way:</p>

<img src="/uploads/media/default/0001/01/c8197d3ff79350b3003e5b972099610ae247ab4b.png" width="45%" alt="Updating the module.py file">

<br><br>


<codep class="syntax-color copy line-numbers">counter = 0

if __name__ == "__main__":
    print("I prefer to be a module.")
else:
    print("I like to be a module.")
</codep>
<p style="text-align: right;">module.py</p>


<h2>Your first module: step 8</h2>


<p>Introducing such a variable is absolutely correct, but may cause important <strong>side effects</strong> that you must be aware of.</p>

<p>Take a look at the modified <font face="Courier New">main.py</font> file:</p>

<img src="/uploads/media/default/0001/01/9d08f4ae6053759010511d805a3cddf77393daef.png" width="45%" alt="Updating the main.py file">

<br><br>

<codep class="syntax-color copy line-numbers">import module
print(module.counter)
</codep>
<p style="text-align: right;">main.py</p>

<br>
 

<p>As you can see, the main file tries to access the module's counter variable. Is this legal? Yes, it is. Is it usable? It may be very usable. Is it safe?</p>

<p>That depends – if you trust your module's users, there's no problem; however, you may not want the rest of the world to see your <strong>personal/private variable</strong>.</p>

<p>Unlike many other programming languages, Python has no means of allowing you to hide such variables from the eyes of the module's users.</p>

<p>You can only inform your users that this is your variable, that they may read it, but that they should not modify it under any circumstances.</p>


<p>This is done by preceding the variable's name with <codel>_</codel> (one underscore) or <codel>__</codel> (two underscores), but remember, it's only a <strong>convention</strong>. Your module's users may obey it or they may not.</p>

<p>Of course, we'll follow the convention. Now let's put two functions into the module – they'll evaluate the sum and product of the numbers collected in a list.</p>

<p>In addition, let's add some ornaments there and remove any superfluous remnants.</p>


<br><br>





</div>






<div class="small-12 large-6 columns">

<h2>Your first module: step 9</h2>

<p>Okay. Let's write some brand new code in our <font face="Courier New">module.py</font> file. The updated module is ready here:</p>

<codep class="syntax-color copy line-numbers">#!/usr/bin/env python3 

""" module.py - an example of a Python module """

__counter = 0


def suml(the_list):
    global __counter
    __counter += 1
    the_sum = 0
    for element in the_list:
        the_sum += element
    return the_sum


def prodl(the_list):
    global __counter	
    __counter += 1
    prod = 1
    for element in the_list:
        prod *= element
    return prod


if __name__ == "__main__":
    print("I prefer to be a module, but I can do some tests for you.")
    my_list = [i+1 for i in range(5)]
    print(suml(my_list) == 15)
    print(prodl(my_list) == 120)
</codep>
<p style="text-align: right;">module.py</p>



<p>A few elements need some explanation, we think:</p>

<ul>
<li>the line starting with <codel>#!</codel> has many names - it may be called <i>shabang</i>, <i>shebang</i>, <i>hashbang</i>, <i>poundbang</i> or even <i>hashpling</i> (don't ask us why). The name itself means nothing here - its role is more important. From Python's point of view, it's just a <strong>comment</strong> as it starts with <codel>#</codel>. For Unix and Unix-like OSs (including MacOS) such a line <strong>instructs the OS how to execute the contents of the file</strong> (in other words, what program needs to be launched to interpret the text). In some environments (especially those connected with web servers) the absence of that line will cause trouble;</li>

<li>a string (maybe a multiline) placed before any module instructions (including imports) is called the <strong>doc-string</strong>, and should briefly explain the purpose and contents of the module;</li>

<li>the functions defined inside the module (<codel>suml()</codel> and <codel>prodl()</codel>) are available for import;</li>

<li>we've used the <codel>__name__</codel> variable to detect when the file is run stand-alone, and seized this opportunity to perform some simple tests.</li>
</ul>


<h2>Your first module: step 10</h2>

<p>Now it's possible to use the updated module - this is one way:</p>

<img src="/uploads/media/default/0001/01/372fce8f3bf80c754cd8b6128ebdaf0f96e8ef71.png" width="45%" alt="Updating the main.py file">

<br><br>

<codep class="syntax-color copy line-numbers">from module import suml, prodl

zeroes = [0 for i in range(5)]
ones = [1 for i in range(5)]
print(suml(zeroes))
print(prodl(ones))
</codep>
<p style="text-align: right;">main.py</p>


<br>
<br>

</div>

</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
