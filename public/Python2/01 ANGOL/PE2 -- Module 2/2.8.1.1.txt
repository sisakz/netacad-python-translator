<problem chapter='2' section='8' slide='1' problem='1' title='Useful exceptions'>

<!--
Update history:
2020-09-21 Grzegorz (review, PEP-8 compliance check, update)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">


<h1>Built-in exceptions</h1>

<p>We're going to show you a short list of the most useful exceptions. While it may sound strange to call "useful" a thing or a phenomenon which is a visible sign of failure or setback, as you know, to err is human and if anything can go wrong, it will go wrong.</p>

<p>Exceptions are as routine and normal as any other aspect of a programmer's life.</p>

 
<p>For each exception, we'll show you:</p>

<ul>
<li>its name;</li>
<li>its location in the exception tree;</li>
<li>a short description;</li>
<li>a concise snippet of code showing the circumstances in which the exception may be raised.</li>
</ul>
 

<p>There are lots of other exceptions to explore – we simply don't have the space to go through them all here.</p>



<h2><font face="Courier New">ArithmeticError</font></h2>


<p><strong>Location:</strong> <font face="Courier New">BaseException &larr; Exception &larr; ArithmeticError</font></p>

 

<p><strong>Description:</strong> an abstract exception including all exceptions caused by arithmetic operations like zero division or an argument's invalid domain</p>






<h2><font face="Courier New">AssertionError</font></h2>


<p><strong>Location:</strong> <font face="Courier New">BaseException &larr; Exception &larr; AssertionError</font></p>

 

<p><strong>Description:</strong> a concrete exception raised by the assert instruction when its argument evaluates to <codel>False</codel>, <codel>None</codel>, <codel>0</codel>, or an empty string</p>


<p><strong>Code:</strong></p>

<codep class="syntax-color copy line-numbers">from math import tan, radians
angle = int(input('Enter integral angle in degrees: '))

# We must be sure that angle != 90 + k * 180
assert angle % 180 != 90
print(tan(radians(angle)))
</codep>


<br><br>





</div>






<div class="small-12 large-6 columns">

<h2><font face="Courier New">BaseException</font></h2>


<p><strong>Location:</strong> <font face="Courier New">BaseException</font></p>

 

<p><strong>Description:</strong> the most general (abstract) of all Python exceptions – all other exceptions are included in this one; it can be said that the following two <font face="Courier New">except</font> branches are equivalent: <codel>except:</codel> and <codel>except BaseException:</codel>.</p>







<h2><font face="Courier New">IndexError</font></h2>


<p><strong>Location:</strong> <font face="Courier New">BaseException &larr; Exception &larr; LookupError &larr; IndexError</font></p>

 

<p><strong>Description:</strong> a concrete exception raised when you try to access a non-existent sequence's element (e.g., a list's element)</p>

<p><strong>Code:</strong></p>

<codep class="syntax-color copy line-numbers"># The code shows an extravagant way
# of leaving the loop.

the_list = [1, 2, 3, 4, 5]
ix = 0
do_it = True

while do_it:
    try:
        print(the_list[ix])
        ix += 1
    except IndexError:
        do_it = False

print('Done')
</codep>




<br>
<br>

</div>

</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
