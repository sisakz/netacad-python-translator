<problem chapter='2' section='5' slide='1' problem='3' title='Four simple programs'>

<!--
Update history:
2020-09-23 Grzegorz (review, PEP-8 compliance check, update)
-->

<code>
# Numbers Processor.

line = input("Enter a line of numbers - separate them with spaces: ")
strings = line.split()
total = 0
try:
    for substr in strings:
        total += float(substr)
    print("The total is:", total)
except:
    print(substr, "is not a number.")

</code>



<h1>The Numbers Processor</h1>

<p>The third program shows a simple method allowing you to input a line filled with numbers, and to process them easily. Note: the routine <codel>input()</codel> function, combined together with the <codel>int()</codel> or <codel>float()</codel> functions, is unsuitable for this purpose.</p>

<p>The processing will be extremely easy – we want the numbers to be summed.</p>

<p>Look at the code in the editor. Let's analyze it.</p>

<p>Using list comprehension may make the code slimmer. You can do that if you want.</p>

<p>Let's present our version:</p>

<ul>
<li>line 03: ask the user to enter a line filled with any number of numbers (the numbers can be floats)</li>
<li>line 04: split the line receiving a list of substrings;</li>
<li>line 05: initiate the total sum to zero;</li>
<li>line 06: as the string-float conversion may raise an exception, it's best to continue by using the try-except block;</li>
<li>line 07: iterate through the list...</li>
<li>line 08: ...and try to convert all its elements into float numbers; if it works, increase the sum;</li>
<li>line 09: everything is good so far, so print the sum;</li>
<li>line 10: the program ends here in the case of an error;</li>
<li>line 11: print a diagnostic message showing the user the reason for the failure.</li>
</ul>

<p>The code has one important weakness – it displays a bogus result when the user enters an empty line. Can you fix it?</p>


<br>
<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
