<problem chapter='2' section='4' slide='1' problem='2' title='String in action'>

<!--
Update history:
2020-09-23 Grzegorz (review, PEP-8 compliance check, update)
-->

<code>
# Test examples here.

</code>



<h1>Comparing strings: continued</h1>

<p>Even <strong>if a string contains digits only, it's still not a number</strong>. It's interpreted as-is, like any other regular string, and its (potential) numerical aspect is not taken into consideration in any way.</p>

<p>Look at the examples:</p>

<codep class="syntax-color">'10' == '010'
'10' &gt; '010'
'10' &gt; '8'
'20' &lt; '8'
'20' &lt; '80'
</codep>
<br>

<p>They produce the following results:</p>

<codep>False
True
False
True
True</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>


<p><strong>Comparing strings against numbers is generally a bad idea.</strong></p>

<p>The only comparisons you can perform with impunity are these symbolized by the <codel>==</codel> and <codel>!=</codel> operators. The former always gives <codel>False</codel>, while the latter always produces <codel>True</codel>.</p>

<p>Using any of the remaining comparison operators will raise a <font face="Courier New">TypeError</font> exception.</p>

<p>Let's check it:</p>

<codep class="syntax-color">'10' == 10
'10' != 10
'10' == 1
'10' != 1
'10' &gt; 10
</codep>
<br>

<p>The results in this case are:</p>

<codep>False
True
False
True
TypeError exception</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<p>Run all the examples, and carry out more experiments.</p>

<br>
<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
