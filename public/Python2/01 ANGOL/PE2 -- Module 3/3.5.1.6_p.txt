<problem chapter='3' section='5' slide='1' problem='6' title='OOP Fundamentals: Inheritance'>

<!--
Update history:
2020-10-01 Grzegorz (review, PEP-8 compliance check, update)
-->

<code>class SampleClass:
    def __init__(self, val):
        self.val = val


object_1 = SampleClass(0)
object_2 = SampleClass(2)
object_3 = object_1
object_3.val += 1

print(object_1 is object_2)
print(object_2 is object_3)
print(object_3 is object_1)
print(object_1.val, object_2.val, object_3.val)

string_1 = "Mary had a little "
string_2 = "Mary had a little lamb"
string_1 += "lamb"

print(string_1 == string_2, string_1 is string_2)

</code>



<h1>Inheritance: the <font face="Courier New">is</font> operator</h1>

<p>There is also a Python operator worth mentioning, as it refers directly to objects â€“ here it is:</p>

<codep class="syntax-color">object_one <mark class="mark-background">is</mark> object_two
</codep>
<br>

<p><strong>The <codel>is</codel> operator checks whether two variables (<codel>object_one</codel> and <codel>object_two</codel> here) refer to the same object</strong>.</p>

<p>Don't forget that <strong>variables don't store the objects themselves, but only the handles pointing to the internal Python memory</strong>.</p>

<p>Assigning a value of an object variable to another variable doesn't copy the object, but only its handle. This is why an operator like <codel>is</codel> may be very useful in particular circumstances.</p>

<p>Take a look at the code in the editor. Let's analyze it:</p>

<ul>
<li>there is a very simple class equipped with a simple constructor, creating just one property. The class is used to instantiate two objects. The former is then assigned to another variable, and its <codel>val</codel> property is incremented by one.</li>

<li>afterward, the <codel>is</codel> operator is applied three times to check all possible pairs of objects, and all <codel>val</codel> property values are also printed.</li>

<li>the last part of the code carries out another experiment. After three assignments, both strings contain the same texts, but <strong>these texts are stored in different objects</strong>.</li>
</ul>

<p>The code prints:</p>

<codep>False
False
True
1 2 1
True False</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<p>The results prove that <codel>object_1</codel> and <codel>object_3</codel> are actually the same objects, while <codel>string_1</codel> and <codel>string_2</codel> aren't, despite their contents being the same.</p>


<br>
<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
