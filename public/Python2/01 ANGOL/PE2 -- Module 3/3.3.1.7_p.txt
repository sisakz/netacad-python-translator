<problem chapter='3' section='3' slide='1' problem='7' title='OOP: Properties'>

<!--
Update history:
2020-09-30 Grzegorz (review, PEP-8 compliance check, update)
-->

<code>class ExampleClass:
    def __init__(self, val):
        if val % 2 != 0:
            self.a = 1
        else:
            self.b = 1


example_object = ExampleClass(1)
print(example_object.a)

try:
    print(example_object.b)
except AttributeError:
    pass

</code>



<h1>Checking an attribute's existence: continued</h1>

<p>The <font face="Courier New">try-except</font> instruction gives you the chance to avoid issues with non-existent properties.</p>

<p>It's easy â€“ look at the code in the editor.</p>

<p>As you can see, this action isn't very sophisticated. Essentially, we've just swept the issue under the carpet.</p>

<p>Fortunately, there is one more way to cope with the issue.</p>

<br>

<p>Python provides a <strong>function which is able to safely check if any object/class contains a specified property</strong>. The function is named <codel>hasattr</codel>, and expects two arguments to be passed to it:</p>

<ul>
<li>the class or the object being checked;</li>
<li>the name of the property whose existence has to be reported (note: it has to be a string containing the attribute name, not the name alone)</li>
</ul>

 
<p>The function returns <font face="Courier New">True</font> or <font face="Courier New">False</font>.</p>

<p>This is how you can utilize it:</p> 


<codep class="syntax-color copy line-numbers">class ExampleClass:
    def __init__(self, val):
        if val % 2 != 0:
            self.a = 1
        else:
            self.b = 1


example_object = ExampleClass(1)
print(example_object.a)

<mark class="mark-background">if hasattr(example_object, 'b'):</mark>
    <mark class="mark-background">print(example_object.b)</mark>
</codep>


<br>
<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
