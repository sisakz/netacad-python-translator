<problem chapter='3' section='6' slide='1' problem='8' title='Exceptions once again'>

<!--
Update history:
2020-10-01 Grzegorz (reviewed, PEP-8 compliance check)
-->

<code>class PizzaError(Exception):
    def __init__(self, pizza, message):
        Exception.__init__(self, message)
        self.pizza = pizza


class TooMuchCheeseError(PizzaError):
    def __init__(self, pizza, cheese, message):
        PizzaError.__init__(self, pizza, message)
        self.cheese = cheese


def make_pizza(pizza, cheese):
    if pizza not in ['margherita', 'capricciosa', 'calzone']:
        raise PizzaError(pizza, "no such pizza on the menu")
    if cheese > 100:
        raise TooMuchCheeseError(pizza, cheese, "too much cheese")
    print("Pizza ready!")

for (pz, ch) in [('calzone', 0), ('margherita', 110), ('mafia', 20)]:
    try:
        make_pizza(pz, ch)
    except TooMuchCheeseError as tmce:
        print(tmce, ':', tmce.cheese)
    except PizzaError as pe:
        print(pe, ':', pe.pizza)

</code>



<h1>How to create your own exception: continued</h1>


<p>Look at the code in the editor. We've coupled together the two previously defined exceptions and harnessed them to work in a small example snippet.</p>


<p>One of these is raised inside the <codel>make_pizza()</codel> function when any of these two erroneous situations is discovered: a wrong pizza request, or a request for too much cheese.</p>

<p>Note:</p>

<ul>
<li>removing the branch starting with <codel>except TooMuchCheeseError</codel> will cause all appearing exceptions to be classified as <codel>PizzaError</codel>;</li>
<li>removing the branch starting with <codel>except PizzaError</codel> will cause the <codel>TooMuchCheeseError</codel> exceptions to remain unhandled, and will cause the program to terminate.</li>
</ul>

<br>

<p>The previous solution, although elegant and efficient, has one important weakness. Due to the somewhat easygoing way of declaring the constructors, the new exceptions cannot be used as they are without a full list of required arguments.</p>

<p>We'll remove this weakness by <strong>setting the default values for all constructor parameters</strong>. Take a look:</p>

<codep class="syntax-color copy line-numbers">class PizzaError(Exception):
    <mark class="mark-background">def __init__(self, pizza='uknown', message=''):</mark>
        Exception.__init__(self, message)
        self.pizza = pizza


class TooMuchCheeseError(PizzaError):
    <mark class="mark-background">def __init__(self, pizza='uknown', cheese='>100', message=''):</mark>
        PizzaError.__init__(self, pizza, message)
        self.cheese = cheese


def make_pizza(pizza, cheese):
    if pizza not in ['margherita', 'capricciosa', 'calzone']:
        <mark class="mark-background">raise PizzaError</mark>
	if cheese > 100:
        <mark class="mark-background">raise TooMuchCheeseError</mark>
    print("Pizza ready!")


for (pz, ch) in [('calzone', 0), ('margherita', 110), ('mafia', 20)]:
    try:
        make_pizza(pz, ch)
    except TooMuchCheeseError as tmce:
        print(tmce, ':', tmce.cheese)
    except PizzaError as pe:
        print(pe, ':', pe.pizza)
</codep>

<br>

<p>Now, if the circumstances permit, it is possible to use the class names alone.</p>




<br>
<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
