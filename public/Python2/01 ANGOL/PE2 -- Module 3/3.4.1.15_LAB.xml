<problem chapter='3' section='4' slide='1' problem='15' title='LAB: Triangle'>

<!--
Update history:
2020-01-01 Syslaw (file created)
2020-11-16 Grzegorz (review, PEP-8 compliance check)
-->

<code>import math


class Point:
    #
    # The code copied from the previous lab.
    #


class Triangle:
    def __init__(self, vertice1, vertice2, vertice3):
        #
        # Write code here
        #

    def perimeter(self):
        #
        # Write code here
        #


triangle = Triangle(Point(0, 0), Point(1, 0), Point(0, 1))
print(triangle.perimeter())

</code>

<span class="label" style="background-color:rgb(205, 168, 105);"><b>LAB</b></span>

<br><br>


<h2>Estimated time</h2>
<p>30-60 minutes</p>

<h2>Level of difficulty</h2>
<p>Medium</p>

<h2>Objectives</h2>
<ul>
<li>improving the student's skills in defining classes from scratch;</li>
<li>using composition.</li>
</ul>

<h2>Scenario</h2>
<p>Now we're going to embed the <codel>Point</codel> class (see Lab 3.4.1.14) inside another class. Also, we're going to put three points into one class, which will let us define a triangle. How can we do it?</p>

<p>The new class will be called <codel>Triangle</codel> and this is what we want:</p>
<ul>
<li>the constructor accepts three arguments â€“ all of them are objects of the <codel>Point</codel> class;</li>
<li>the points are stored inside the object as a private list;</li>
<li>the class provides a parameterless method called <codel>perimeter()</codel>, which calculates the perimeter of the triangle described by the three points; the perimeter is the sum of all the lengths of the legs (we mention this for the record, although we are sure that you know it perfectly yourself.)</li>
</ul>

<p>Complete the template we've provided in the editor. Run your code and check whether the evaluated perimeter is the same as ours.</p>

<p>Below you can copy the <codel>Point</codel> class code we used in the previous lab:</p>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>


<button class="button tiny" onclick="solution('sol')">Check</button>

<p id="sol" style="display: none;"><codep class="copy">class Point:
    def __init__(self, x=0.0, y=0.0):
        self.__x = x
        self.__y = y

</codep></p>



<br><br>

<h2>Expected output</h2>

<p><codep>3.414213562373095</codep></p>


<sampleSolution>import math


class Point:
    def __init__(self, x=0.0, y=0.0):
        self.__x = x
        self.__y = y

    def getx(self):
        return self.__x

    def gety(self):
        return self.__y

    def distance_from_xy(self, x, y):
        return math.hypot(abs(self.__x - x), abs(self.__y - y))

    def distance_from_point(self, point):
        return self.distance_from_xy(point.getx(), point.gety())


class Triangle:
    def __init__(self, vertice1, vertice2, vertice3):
        self.__vertices = [vertice1, vertice2, vertice3]

    def perimeter(self):
        per = 0
        for i in range(3):
            per += self.__vertices[i].distance_from_point(self.__vertices[(i + 1) % 3])
        return per


triangle = Triangle(Point(0, 0), Point(1, 0), Point(0, 1))
print(triangle.perimeter())

</sampleSolution>

<br><br>

<labMode>true</labMode>
</problem>
