<problem chapter='3' section='2' slide='1' problem='14' title='LAB: Counting stack'>

<!--
Update history:
2020-01-01 Syslaw (file created)
2020-11-16 Grzegorz (review, PEP-8 compliance check)
-->

<code>class Stack:
    def __init__(self):
        self.__stk = []

    def push(self, val):
        self.__stk.append(val)

    def pop(self):
        val = self.__stk[-1]
        del self.__stk[-1]
        return val


class CountingStack(Stack):
    def __init__(self):
    #
    # Fill the constructor with appropriate actions.
    #

    def get_counter(self):
    #
    # Present the counter's current value to the world.
    #

    def pop(self):
    #
    # Do a pop and update the counter.
    #
	

stk = CountingStack()
for i in range(100):
    stk.push(i)
    stk.pop()
print(stk.get_counter())

</code>

<span class="label" style="background-color:rgb(205, 168, 105);"><b>LAB</b></span>

<br><br>

<h2>Estimated time</h2>
<p>20-45 minutes</p>

<h2>Level of difficulty</h2>
<p>Easy/Medium</p>

<h2>Objectives</h2>
<ul>
<li>improve the student's skills in defining classes;</li>
<li>using existing classes to create new classes equipped with new functionalities.</li>
</ul>

<h2>Scenario</h2>
<p>We showed you recently how to extend <i>Stack</i> possibilities by defining a new class (i.e., a subclass) which retains all inherited traits and adds some new ones.</p>

<p>Your task is to extend the <codel>Stack</codel> class behavior in such a way so that the class is able to count all the elements that are pushed and popped (we assume that counting pops is enough). Use the <codel>Stack</codel> class we've provided in the editor.</p>

<p>Follow the hints:</p>
<ul>
<li>introduce a property designed to count pop operations and name it in a way which guarantees it is hidden;</li>
<li>initialize it to zero inside the constructor;</li>
<li>provide a method which returns the value currently assigned to the counter (name it <codel>get_counter()</codel>).</li>
</ul>

<p>Complete the code in the editor. Run it to check whether your code outputs 100.</p>


<sampleSolution>class Stack:
    def __init__(self):
        self.__stk = []

    def push(self, val):
        self.__stk.append(val)

    def pop(self):
        val = self.__stk[-1]
        del self.__stk[-1]
        return val


class CountingStack(Stack):
    def __init__(self):
        Stack.__init__(self)
        self.__counter = 0

    def get_counter(self):
        return self.__counter

    def pop(self):
        self.__counter += 1
        return Stack.pop(self)


stk = CountingStack()
for i in range(100):
    stk.push(i)
    stk.pop()
print(stk.get_counter())

</sampleSolution>

<br><br>

<labMode>true</labMode>
</problem>
