<problem chapter='3' section='5' slide='1' problem='18' title='OOP Fundamentals: Inheritance'>

<!--
Update history:
2020-10-01 Grzegorz (review, PEP-8 compliance check, update)
-->

<code>
import time

class Tracks:
    def change_direction(self, left, on):
        print("tracks: ", left, on)


class Wheels:
    def change_direction(self, left, on):
        print("wheels: ", left, on)


class Vehicle:
    def __init__(self, controller):
        self.controller = controller

    def turn(self, left):
        self.controller.change_direction(left, True)
        time.sleep(0.25)
        self.controller.change_direction(left, False)


wheeled = Vehicle(Wheels())
tracked = Vehicle(Tracks())

wheeled.turn(True)
tracked.turn(False)

</code>



<h1>How to build a hierarchy of classes: continued</h1>


<p>Inheritance is not the only way to construct adaptable classes. You can achieve the same goals (not always, but very often) by using a technique named composition.</p>

<p><strong>Composition is the process of composing an object using other different objects</strong>. The objects used in the composition deliver a set of desired traits (properties and/or methods) so we can say that they act like blocks used to build a more complicated structure.</p>

<p>It can be said that:</p>

<ul>
<li><strong>inheritance extends a class's capabilities</strong> by adding new components and modifying existing ones; in other words, the complete recipe is contained inside the class itself and all its ancestors; the object takes all the class's belongings and makes use of them;</li>
<li><strong>composition projects a class as a container</strong> able to store and use other objects (derived from other classes) where each of the objects implements a part of a desired class's behavior.</li>
</ul>

<p>Let us illustrate the difference by using the previously defined vehicles. The previous approach led us to a hierarchy of classes in which the top-most class was aware of the general rules used in turning the vehicle, but didn't know how to control the appropriate components (wheels or tracks).</p>

<p>The subclasses implemented this ability by introducing specialized mechanisms. Let's do (almost) the same thing, but using composition. The class – like in the previous example – is aware of how to turn the vehicle, but the actual turn is done by a specialized object stored in a property named <codel>controller</codel>. The <codel>controller</codel> is able to control the vehicle by manipulating the relevant vehicle's parts.</p>

<p>Take a look at the editor – this is what it could look like.</p>

<p>There are two classes named <codel>Tracks</codel> and <codel>Wheels</codel> – they know how to control the vehicle's direction. There is also a class named <codel>Vehicle</codel> which can use any of the available controllers (the two already defined, or any others defined in the future) – the <codel>controller</codel> itself is passed to the class during initialization.</p>

<p>In this way, the vehicle's ability to turn is composed using an external object, not implemented inside the <codel>Vehicle</codel> class.</p>

<p>In other words, we have a universal vehicle and can install either tracks or wheels onto it.</p>

<P>The code produces the following output:</p>

<codep>wheels:  True True
wheels:  True False
tracks:  False True
tracks:  False False</codep>

<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br>
<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
