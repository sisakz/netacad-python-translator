<problem chapter='3' section='2' slide='1' problem='10' title='A short journey from procedural to object approach'>

<!--
Update history:
2020-09-30 Grzegorz (review, PEP-8 compliance check, update)
2020-10-26 Grzegorz (Sentence fix: the name of the superclass is written before the colon directly after the new class name.)

-->

<code>class Stack:
    def __init__(self):
        self.__stack_list = []

    def push(self, val):
        self.__stack_list.append(val)

    def pop(self):
        val = self.__stack_list[-1]
        del self.__stack_list[-1]
        return val


class AddingStack(Stack):
    def __init__(self):
        Stack.__init__(self)
        self.__sum = 0

</code>



<h1>The object approach: a stack from scratch (continued)</h1>

<p>Now let's go a little further. Let's <strong>add a new class for handling stacks</strong>.</p>

<p>The new class should be able to <strong>evaluate the sum of all the elements currently stored in the stack</strong>.</p>

<p>We don't want to modify the previously defined stack. It's already good enough in its applications, and we don't want it changed in any way. We want a new stack with new capabilities. In other words, we want to construct a subclass of the already existing <codel>Stack</codel> class.</p>

<p>The first step is easy: just <strong>define a new subclass pointing to the class which will be used as the superclass</strong>.</p>

<p>This is what it looks like:</p>

<codep class="syntax-color">class AddingStack(Stack):
    pass
</codep>

<br> 

<p>The class doesn't define any new component yet, but that doesn't mean that it's empty. <strong>It gets all the components defined by its superclass</strong> – the name of the superclass is written before the colon directly after the new class name.</p>

<p>This is what we want from the new stack:</p>

<ul>
<li>we want the <codel>push</codel> method not only to push the value onto the stack but also to add the value to the <codel>sum</codel> variable;</li>
<li>we want the <codel>pop</codel> function not only to pop the value off the stack but also to subtract the value from the <codel>sum</codel> variable.</li>
</ul>

<br>

<p>Firstly, let's add a new variable to the class. It'll be a <strong>private variable</strong>, like the stack list. We don't want anybody to manipulate the <codel>sum</codel> value.</p>

<p>As you already know, adding a new property to the class is done by the constructor. You already know how to do that, but there is something really intriguing inside the constructor. Take a look:</p>

<codep class="syntax-color">class AddingStack(Stack):
    def __init__(self):
        Stack.__init__(self)
        self.__sum = 0
</codep>

<br> 

<p>The second line of the constructor's body creates a property named <codel>__sum</codel> – it will store the total of all the stack's values.</p>

<p>But the line before it looks different. What does it do? Is it really necessary? Yes, it is.</p>

 
<p>Contrary to many other languages, Python forces you to <strong>explicitly invoke a superclass's constructor</strong>. Omitting this point will have harmful effects – the object will be deprived of the <codel>__stack_list</codel> list. Such a stack will not function properly.</p>

<p>This is the only time you can invoke any of the available constructors explicitly – it can be done inside the subclass's constructor.</p>


<p>Note the syntax:</p>

<ul>
<li>you specify the superclass's name (this is the class whose constructor you want to run)</li>
<li>you put a dot (<codel>.</codel>)after it;</li>
<li>you specify the name of the constructor;</li>
<li>you have to point to the object (the class's instance) which has to be initialized by the constructor – this is why you have to specify the argument and use the <codel>self</codel> variable here; note: <strong>invoking any method (including constructors) from outside the class never requires you to put the <codel>self</codel> argument at the argument's list</codel></strong> – invoking a method from within the class demands explicit usage of the <codel>self</codel> argument, and it has to be put first on the list.</li>
</ul>
 

<p>Note: it's generally a recommended practice to invoke the superclass's constructor before any other initializations you want to perform inside the subclass. This is the rule we have followed in the snippet.</p>

<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
