<problem chapter='3' section='5' slide='1' problem='21' title='OOP Fundamentals: MRO'>

<!--
Update history:
2020-10-01 Slawek (content created)
2020-11-16 Grzegorz (file created, proofed by Will)
2020-11-17 Grzegorz (proofed by Will, updated)
-->

<code>class A:
    pass


class B(A):
    pass


class C(A):
    pass


class D(B, C):
    pass


d = D()

</code>

<h1>The diamond problem</h1>

<p>The second example of the spectrum of issues that can possibly arise from multiple inheritance is illustrated by a classic problem named the <strong>diamond problem</strong>. The name reflects the shape of the inheritance diagram – take a look at the picture:</p>

<br>
<img src="/uploads/media/default/0001/01/f87d143baf9957080a28751bcdc696ed26d14f86.png" alt="The diamond problem concept">
<br><br>

<ul>
<li>there is the top-most superclass named A;</li>
<li>there are two subclasses derived from A: B and C;</li>
<li>and there is also the bottom-most subclass named D, derived from B and C (or C and B, as these two variants mean different things in Python)</li>
</ul>

<p>Can you see the diamond there?</p>

<p>Have a look at the code in the editor. The same structure, but expressed in Python.</p>

<p>Some programming languages don't allow multiple inheritance at all, and as a consequence, they won't let you build a diamond – this is the route that Java and C# have chosen to follow since their origins.</p>

<p>Python, however, has chosen a different route – it allows multiple inheritance, and it doesn't mind if you write and run code like the one in the editor. But don't forget about MRO – it's always in charge.</p>

<br>

<p>Let's rebuild our example from the previous page to make it more diamond-like, just like below:</p>

<p><codep class="syntax-color copy line-numbers">class Top:
    def m_top(self):
        print("top")


class Middle_Left(Top):
    def m_middle(self):
        print("middle_left")


class Middle_Right(Top):
    def m_middle(self):
        print("middle_right")


class Bottom(Middle_Left, Middle_Right):
	def m_bottom(self):
		print("bottom")


object = Bottom()
object.m_bottom()
object.m_middle()
object.m_top()
</codep></p>

<p>Note: both <codel>Middle</codel> classes define <strong>a method of the same name</strong>: <codel>m_middle()</codel>.</p>

<p>It introduces a small uncertainty to our sample, although we're absolutely sure that you can answer the following key question: which of the two <codel>m_middle()</codel> methods will actually be invoked when the following line is executed?</p>

<p><codep class="syntax-color">Object.m_middle()
</codep></p>

<p>In other words, what will you see on the screen: <codel>middle_left</codel> or <codel>middle_right</codel>?</p>

<p>You don't need to hurry – think twice and keep Python's MRO in mind!</p>

<p>Are you ready?</p>

<p>Yes, you're right. The invocation will activate the <codel>m_middle()</codel> method, which comes from the <codel>Middle_Left</codel> class. The explanation is simple: the class is listed before <codel>Middle_Right</codel> on the <codel>Bottom</codel> class's inheritance list. If you want to make sure that there’s no doubt about it, try to swap these two classes on the list and check the results.</p>

<p>If you want to experience some more profound impressions about multiple inheritance and precious gemstones, try to modify our snippet and equip the <codel>Upper</codel> class with another specimen of the <codel>m_middle()</codel> method, and investigate its behavior carefully.</p>

<p>As you can see, diamonds may bring some problems into your life – both the real ones and those offered by Python.</p>


<br>
<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
