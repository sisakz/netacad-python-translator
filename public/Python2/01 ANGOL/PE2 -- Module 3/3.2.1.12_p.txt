<problem chapter='3' section='2' slide='1' problem='12' title='A short journey from procedural to object approach'>

<!--
Update history:
2020-09-30 Grzegorz (review, PEP-8 compliance check, update)
-->

<code>
class Stack:
    def __init__(self):
        self.__stack_list = []

    def push(self, val):
        self.__stack_list.append(val)

    def pop(self):
        val = self.__stack_list[-1]
        del self.__stack_list[-1]
        return val


class AddingStack(Stack):
    def __init__(self):
        Stack.__init__(self)
        self.__sum = 0

    def get_sum(self):
        return self.__sum

    def push(self, val):
        self.__sum += val
        Stack.push(self, val)

    def pop(self):
        val = Stack.pop(self)
        self.__sum -= val
        return val


stack_object = AddingStack()

for i in range(5):
    stack_object.push(i)
print(stack_object.get_sum())

for i in range(5):
    print(stack_object.pop())

</code>



<h1>The object approach: a stack from scratch (continued)</h1>

<p>This is the new <codel>pop</codel> function:</p>

<codep class="syntax-color">def pop(self):
    val = Stack.pop(self)
    self.__sum -= val
    return val
</codep>

<br>

<p>So far, we've defined the <codel>__sum</codel> variable, but we haven't provided a method to get its value. It seems to be hidden. How can we reveal it and do it in a way that still protects it from modifications?</p>

<p>We have to define a new method. We'll name it <codel>get_sum</codel>. Its only task will be to <strong>return the <codel>__sum</codel> value</strong>.</p>

<p>Here it is:</p>

<codep class="syntax-color">def get_sum(self):
    return self.__sum
</codep>

<br>

<p>So, let's look at the program in the editor. The complete code of the class is there. We can check its functioning now, and we do it with the help of a very few additional lines of code.</p>

<p>As you can see, we add five subsequent values onto the stack, print their sum, and take them all off the stack.</p>

<p>Okay, this has been a very brief introduction to Python's object programming. Soon we're going to tell you about it all in more detail.</p>

<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>