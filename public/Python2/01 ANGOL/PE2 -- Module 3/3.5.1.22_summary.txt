<problem chapter='3' section='5' slide='1' problem='22' title='SECTION SUMMARY 1/2'>

<!--
Update history:
2020-09-07 Slawek (first version)
2020-10-01 Grzegorz (reviewed, PEP-8 compliance control)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Key takeaways</h1>

<br>


<p>1. A method named <codel>__str__()</codel> is responsible for <b>converting an object's contents into a (more or less) readable string</b>. You can redefine it if you want your object to be able to present itself in a more elegant form. For example:</p>
<codep class="syntax-color copy line-numbers">class Mouse:
	def __init__(self, name):
		self.my_name = name


	def __str__(self):
		return self.my_name


the_mouse = Mouse('mickey')
print(the_mouse)  # Prints "mickey". 
</codep>
<br>

<p>2. A function named <codel>issubclass(Class_1, Class_2)</codel> is able to determine if <codel>Class_1</codel> is a <b>subclass</b> of <codel>Class_2</codel>. For example:</p> 
<codep class="syntax-color copy line-numbers">class Mouse:
	pass


class LabMouse(Mouse):
	pass


print(issubclass(Mouse, LabMouse), issubclass(LabMouse, Mouse))  # Prints "False True"
</codep>
<br>

<p>3. A function named <codel>isinstance(Object, Class)</codel> checks if an object <b>comes from an indicated class</b>. For example:</p>
<codep class="syntax-color copy line-numbers">class Mouse:
	pass


class LabMouse(Mouse):
	pass


mickey = Mouse()
print(isinstance(mickey, Mouse), isinstance(mickey, LabMouse))  # Prints "True False".
</codep>
<br>


<p>4. A operator called <codel>is</codel> checks if two variables refer to <b>the same object</b>. For example:</p>
<codep class="syntax-color copy line-numbers">class Mouse:
	pass


mickey = Mouse()
minnie = Mouse()
cloned_mickey = mickey
print(mickey is minnie, mickey is cloned_mickey)  # Prints "False True".
</codep>
<br>

</div>
<div class="small-12 large-6 columns">

<br>

<p>5. A parameterless function named <codel>super()</codel> returns a <b>reference to the nearest superclass of the class</b>. For example:</p>
<codep class="syntax-color copy line-numbers">class Mouse:
	def __str__(self):
		return "Mouse"


class LabMouse(Mouse):
	def __str__(self):
		return "Laboratory " + super().__str__()


doctor_mouse = LabMouse();
print(doctor_mouse)  # Prints "Laboratory Mouse".
</codep>
<br>

<p>6. Methods as well as instance and class variables defined in a superclass are <b>automatically inherited</b> by their subclasses. For example:</p>
<codep class="syntax-color copy line-numbers">class Mouse:
	Population = 0
	def __init__(self, name):
		Mouse.Population += 1
		self.name = name

	def __str__(self):
		return "Hi, my name is " + self.name

class LabMouse(Mouse):
	pass

professor_mouse = LabMouse("Professor Mouser")
print(professor_mouse, Mouse.Population)  # Prints "Hi, my name is Professor Mouser 1"
</codep>
<br>

<p>7. In order to find any object/class property, Python looks for it inside:
<ul>
<li>the object itself;</li>
<li>all classes involved in the object's inheritance line from bottom to top;</li>
<li>if there is more than one class on a particular inheritance path, Python scans them from left to right;</li>
<li>if both of the above fail, the <codel>AttributeError</codel> exception is raised.</li>
</ul>
</p>
<br>

<p>8. If any of the subclasses defines a method/class variable/instance variable of the same name as existing in the superclass, the new name <b>overrides</b> any of the previous instances of the name. For example:</p>
<codep class="syntax-color copy line-numbers">class Mouse:
	def __init__(self, name):
		self.name = name

	def __str__(self):
		return "My name is " + self.name

class AncientMouse(Mouse):
	def __str__(self):
		return "Meum nomen est " + self.name

mus = AncientMouse("Caesar")  # Prints "Meum nomen est Caesar"
print(mus)
</codep>
<br>

</div>

</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>

