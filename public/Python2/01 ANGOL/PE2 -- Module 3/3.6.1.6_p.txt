<problem chapter='3' section='6' slide='1' problem='6' title='Exceptions once again'>

<!--
Update history:
2020-10-01 Grzegorz (reviewed, PEP-8 compliance check)
-->

<code>
class MyZeroDivisionError(ZeroDivisionError):	
    pass


def do_the_division(mine):
    if mine:
        raise MyZeroDivisionError("some worse news")
    else:		
        raise ZeroDivisionError("some bad news")


for mode in [False, True]:
    try:
        do_the_division(mode)
    except ZeroDivisionError:
        print('Division by zero')

for mode in [False, True]:
    try:
        do_the_division(mode)
    except MyZeroDivisionError:
        print('My division by zero')
    except ZeroDivisionError:
        print('Original division by zero')

</code>



<h1>How to create your own exception</h1>


<p>The exceptions hierarchy is neither closed nor finished, and you can always extend it if you want or need to create your own world populated with your own exceptions.</p>

<p>It may be useful when you create a complex module which detects errors and raises exceptions, and you want the exceptions to be easily distinguishable from any others brought by Python.</p>

<p>This is done by <strong>defining your own, new exceptions as subclasses derived from predefined ones</strong>.</p>

<p>Note: if you want to create an exception which will be utilized as a specialized case of any built-in exception, derive it from just this one. If you want to build your own hierarchy, and don't want it to be closely connected to Python's exception tree, derive it from any of the top exception classes, like <font class="monospace">Exception</font>.</p>

<p>Imagine that you've created a brand new arithmetic, ruled by your own laws and theorems. It's clear that division has been redefined, too, and has to behave in a different way than routine dividing. It's also clear that this new division should raise its own exception, different from the built-in <font face="Courier New">ZeroDivisionError</font>, but it's reasonable to assume that in some circumstances, you (or your arithmetic's user) may want to treat all zero divisions in the same way.</p>

<p>Demands like these may be fulfilled in the manner shown in the editor. Look at the code, and let's analyze it:</p>

<ul>
<li>We've defined our own exception, named <codel>MyZeroDivisionError</codel>, derived from the built-in <codel>ZeroDivisionError</codel>. As you can see, we've decided not to add any new components to the class.

<br><br>In effect, an exception of this class can be - depending on the desired point of view â€“ treated like a plain <font face="Courier New">ZeroDivisionError</font>, or considered separately.</li>

<br>

<li>The <codel>do_the_division()</codel> function raises either a <codel>MyZeroDivisionError</codel> or <codel>ZeroDivisionError</codel> exception, depending on the argument's value.

<br><br>The function is invoked four times in total, while the first two invocations are handled using only one <codel>except</codel> branch (the more general one) and the last two ones with two different branches, able to distinguish the exceptions (don't forget: the order of the branches makes a fundamental difference!)</li>
</ul>

<br>
<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
