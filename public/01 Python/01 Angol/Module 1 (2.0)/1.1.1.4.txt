<problem chapter='1' section='1' slide='1' problem='4' title='Programming - absolute basics | Compilation vs. interpretation'>

<!--
Update history:
2020-07-07 Grzegorz (formatted)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<br>

<h1>Compilation vs. interpretation</h1>

<p>Computer programming is the act of composing the selected programming language's elements in the order that will cause the desired effect. The effect could be different in every specific case &ndash; it's up to the programmer's imagination, knowledge and experience.</p>

<p>Of course, such a composition has to be correct in many senses:</p>

<ul>
<li><strong>alphabetically</strong> &ndash; a program needs to be written in a recognizable script, such as Roman, Cyrillic, etc.</li>

<li><strong>lexically</strong> &ndash; each programming language has its dictionary and you need to master it; thankfully, it's much simpler and smaller than the dictionary of any natural language;</li>

<li><strong>syntactically</strong> &ndash; each language has its rules and they must be obeyed;</li>

<li><strong>semantically</strong> &ndash; the program has to make sense.</li>
</ul>

<p>Unfortunately, a programmer can also make mistakes with each of the above four senses. Each of them can cause the program to become completely useless.</p>

<p>Let's assume that you've successfully written a program. How do we persuade the computer to execute it? You have to render your program into machine language. Luckily, the translation can be done by a computer itself, making the whole process fast and efficient.</p>

<br>

</div>


<div class="small-12 large-6 columns">

<br>

<p>There are two different ways of <strong>transforming a program from a high-level programming language into machine language</strong>:</p>

<p><span class="label" style="background-color:#2f4050;"><strong>COMPILATION</strong></span> - the source program is translated once (however, this act must be repeated each time you modify the source code) by getting a file (e.g., an .exe file if the code is intended to be run under MS Windows) containing the machine code; now you can distribute the file worldwide; the program that performs this translation is called a compiler or translator;</p>

<p><span class="label" style="background-color:#2f4050;"><strong>INTERPRETATION</strong></span> - you (or any user of the code) can translate the source program each time it has to be run; the program performing this kind of transformation is called an interpreter, as it interprets the code every time it is intended to be executed; it also means that you cannot just distribute the source code as-is, because the end-user also needs the interpreter to execute it.</p>

<p>Due to some very fundamental reasons, a particular high-level programming language is designed to fall into one of these two categories.</p>

<p>There are very few languages that can be both compiled and interpreted. Usually, a programming language is projected with this factor in its constructors' minds - will it be compiled or interpreted?</p>

<br>

</div>

</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
