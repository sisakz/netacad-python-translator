<problem chapter='3' section='6' slide='1' problem='1' title='Operations on lists'>

<!--
Update history:
2020-08-12 Grzegorz (reviewed, reformatted)
-->

<code>
list_1 = [1]
list_2 = list_1
list_1[0] = 2
print(list_2)

</code>



<h1>The inner life of lists</h1>

<p>Now we want to show you one important, and very surprising, feature of lists, which strongly distinguishes them from ordinary variables.</p>

<p>We want you to memorize it ‒ it may affect your future programs, and cause severe problems if forgotten or overlooked.</p>

<p>Take a look at the snippet in the editor.</p>

<p>The program:</p>

<ul>

<li>creates a one-element list named <codel>list_1</codel>;</li>
<li>assigns it to a new list named <codel>list_2</codel>;</li>
<li>changes the only element of <codel>list_1</codel>;</li>
<li>prints out <codel>list_2</codel>.</li>

</ul>

<p>The surprising part is the fact that the program will output: <codel>[2]</codel>, not <codel>[1]</codel>, which seems to be the obvious solution.</p>

<br>

<p>Lists (and many other complex Python entities) are stored in different ways than ordinary (scalar) variables.</p>

<p>You could say that:</p>

<ul>
<li>the name of an ordinary variable is the <strong>name of its content</strong>;</li>
<li>the name of a list is the name of a <strong>memory location where the list is stored</strong>.</li>
</ul>

<p>Read these two lines once more ‒ the difference is essential for understanding what we are going to talk about next.</p>

<p>The assignment: <codel>list_2 = list_1</codel> copies the name of the array, not its contents. In effect, the two names (<codel>list_1</codel> and <codel>list_2</codel>) identify the same location in the computer memory. Modifying one of them affects the other, and vice versa.</p>

<p>How do you cope with that?</p>



<br>


<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
