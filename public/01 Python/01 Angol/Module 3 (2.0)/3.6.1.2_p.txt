<problem chapter='3' section='6' slide='1' problem='2' title='Operations on lists ‒ slices'>

<!--
Update history:
2020-08-12 Grzegorz (reviewed, reformatted)
-->

<code>
# Copying the entire list.
list_1 = [1]
list_2 = list_1[:]
list_1[0] = 2
print(list_2)

# Copying some part of the list.
my_list = [10, 8, 6, 4, 2]
new_list = my_list[1:3]
print(new_list)

</code>



<h1>Powerful slices</h1>

<p>Fortunately, the solution is at your fingertips ‒ it's called a <strong>slice</strong>.</p>

<p>A slice is an element of Python syntax that allows you to <strong>make a brand new copy of a list, or parts of a list</strong>.</p>

<p>It actually copies the list's contents, not the list's name.</p>

<p>This is exactly what you need. Take a look at the snippet below:</p>

<codep>list_1 = [1]
list_2 = list_1<mark style="background-color:#e6f2ff;">[:]</mark>
list_1[0] = 2
print(list_2)

</codep>

<br>
 
<p>Its output is <codel>[1]</codel>.</p>

<p>This inconspicuous part of the code described as <codel>[:]</codel> is able to produce a brand new list.</p>

<hr>

<p>One of the most general forms of the slice looks as follows:</p>

<codep>my_list[start:end]</codep>

<br>


<p>As you can see, it resembles indexing, but the colon inside makes a big difference.</p>

<p>A slice of this form <strong>makes a new (target) list, taking elements from the source list ‒ the elements of the indices from start to <codel>end - 1</codel></strong>.</p>

<p>Note: not to <codel>end</codel> but to <codel>end - 1</codel>. An element with an index equal to <codel>end</codel> is the first element which <strong>does not take part in the slicing</strong>.</p>

<p>Using negative values for both start and end is possible (just like in indexing).</p>

<p>Take a look at the snippet:</p>

<codep>my_list = [10, 8, 6, 4, 2]
new_list = my_list<mark style="background-color:#e6f2ff;">[1:3]</mark>
print(new_list)

</codep>

<br>

<p>The <codel>new_list</codel> list will have <codel>end - start</codel> (3 - 1 = 2) elements ‒ the ones with indices equal to <codel>1</codel> and <codel>2</codel> (but not <codel>3</codel>).</p>

<p>The snippet's output is: <codel>[8, 6]</codel></p>

<br>


<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
