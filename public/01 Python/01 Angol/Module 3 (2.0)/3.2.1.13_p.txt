<problem chapter='3' section='2' slide='1' problem='13' title='Python loops | else'>

<!--
Update history:
2020-07-21 Grzegorz (reviewed, re-formatted)
-->

<code>for i in range(5):
    print(i)
else:
    print("else:", i)

</code>


<h1>The <font face="courier new">for</font> loop and the <font face="courier new">else</font> branch</h1>


<p><codel>for</codel> loops behave a bit differently – take a look at the snippet in the editor and run it.</p>

<p>The output may be a bit surprising.</p>

<p>The <codel>i</codel> variable retains its last value.</p>

<br>

<p>Modify the code a bit to carry out one more experiment.</p>

<codep class="copy syntax-color">i = 111
for i in range(2, 1):
    print(i)
else:
    print("else:", i)
</codep>

<br>

<p>Can you guess the output?</p>

<p>The loop's body won't be executed here at all. Note: we've assigned the <codel>i</codel> variable before the loop.</p>

<p>Run the program and check its output.</p>

<p>When the loop's body isn't executed, the control variable retains the value it had before the loop.</p>

<p>Note: <strong>if the control variable doesn't exist before the loop starts, it won't exist when the execution reaches the <codel>else</codel> branch</strong>.</p>

<p>How do you feel about this variant of <codel>else</codel>?</p>

<br>

<p>Now we're going to tell you about some other kinds of variables. Our current variables can only <strong>store one value at a time</strong>, but there are variables that can do much more – they can <strong>store as many values as you want</strong>.</p>



<br>


<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
