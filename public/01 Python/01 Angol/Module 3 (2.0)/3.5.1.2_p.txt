<problem chapter='3' section='5' slide='1' problem='2' title='Sorting simple lists â€’ the bubble sort algorithm'>

<!--
Update history:
2020-08-12 Grzegorz (reviewed, re-formatted)
-->

<code>
</code>



<h1>Sorting a list</h1>

<p>How many passes do we need to sort the entire list?</p>

<p>We solve this issue in the following way: <strong>we introduce another variable</strong>; its task is to observe if any swap has been done during the pass or not; if there is no swap, then the list is already sorted, and nothing more has to be done. We create a variable named <codel>swapped</codel>, and we assign a value of <codel>False</codel> to it, to indicate that there are no swaps. Otherwise, it will be assigned <codel>True</codel>.</p>

<codep class="syntax-color copy">my_list = [8, 10, 6, 2, 4]  # list to sort

for i in range(len(my_list) - 1):  # we need (5 - 1) comparisons
    if my_list[i] > my_list[i + 1]:  # compare adjacent elements
        my_list[i], my_list[i + 1] = my_list[i + 1], my_list[i]  # If we end up here, we have to swap the elements.
</codep>

<br>

<p>You should be able to read and understand this program without any problems:</p>

<codep class="syntax-color copy">my_list = [8, 10, 6, 2, 4]  # list to sort
swapped = True  # It's a little fake, we need it to enter the while loop.

while swapped:
    swapped = False  # no swaps so far
    for i in range(len(my_list) - 1):
        if my_list[i] > my_list[i + 1]:
            swapped = True  # a swap occurred!
            my_list[i], my_list[i + 1] = my_list[i + 1], my_list[i]

print(my_list)
</codep>

<br>

<p>Run the program and test it.</p>



<br>


<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
