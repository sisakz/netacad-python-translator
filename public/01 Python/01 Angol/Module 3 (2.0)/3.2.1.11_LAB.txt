<problem chapter='3' section='2' slide='1' problem='11' title='LAB: The continue statement â€“ the Pretty Vowel Eater'>

<!--
Update history:
2020-07-21 Grzegorz (reviewed, re-formatted)
-->

<code>

word_without_vowels = ""

# Prompt the user to enter a word
# and assign it to the user_word variable.


for letter in user_word:
    # Complete the body of the loop.

# Print the word assigned to word_without_vowels.

</code>

<span class="label" style="background-color:rgb(205, 168, 105);"><strong>LAB</strong></span>

<br><br>

<h2>Estimated time</h2>
<p>5-15 minutes</p>

<h2>Level of difficulty</h2>
<p>Easy</p>


<h2>Objectives</h2>

<p>Familiarize the student with:</p>

<ul>
<li>using the <codel>continue</codel> statement in loops;</li>
<li>modifying and upgrading the existing code;</li>
<li>reflecting real-life situations in computer code.</li>
</ul>


<h2>Scenario</h2>

<p>Your task here is even more special than before: you must redesign the (ugly) vowel eater from the previous lab (3.1.2.10) and create a better, upgraded (pretty) vowel eater! Write a program that uses:</p>

<ul>
<li>a <codel>for</codel> loop;</li>
<li>the concept of conditional execution (<i>if-elif-else</i>)</li>
<li>the <codel>continue</codel> statement.</li>
</ul>

<p>Your program must:</p>

<ul>
<li>ask the user to enter a word;</li>
<li>use <codel><mark style="background-color:#e6f2ff;">user_word = user_word.upper()</mark></codel> to convert the word entered by the user to upper case; we'll talk about <strong>string methods</strong> and the <codel>upper()</codel> method very soon - don't worry;</li>
<li>use conditional execution and the <codel>continue</codel> statement to "eat" the following vowels <i>A</i>, <i>E</i>, <i>I</i>, <i>O</i>, <i>U</i> from the inputted word;</li>
<li>assign the uneaten letters to the <codel>word_without_vowels</codel> variable and print the variable to the screen.</li>
</ul>

<p>Look at the code in the editor. We've created <codel>word_without_vowels</codel> and assigned an empty string to it. Use concatenation operation to ask Python to combine selected letters into a longer string during subsequent loop turns, and assign it to the <codel>word_without_vowels</codel> variable.</p>

<p>Test your program with the data we've provided for you.</p>

<br>


<h2>Test data</h2>

<p>Sample input: <codel>Gregory</codel></p>
<p>Expected output: </p>
<codep>GRGRY</codep>

<hr>

<p>Sample input: <codel>abstemious</codel></p>
<p>Expected output: </p>
<codep>BSTMS</codep>

<hr>

<p>Sample input: <codel>IOUEA</codel></p>
<p>Expected output: </p>
<codep> </codep>


<br>


<studyMode>false</studyMode>
<labMode>true</labMode>

<hint>
word_without_vowels = ""

user_word = input("Enter your word: ")
user_word = user_word.upper()

for letter in user_word:
    if letter == "A":
        continue
    elif letter == "E":
        continue
    elif letter == "I":
        continue
    elif letter == "O":
        continue
    elif letter == "U":
        continue
    else:
        # Write your code here.
		
# Print the word assigned to word_without_vowels.

</hint>


<sampleSolution>
word_without_vowels = ""

user_word = input("Enter your word: ")
user_word = user_word.upper()

for letter in user_word:
    if letter == "A":
        continue
    elif letter == "E":
        continue
    elif letter == "I":
        continue
    elif letter == "O":
        continue
    elif letter == "U":
        continue
    else:
        word_without_vowels += letter
		
print(word_without_vowels)

</sampleSolution>


</problem>