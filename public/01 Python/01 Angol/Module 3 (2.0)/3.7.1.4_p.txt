<problem chapter='3' section='7' slide='1' problem='4' title='Lists in advanced applications ‒ Arrays'>

<!--
Update history:
2020-08-12 Grzegorz (reviewed)
-->

<code>
</code>

<h1>The multidimensional nature of lists: advanced applications</h1>

<p>Let's go deeper into the multidimensional nature of lists. To find any element of a two-dimensional list, you have to use two <i>coordinates</i>:</p>

<ul>
<li>a vertical one (row number)</li>
<li>and a horizontal one (column number).</li>
</ul>

<p>Imagine that you're developing a piece of software for an automatic weather station. The device records the air temperature on an hourly basis and does it throughout the month. This gives you a total of 24 &times; 31 = 744 values. Let's try to design a list capable of storing all these results.</p>

<p>First, you have to decide which data type would be adequate for this application. In this case, a <codel>float</codel> would be best, since this thermometer is able to measure the temperature with an accuracy of 0.1 &#x2103;.</p>

<p>Then you take an arbitrary decision that the rows will record the readings every hour on the hour (so the row will have 24 elements) and each of the rows will be assigned to one day of the month (let's assume that each month has 31 days, so you need 31 rows). Here's the appropriate pair of comprehensions (<codel>h</codel> is for hour, <codel>d</codel> for day):</p>

<codep class="syntax-color">temps = [[0.0 for h in range(24)] for d in range(31)]
</codep>

<br>


<p>The whole matrix is filled with zeros now. You can assume that it's updated automatically using special hardware agents. The thing you have to do is to wait for the matrix to be filled with measurements.</p>

<hr>

<p>Now it's time to determine the monthly average noon temperature. Add up all 31 readings recorded at noon and divide the sum by 31. You can assume that the midnight temperature is stored first. Here's the relevant code:</p>

<codep class="syntax-color">temps = [[0.0 for h in range(24)] for d in range(31)]
#
# The matrix is magically updated here.
#

total = 0.0

for day in temps:
    total += day[11]

average = total / 31

print("Average temperature at noon:", average)
</codep>

<br>

<p>Note: the <codel>day</codel> variable used by the <codel>for</codel> loop is not a scalar ‒ each pass through the <codel>temps</codel> matrix assigns it with the subsequent rows of the matrix; hence, it's a list. It has to be indexed with <codel>11</codel> to access the temperature value measured at noon.</p>

<hr>

<p>Now find the highest temperature during the whole month ‒ see the code:</p>

<codep class="syntax-color">temps = [[0.0 for h in range(24)] for d in range(31)]
#
# The matrix is magically updated here.
#

highest = -100.0

for day in temps:
    for temp in day:
        if temp > highest:
            highest = temp

print("The highest temperature was:", highest)
</codep>

<br>

<p>Note:</p>

<ul>
<li>the <codel>day</codel> variable iterates through all the rows in the <codel>temps</codel> matrix;</li>
<li>the <codel>temp</codel> variable iterates through all the measurements taken in one day.</li>
</ul>

<hr>

<p>Now count the days when the temperature at noon was at least 20 &#x2103;:</p>


<codep class="syntax-color">temps = [[0.0 for h in range(24)] for d in range(31)]
#
# The matrix is magically updated here.
#

hot_days = 0

for day in temps:
    if day[11] > 20.0:
        hot_days += 1

print(hot_days, "days were hot.")
</codep>

<br>
<br>


<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
