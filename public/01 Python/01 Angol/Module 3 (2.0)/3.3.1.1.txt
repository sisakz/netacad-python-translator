<problem chapter='3' section='3' slide='1' problem='1' title='Logic and bit operations in Python | and, or, not'>

<!--
Update history:
2020-07-21 Grzegorz (reviewed, reformatted)
-->


<div class="container">
<div class="row">

<div class="small-12 large-6 columns">


<h1>Computer logic</h1>

<p>Have you noticed that the conditions we've used so far have been very simple, not to say, quite primitive? The conditions we use in real life are much more complex. Let's look at this sentence:</p>

<p><i>If we have some free time, <mark style="background-color:#e6f2ff;">and</mark> the weather is good, we will go for a walk.</i></p>

<br>

<p>We've used the conjunction <codel>and</codel>, which means that going for a walk depends on the simultaneous fulfilment of these two conditions. In the language of logic, such a connection of conditions is called a <strong>conjunction</strong>. And now another example:</p>

<p><i>If you are in the mall <mark style="background-color:#e6f2ff;">or</mark> I am in the mall, one of us will buy a gift for Mom.</i></p>

<br>

<p>The appearance of the word <codel>or</codel> means that the purchase depends on at least one of these conditions. In logic, such a compound is called a <strong>disjunction</strong>.</p>

<p>It's clear that Python must have operators to build conjunctions and disjunctions. Without them, the expressive power of the language would be substantially weakened. They're called <strong>logical operators</strong>.</p>


<h2><font face="courier new">and</font></h2>

<p>One logical conjunction operator in Python is the word <i>and</i>. It's a <strong>binary operator with a priority that is lower than the one expressed by the comparison operators</strong>. It allows us to code complex conditions without the use of parentheses like this one:</p>

<codep>counter > 0 <mark style="background-color:#e6f2ff;">and</mark> value == 100

</codep>

<br>

<p>The result provided by the <codel>and</codel> operator can be determined on the basis of the <strong>truth table</strong>.</p>

<p>If we consider the conjunction of <codel>A <mark style="background-color:#e6f2ff;">and</mark> B</codel>, the set of possible values of arguments and corresponding values of the conjunction looks as follows:</p>

<br>

<style>
th, td {
text-align: center;
}
</style>

<table style="width:90%" align="middle">

<tr>
<th>Argument <codel>A</codel></th>
<th>Argument <codel>B</codel></th>
<th><codel>A <mark style="background-color:#e6f2ff;">and</mark> B</codel></th>
</tr>

<tr>
<td><codel>False</codel></td>
<td><codel>False</codel></td>
<td><codel>False</codel></td>
</tr>

<tr>
<td><codel>False</codel></td>
<td><codel>True</codel></td>
<td><codel>False</codel></td>
</tr>

<tr>
<td><codel>True</codel></td>
<td><codel>False</codel></td>
<td><codel>False</codel></td>
</tr>

<tr>
<td><codel>True</codel></td>
<td><codel>True</codel></td>
<td><codel>True</codel></td>
</tr>

</table>

<br>


</div>





<div class="small-12 large-6 columns">

<h2><font face="courier new">or</font></h2>


<p>A disjunction operator is the word <codel>or</codel>. It's a <strong>binary operator with a lower priority than <codel>and</codel></strong> (just like <codel>+</codel> compared to <codel>*</codel>). Its truth table is as follows:</p>

<br>

<table style="width:90%" align="middle">

<tr>
<th>Argument <codel>A</codel></th>
<th>Argument <codel>B</codel></th>
<th><codel>A <mark style="background-color:#e6f2ff;">or</mark> B</codel></th>
</tr>

<tr>
<td><codel>False</codel></td>
<td><codel>False</codel></td>
<td><codel>False</codel></td>
</tr>

<tr>
<td><codel>False</codel></td>
<td><codel>True</codel></td>
<td><codel>True</codel></td>
</tr>

<tr>
<td><codel>True</codel></td>
<td><codel>False</codel></td>
<td><codel>True</codel></td>
</tr>

<tr>
<td><codel>True</codel></td>
<td><codel>True</codel></td>
<td><codel>True</codel></td>
</tr>

</table>


<br>

<h2><font face="courier new">not</font></h2>

<p>In addition, there's another operator that can be applied to the construction of conditions. It's a <strong>unary operator performing a logical negation</strong>. Its operation is simple: it turns truth into falsehood and falsehood into truth.</p>

<p>This operator is written as the word <codel>not</codel>, and its <strong>priority is very high: the same as the unary <codel>+</codel> and <codel>-</codel></strong>. Its truth table is simple:</p>

<br>

<table style="width:90%" align="middle">

<tr>
<th>Argument</th>
<th><codel><mark style="background-color:#e6f2ff;">not</mark></codel> Argument</th>
</tr>

<tr>
<td><codel>False</codel></td>
<td><codel>True</codel></td>

</tr>

<tr>
<td><codel>True</codel></td>
<td><codel>False</codel></td>

</tr>

</table>

<br>


</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
