<problem chapter='3' section='3' slide='1' problem='4' title='Logic and bit operations in Python | Bitwise operators'>

<!--
Update history:
2020-07-21 Grzegorz (reviewed, reformatted)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">


<h1>How do we deal with single bits?</h1>

<p>We'll now show you what you can use bitwise operators for. Imagine that you're a developer obliged to write an important piece of an operating system. You've been told that you're allowed to use a variable assigned in the following way:</p>

<codep>flag_register = 0x1234

</codep>

<br>

<p>The variable stores the information about various aspects of system operation. <strong>Each bit of the variable stores one yes/no value</strong>. You've also been told that only one of these bits is yours ‒ the third (remember that bits are numbered from zero, and bit number zero is the lowest one, while the highest is number 31). The remaining bits are not allowed to change, because they're intended to store other data. Here's your bit marked with the letter <codel>x</codel>:</p>

<codep>flag_register = 0000000000000000000000000000<mark style="background-color:#e6f2ff;">x</mark>000

</codep>

<br>


<p>You may be faced with the following tasks:</p>

<p>1. <strong>Check the state of your bit</strong> ‒ you want to find out the value of your bit; comparing the whole variable to zero will not do anything, because the remaining bits can have completely unpredictable values, but you can use the following conjunction property:</p>

<codep class="syntax-color">x & 1 = x
x & 0 = 0
</codep>

<br>


<P>If you apply the <codel>&</codel> operation to the <codel>flag_register</codel> variable along with the following bit image:</p>


<codep>0000000000000000000000000000<mark style="background-color:#e6f2ff;">1</mark>000</codep>

<br>


<p>(note the <codel>1</codel> at your bit's position) as the result, you obtain one of the following bit strings:</p>

<ul>
<li><codel>0000000000000000000000000000<mark style="background-color:#e6f2ff;">1</mark>000</codel> if your bit was set to <codel>1</codel></li>
<li><codel>0000000000000000000000000000<mark style="background-color:#e6f2ff;">0</mark>000</codel> if your bit was reset to <codel>0</codel></li>
</ul>

<p>Such a sequence of zeros and ones, whose task is to grab the value or to change the selected bits, is called a <strong>bit mask</strong>.</p>

<p>Let's build a bit mask to detect the state of your bit. It should point to <strong>the third bit</strong>. That bit has the weight of <codel>2<sup>3</sup> = 8</codel>. A suitable mask could be created by the following declaration:</p>

<codep class="syntax-color">the_mask = 8
</codep>

<br>


</div>


<div class="small-12 large-6 columns">

<br>

<p>You can also make a sequence of instructions depending on the state of your bit. Here it is:</p>

<codep class="syntax-color">if flag_register & the_mask:
    # My bit is set.
else:
    # My bit is reset.
</codep>

<br>

<p>2. <strong>Reset your bit</strong> ‒ you assign a zero to the bit while all the other bits must remain unchanged; let's use the same property of the conjunction as before, but let's use a slightly different mask ‒ exactly as below:</p>

<codep>1111111111111111111111111111<mark style="background-color:#e6f2ff;">0</mark>111

</codep>

<br>

<p>Note that the mask was created as a result of the negation of all the bits of <codel>the_mask</codel> variable. Resetting the bit is simple, and looks like this (choose the one you like more):</p>

<codep class="syntax-color">flag_register = flag_register & ~the_mask
flag_register &= ~the_mask

</codep>

<br>

<p>3. <strong>Set your bit</strong> ‒ you assign a <codel>1</codel> to your bit, while all the remaining bits must remain unchanged; use the following disjunction property:</p>

<codep class="syntax-color">x | 1 = 1
x | 0 = x
</codep>

<br>

<p>You're now ready to set your bit with one of the following instructions:</p>

<codep class="syntax-color">flag_register = flag_register | the_mask
flag_register |= the_mask
</codep>

<br>

<p>4. <strong>Negate your bit</strong> ‒ you replace a <codel>1</codel> with a <codel>0</codel> and a <codel>0</codel> with a <codel>1</codel>. You can use an interesting property of the <codel>xor</codel> operator:</p>

<codep class="syntax-color">x ^ 1 = ~x
x ^ 0 = x
</codep>

<br>

<p>and negate your bit with the following instructions:</p>

<codep class="syntax-color">flag_register = flag_register ^ the_mask
flag_register ^= the_mask
</codep>


<br>




</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
