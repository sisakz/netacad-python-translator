<problem chapter='3' section='3' slide='1' problem='5' title='Logic and bit operations in Python | Bit shifting'>

<!--
Update history:
2020-07-21 Grzegorz (reviewed, reformatted)
2020-08-26 Grzegorz (bit shifting examples redesigned)
-->

<code>
var = 17
var_right = var >> 1
var_left = var << 2
print(var, var_left, var_right)

</code>

<h1>Binary left shift and binary right shift</h1>

<p>Python offers yet another operation relating to single bits: <strong>shifting</strong>. This is applied only to <strong>integer</strong> values, and you mustn't use floats as arguments for it.</p>

<p>You already apply this operation very often and quite unconsciously. How do you multiply any number by ten? Take a look:</p>

<p>12345 &times; 10 = 123450</p>

<br>


<p>As you can see, <strong>multiplying by ten is in fact a shift</strong> of all the digits to the left and filling the resulting gap with zero.</p>

<p>Division by ten? Take a look:</p>

<p>12340 &#247; 10 = 1234</p>

<br>


<p>Dividing by ten is nothing but shifting the digits to the right.</p>

<hr>

<p>The same kind of operation is performed by the computer, but with one difference: as two is the base for binary numbers (not 10), <strong>shifting a value one bit to the left thus corresponds to multiplying it by two</strong>; respectively, <strong>shifting one bit to the right is like dividing by two</strong> (notice that the rightmost bit is lost).</p>

<p>The <strong>shift operators</strong> in Python are a pair of <strong>digraphs</strong>: <codel>&lt;&lt;</codel> and <codel>&gt;&gt;</codel>, clearly suggesting in which direction the shift will act.</p>

<codep class="syntax-color">value << bits
value >> bits
</codep>

<br>

<p><strong>The left argument of these operators is an integer value whose bits are shifted. The right argument determines the size of the shift.</strong></p>

<p>It shows that this operation is certainly not commutative.</p>

<p>The priority of these operators is very high. You'll see them in the updated table of priorities, which we'll show you at the end of this section.</p>

<hr>

<p>Take a look at the shifts in the editor window.</p>

<p>The final <codel>print()</codel> invocation produces the following output:</p>

<codep>17 68 8</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>


<p>Note:</p>

<ul>
<li><codel>17 &gt;&gt; 1</codel> &rarr; <codel>17 // 2</codel> (<b>17</b> floor-divided by <b>2 to the power of 1</b>) &rarr; <codel>8</codel> (shifting to the right by one bit is the same as integer division by two)</li>
<li><codel>17 &lt;&lt; 2</codel> &rarr; <codel>17 * 4</codel> (<b>17</b> multiplied by <b>2 to the power of 2</b>) &rarr; <codel>68</codel> (shifting to the left by two bits is the same as integer multiplication by four)</li>
</ul>

<br>

<hr>

<p>And here is the <strong>updated priority table</strong>, containing all the operators introduced so far:</p>


<table style="width:90%">

<tr>
<th>Priority</th>
<th>Operator</th>
<th></th>
</tr>

<tr>
<td>1</td>
<td><codel>~</codel>, <codel>+</codel>, <codel>-</codel></td>
<td>unary</td>
</tr>

<tr>
<td>2</td>
<td><codel>**</codel></td>
<td></td>
</tr>

<tr>
<td>3</td>
<td><codel>*</codel>, <codel>/</codel>, <codel>//</codel>, <codel>%</codel></td>
<td></td>
</tr>

<tr>
<td>4</td>
<td><codel>+</codel>, <codel>-</codel></td>
<td>binary</td>
</tr>

<tr>
<td>5</td>
<td><codel>&lt;&lt;</codel>, <codel>&gt;&gt;</codel></td>
<td></td>
</tr>

<tr>
<td>6</td>
<td><codel>&lt;</codel>, <codel>&lt;=</codel>, <codel>&gt;</codel>, <codel>&gt;=</codel></td>
<td></td>
</tr>

<tr>
<td>7</td>
<td><codel>==</codel>, <codel>!=</codel></td>
<td></td>
</tr>

<tr>
<td>8</td>
<td><codel>&amp;</codel></td>
<td></td>
</tr>

<tr>
<td>9</td>
<td><codel>|</codel></td>
<td></td>
</tr>

<tr>
<td>10</td>
<td><codel>=</codel>, <codel>+=</codel>, <codel>-=</codel>, <codel>*=</codel>, <codel>/=</codel>, <codel>%=</codel>, <codel>&amp;=</codel>, <codel>^=</codel>, <codel>|=</codel>, <codel>&gt;&gt;=</codel>, <codel>&lt;&lt;=</codel></td>
<td></td>
</tr>

</table>

<br>


<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
