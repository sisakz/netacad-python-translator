<problem chapter='4' section='3' slide='1' problem='7' title="LAB: How many days: writing and using your own functions">

<!--
Update history:
2020-08-14 Grzegorz (reviewed, re-formatted)
-->

<code>

def is_year_leap(year):
#
# Your code from LAB 4.3.6.
#

def days_in_month(year, month):
#
# Write your new code here.
#

test_years = [1900, 2000, 2016, 1987]
test_months = [2, 2, 1, 11]
test_results = [28, 29, 31, 30]
for i in range(len(test_years)):
	yr = test_years[i]
	mo = test_months[i]
	print(yr, mo, "->", end="")
	result = days_in_month(yr, mo)
	if result == test_results[i]:
		print("OK")
	else:
		print("Failed")
		
</code>

<span class="label" style="background-color:rgb(205, 168, 105);"><strong>LAB</strong></span>

<br><br>

<h2>Estimated time</h2>
<p>15-20 minutes</p>

<h2>Level of difficulty</h2>
<p>Medium</p>

<h2>Prerequisites</h2>
<p>LAB 4.3.1.6</p>


<h2>Objectives</h2>

<p>Familiarize the student with:</p>
<ul>
<li>projecting and writing parameterized functions;</li>
<li>utilizing the <font face="courier new">return</font> statement;</li>
<li>utilizing the student's own functions.</li>
</ul>


<h2>Scenario</h2>

<p>Your task is to write and test a function which takes two arguments (a year and a month) and returns the number of days for the given year-month pair (while only February is sensitive to the <codel>year</codel> value, your function should be universal).</p>

<p>The initial part of the function is ready. Now, convince the function to return <codel>None</codel> if its arguments don't make sense.</p>

<p>Of course, you can (and should) use the previously written and tested function (LAB 4.3.1.6). It may be very helpful. We encourage you to use a list filled with the months' lengths. You can create it inside the function â€’ this trick will significantly shorten the code.</p>

<p>We've prepared a testing code. Expand it to include more test cases.</p>

<br>

<studyMode>false</studyMode>
<labMode>true</labMode>


<hint>
def is_year_leap(year):
	if year % 4 != 0:
		return False
	elif year % 100 != 0:
		return True
	elif year % 400 != 0:
		return False
	else:
		return True

def days_in_month(year, month):
	# if statement
		# ...
	days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
	res  = days[month - 1]
	if month == 2 and is_year_leap(year):
		res = 29
	return res

test_years = [1900, 2000, 2016, 1987]
test_months = [ 2, 2, 1, 11]
test_results = [28, 29, 31, 30]
for i in range(len(test_years)):
	yr = test_years[i]
	mo = test_months[i]
	print(yr,mo,"-> ",end="")
	result = days_in_month(yr, mo)
	if result == test_results[i]:
		print("OK")
	else:
		print("Failed")

</hint>


<sampleSolution>
def is_year_leap(year):
	if year % 4 != 0:
		return False
	elif year % 100 != 0:
		return True
	elif year % 400 != 0:
		return False
	else:
		return True

def days_in_month(year,month):
	if year < 1582 or month < 1 or month > 12:
		return None
	days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
	res  = days[month - 1]
	if month == 2 and is_year_leap(year):
		res = 29
	return res

test_years = [1900, 2000, 2016, 1987]
test_months = [ 2, 2, 1, 11]
test_results = [28, 29, 31, 30]
for i in range(len(test_years)):
	yr = test_years[i]
	mo = test_months[i]
	print(yr,mo,"-> ",end="")
	result = days_in_month(yr, mo)
	if result == test_results[i]:
		print("OK")
	else:
		print("Failed")

</sampleSolution>

</problem>