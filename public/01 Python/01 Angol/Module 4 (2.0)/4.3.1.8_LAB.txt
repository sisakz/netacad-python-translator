<problem chapter='4' section='3' slide='1' problem='8' title="LAB: Day of the year: writing and using your own functions">

<!--
Update history:
2020-08-14 Grzegorz (reviewed, re-formatted)
-->


<code>
def is_year_leap(year):
#
# Your code from LAB 4.3.1.6.
#

def days_in_month(year, month):
#
# Your code from LAB 4.3.1.7.
#

def day_of_year(year, month, day):
#
# Write your new code here.
#

print(day_of_year(2000, 12, 31))

</code>

<span class="label" style="background-color:rgb(205, 168, 105);"><strong>LAB</strong></span>

<br><br>


<h2>Estimated time</h2>
<p>20-30 minutes</p>


<h2>Level of difficulty</h2>
<p>Medium</p>

<h2>Prerequisites</h2>
<p>LAB 4.3.1.6
<br>
LAB 4.3.1.7</p>


<h2>Objectives</h2>

<p>Familiarize the student with:</p>

<ul>
<li>projecting and writing parameterized functions;</li>
<li>utilizing the <font face="courier new">return</font> statement;</li>
<li>building a set of utility functions;</li>
<li>utilizing the student's own functions.</li>
</ul>


<h2>Scenario</h2>

<p>Your task is to write and test a function which takes three arguments (a year, a month, and a day of the month) and returns the corresponding day of the year, or returns <codel>None</codel> if any of the arguments is invalid.</p>

<p>Use the previously written and tested functions. Add your own test cases to the code.</p>




<studyMode>false</studyMode>
<labMode>true</labMode>


<hint>
def is_year_leap(year):
	if year % 4 != 0:
		return False
	elif year % 100 != 0:
		return True
	elif year % 400 != 0:
		return False
	else:
		return True

def days_in_month(year, month):
	if year < 1582 or month < 1 or month > 12:
		return None
	days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
	res  = days[month - 1]
	if month == 2 and is_year_leap(year):
		res = 29
	return res

def day_of_year(year, month, day):
	days = 0
	for m in range(1, month):
		# ...
		# if statement
			# ...
		days += md
	md = days_in_month(year, month)
	if day >= 1 and day <= md:
		# ...
	else:
		# ...

print(day_of_year(2000, 12, 31))

</hint>


<sampleSolution>
def is_year_leap(year):
	if year % 4 != 0:
		return False
	elif year % 100 != 0:
		return True
	elif year % 400 != 0:
		return False
	else:
		return True

def days_in_month(year, month):
	if year < 1582 or month < 1 or month > 12:
		return None
	days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
	res  = days[month - 1]
	if month == 2 and is_year_leap(year):
		res = 29
	return res

def day_of_year(year, month, day):
	days = 0
	for m in range(1, month):
		md = days_in_month(year, m)
		if md == None:
			return None
		days += md
	md = days_in_month(year, month)
	if day >= 1 and day <= md:
		return days + day
	else:
		return None

print(day_of_year(2000, 12, 31))

</sampleSolution>

</problem>