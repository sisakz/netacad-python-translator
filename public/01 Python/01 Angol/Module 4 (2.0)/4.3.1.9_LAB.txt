<problem chapter='4' section='3' slide='1' problem='9' title='LAB: Prime numbers ‒ how to find them'>

<!--
Update history:
2020-08-14 Grzegorz (reviewed, re-formatted)
-->

<code>

def is_prime(num):
#
# Write your code here.
#

for i in range(1, 20):
	if is_prime(i + 1):
			print(i + 1, end=" ")
print()

</code>

<span class="label" style="background-color:rgb(205, 168, 105);"><strong>LAB</strong></span>

<br><br>

<h2>Estimated time</h2>
<p>15-20 minutes</p>

<h2>Level of difficulty</h2>
<p>Medium</p>


<h2>Objectives</h2>

<ul>
<li>familiarizing the student with classic notions and algorithms;</li>
<li>improving the student's skills in defining and using functions.</li>
</ul>


<h2>Scenario</h2>

<p><i>A natural number is <b>prime</b> if it is greater than 1 and has no divisors other than 1 and itself.</i></p>

<p>Complicated? Not at all. For example, 8 isn't a prime number, as you can divide it by 2 and 4 (we can't use divisors equal to 1 and 8, as the definition prohibits this).</p>

<p>On the other hand, 7 is a prime number, as we can't find any legal divisors for it.</p>

<br>

<p>Your task is to write a function checking whether a number is prime or not.</p>

<p>The function:</p>
<ul>
<li>is called <codel>is_prime</codel>;</li>
<li>takes one argument (the value to check)</li>
<li>returns <codel>True</codel> if the argument is a prime number, and <codel>False</codel> otherwise.</li>
</ul>

<p>Hint: try to divide the argument by all subsequent values (starting from 2) and check the remainder ‒ if it's zero, your number cannot be a prime; think carefully about when you should stop the process.</p>

<p>If you need to know the square root of any value, you can utilize the <codel>**</codel> operator. Remember: the square root of <font face="courier new">x</font> is the same as <font face="courier new">x<sup>0.5</sup></font></p>

<p>Complete the code in the editor.</p>

<p>Run your code and check whether your output is the same as ours.</p>


<h2>Expected output</h2>


<p><codep>2 3 5 7 11 13 17 19</codep></p>

<br>

<studyMode>false</studyMode>
<labMode>true</labMode>


<hint>
def is_prime(num):
    # the for loop
        # the if statement
            return False
    return True

for i in range(1, 20):
    if is_prime(i + 1):
        print(i + 1, end=" ")
print()

</hint>


<sampleSolution>
def is_prime(num):
    for i in range(2, int(1 + num ** 0.5)):
        if num % i == 0:
            return False
    return True

for i in range(1, 20):
    if is_prime(i + 1):
        print(i + 1, end=" ")
print()

</sampleSolution>

</problem>
