<problem chapter='4' section='2' slide='1' problem='3' title='How functions communicate with their environment'>

<!--
Update history:
2020-08-13 Grzegorz (reviewed, re-formatted)
-->

<code>
def message(what, number):
    print("Enter", what, "number", number)

# invoke the function

</code>



<h1>Parametrized functions: continued</h1>

<p>A function can have <strong>as many parameters as you want</strong>, but the more parameters you have, the harder it is to memorize their roles and purposes.</p>

<img src="/uploads/media/default/0001/01/3f669e94f4b46f75a09e31ba0925063ea2097a85.png" width="70%" alt="Functions as a black box concept">
<br>
<br>

<p>Let's modify the function â€’ it has <strong>two parameters</strong> now:</p>

<codep>def message(<mark style="background-color:#e6f2ff;">what</mark>, <mark style="background-color:#e6f2ff;">number</mark>):
    print("Enter", what, "number", number)

</codep>

<br>

<p>This also means that invoking the function will require <strong>two arguments</strong>.</p>

<p>The first new parameter is intended to carry the name of the desired value.</p>

<p>Here it is:</p>

<codep class="syntax-color">def message(what, number):
    print("Enter", what, "number", number)

message("telephone", 11)
message("price", 5)
message("number", "number")

</codep>

<br>

<p>This is the output you're about to see:</p>

<codep>Enter telephone number 11
Enter price number 5
Enter number number number</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br>

<p>Run the code, modify it, add more parameters, and see how this affects the output.</p>


<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
