<problem chapter='4' section='1' slide='1' problem='6' title='SECTION SUMMARY'>

<!--
Update history:
2020-08-13 Grzegorz (reviewed, re-formatted)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Key takeaways</h1>

<br>


<p>1. A <strong>function</strong> is a block of code that performs a specific task when the function is called (invoked). You can use functions to make your code reusable, better organized, and more readable. Functions can have parameters and return values.</p>

<p>2. There are at least four basic types of functions in Python:</p>

<ul>
<li><strong>built-in functions</strong> which are an integral part of Python (such as the <codel>print()</codel> function). You can see a complete list of built-in Python functions at <a href="https://docs.python.org/3/library/functions.html" target="_blank">https://docs.python.org/3/library/functions.html</a>.</li>

<li>the ones that come from <strong>pre-installed modules</strong> (you'll learn about them in the <i>Python Essentials 2</i> course)</li>

<li><strong>user-defined functions</strong> which are written by users for users ‒ you can write your own functions and use them freely in your code,</li>

<li>the <codel>lambda</codel> functions (you'll learn about them in the <i>Python Essentials 2</i> course.)</li>

</ul>

<p>3. You can define your own function using the <codel>def</codel> keyword and the following syntax:</p>

<codep>def your_function(optional parameters):
    # the body of the function

</codep>

<br>

<p>You can define a function which doesn't take any arguments, e.g.:</p>

<codep>def message():    # defining a function
    print("Hello")    # body of the function

message()    # calling the function

</codep>
<br>

<p>You can define a function which takes arguments, too, just like the one-parameter function below:</p>

<codep>def hello(name):    # defining a function
    print("Hello,", name)    # body of the function


name = input("Enter your name: ")

hello(name)    # calling the function

</codep>

<br>

<p>We'll tell you more about parametrized functions in the next section. Don't worry.</p>



<br>
<br>

</div>




<div class="small-12 large-6 columns">

<br>


<p><strong>Exercise 1</strong></p>
<p>The <codel>input()</codel> function is an example of a:
<br><br>
a) user-defined function<br>
b) built-in function<br></p>


<button class="button tiny" onclick="solution('sol')">Check</button>

<p id="sol" style="display: none;">
<strong>b</strong> ‒ it's a built-in function
</p>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>

<br>



<p><strong>Exercise 2</strong></p>
<p>What happens when you try to invoke a function before you define it? Example:</p>

<codep>hi()

def hi():
    print("hi!")

</codep>

<br>


<button class="button tiny" onclick="solution('sol2')">Check</button>

<p id="sol2" style="display: none;">
An exception is thrown (the <codel>NameError</codel> exception to be more precise)
</p>


<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>

<br>




<p><strong>Exercise 3</strong></p>
<p>What will happen when you run the code below?</p>

<codep>def hi():
    print("hi")

hi(5)

</codep>

<br>

<button class="button tiny" onclick="solution('sol3')">Check</button>

<p id="sol3" style="display: none;">
An exception will be thrown (the <codel>TypeError</codel> exception, to be more precise) ‒ the <codel>hi()</codel> function doesn't take any arguments
</p>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>


<br>

</div>

</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
