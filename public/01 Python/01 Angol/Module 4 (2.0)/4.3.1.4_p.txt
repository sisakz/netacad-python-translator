<problem chapter='4' section='3' slide='1' problem='4' title='Returning a result from a function'>

<!--
Update history:
2020-08-14 Grzegorz (reviewed, re-formatted)
-->

<code>
def list_sum(lst):
    s = 0
    
    for elem in lst:
        s += elem
    
    return s

</code>



<h1>Effects and results: lists and functions</h1>


<p>There are two additional questions that should be answered here.</p>


<p>The first is: <strong>may a list be sent to a function as an argument?</strong></p>


<p>Of course it may! Any entity recognizable by Python can play the role of a function argument, although it has to be assured that the function is able to cope with it.</p>


<p>So, if you pass a list to a function, the function has to handle it like a list. </p>


<p>A function like this one here:</p>

<codep class="syntax-color">def list_sum(lst):
    s = 0
    
    for elem in lst:
        s += elem
    
    return s
</codep>

<br>

<p>and invoked like this:</p>

<codep class="syntax-color">print(list_sum([5, 4, 3]))
</codep>
<br>
 

<p>will return <codel>12</codel> as a result, but you should expect problems if you invoke it in this risky way:</p>

<codep style="color:red;">print(list_sum(5))

</codep>
<br>

<p>Python's response will be unequivocal:</p>

<codep>TypeError: 'int' object is not iterable</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>
<br>
 

<p>This is caused by the fact that a <strong>single integer value mustn't be iterated through by the <codel>for</codel> loop</strong>.</p>

<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
