<problem chapter='4' section='3' slide='1' problem='1' title='Returning a result from a function'>

<!--
Update history:
2020-08-14 Grzegorz (reviewed, re-formatted)
2020-08-27 Grzegorz (typos corrected)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Effects and results: the <font face="courier new">return</font> instruction</h1>

<p>All the previously presented functions have some kind of effect ‒ they produce some text and send it to the console.</p>

<p>Of course, functions ‒ like their mathematical siblings ‒ may have results.</p>


<p>To get <strong>functions to return a value</strong> (but not only for this purpose) you use the <codel>return</codel> instruction.</p>

<p>This word gives you a full picture of its capabilities. Note: it's a Python <strong>keyword</strong>.</p>


<br>

<p>The <codel>return</codel> instruction has <strong>two different variants</strong> ‒ let's consider them separately.</p>




<h2><font face="courier new">return</font> without an expression</h2>

<p>The first consists of the keyword itself, without anything following it.</p>

<p>When used inside a function, it causes the <strong>immediate termination of the function's execution, and an instant return (hence the name) to the point of invocation</strong>.</p>

<p>Note: if a function is not intended to produce a result, <strong>using the <codel>return</codel> instruction is not obligatory</strong> ‒ it will be executed implicitly at the end of the function.</p>

<p>Anyway, you can use it to <strong>terminate a function's activities on demand</strong>, before the control reaches the last line of the function.</p>

<hr>

<p>Let's consider the following function:</p>

<codep class="syntax-color copy">def happy_new_year(wishes = True):
    print("Three...")
    print("Two...")
    print("One...")
    if not wishes:
        return
    
    print("Happy New Year!")
</codep>

<br>

<p>When invoked without any arguments:</p>

<codep class="syntax-color">happy_new_year()
</codep>

<br> 

<p>The function causes a little noise ‒ the output will look like this:</p>

<codep>Three...
Two...
One...
Happy New Year!</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br> 

<p>Providing <codel>False</codel> as an argument:</p>

<codep class="syntax-color">happy_new_year(False)
</codep>

<br> 

<p>will modify the function's behavior ‒ the <codel>return</codel> instruction will cause its termination just before the wishes ‒ this is the updated output:</p>

<codep>Three...
Two...
One...</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br>
<br>

</div>





<div class="small-12 large-6 columns">


<h2><font face="courier new">return</font> with an expression</h2>


<p>The second <codel>return</codel> variant is <strong>extended with an expression</strong>:</p>

<codep>def function():
    return <mark style="background-color:#e6f2ff;">expression</mark>

</codep>
<br>



<p>There are two consequences of using it:</p>

<ul>
<li>it causes the <strong>immediate termination of the function's execution</strong> (nothing new compared to the first variant)</li>

<li>moreover, the function will <strong>evaluate the expression's value and will return it (hence the name once again) as the function's result</strong>.</li>
</ul>


<p>Yes, we already know ‒ this example isn't really sophisticated:</p>

<codep class="syntax-color">def boring_function():
    return 123

x = boring_function()

print("The boring_function has returned its result. It's:", x)
</codep>

<br> 

<p>The snippet writes the following text to the console:</p>

<codep>The boring_function has returned its result. It's: 123</codep>

<br> 

<p>Let's investigate it for a while.</p>


<p>Analyze the figure below:</>

<img src="/uploads/media/default/0001/02/4.1.3.1.png" alt="Assigning the value returned by function to a variable">

<br>
<br>

<p>The <codel>return</codel> instruction, enriched with the expression (the expression is very simple here), "transports" the expression's value to the place where the function has been invoked.</p>


<p>The result may be freely used here, e.g., to be assigned to a variable.</p>

<p>It may also be completely ignored and lost without a trace.</p>

<br>

<p>Note, we're not being too polite here ‒ the function returns a value, and we ignore it (we don't use it in any way):</p>

<codep class="syntax-color">def boring_function():
    print("'Boredom Mode' ON.")
    return 123

print("This lesson is interesting!")
boring_function()
print("This lesson is boring...")
</codep>

<br>

<p>The program produces the following output:</p>

<codep>This lesson is interesting!
'Boredom Mode' ON.
This lesson is boring...</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br> 

<p>Is it punishable? Not at all. </p>

<p>The only disadvantage is that the result has been irretrievably lost.</p>

<p>Don't forget:</p>

<ul>
<li>you are always <strong>allowed to ignore the function's result</strong>, and be satisfied with the function's effect (if the function has any)</li>

<li>if a function is intended to return a useful result, it must contain the second variant of the <codel>return</codel> instruction.</li>
</ul>

<p>Wait a minute ‒ does this mean that there are useless results, too? Yes, in some sense.</p>


<br>


</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
