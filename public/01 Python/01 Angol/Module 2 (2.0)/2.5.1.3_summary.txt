<problem chapter='2' section='5' slide='1' problem='3' title='SECTION SUMMARY'>

<!--
Update history:
2020-07-17 Grzegorz (reviewed; code formatting)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Key takeaways</h1>

<br>


<p>1. Comments can be used to leave additional information in code. They are omitted at runtime. The information left in the source code is addressed to human readers. In Python, a comment is a piece of text that begins with <codel>#</codel>. The comment extends to the end of the line.</p>

<p>2. If you want to place a comment that spans several lines, you need to place <codel>#</codel> in front of them all. Moreover, you can use a comment to mark a piece of code that is not needed at the moment (see the last line of the snippet below), e.g.:</p>

<codep><mark style="background-color:#e6f2ff;"># This program prints</mark>
<mark style="background-color:#e6f2ff;"># an introduction to the screen.</mark>
print("Hello!")  <mark style="background-color:#e6f2ff;"># Invoking the print() function</mark>
<mark style="background-color:#e6f2ff;"># print("I'm Python.")</mark>

</codep>
<br>

<p>3. Whenever possible and justified, you should give <strong>self-commenting names</strong> to variables, e.g., if you're using two variables to store the length and width of something, the variable names <codel>length</codel> and <codel>width</codel> may be a better choice than <codel>myvar1</codel> and <codel>myvar2</codel>.</p>

<p>4. It's important to use comments to make programs easier to understand, and to use readable and meaningful variable names in code. However, it's equally important <strong>not to use</strong> variable names that are confusing, or leave comments that contain wrong or incorrect information!</p>

<p>5. Comments can be important when <i>you</i> are reading your own code after some time (trust us, developers do forget what their own code does), and when <i>others</i> are reading your code (they can help them understand what your programs do and how they do it more quickly).</p>


<br>
<br>

</div>




<div class="small-12 large-6 columns">

<br>


<p><strong>Exercise 1</strong></p>
<p>What is the output of the following snippet?</p>

<codep># print("String #1")
print("String #2")

</codep>

<br>

<button class="button tiny" onclick="solution('sol')">Check</button>

<p id="sol" style="display: none;">
<codep>String #2</codep>
</p>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>

<br>



<p><strong>Exercise 2</strong></p>
<p>What will happen when you run the following code?</p>

<codep># This is
a multiline
comment. #

print("Hello!")

</codep>

<br>


<button class="button tiny" onclick="solution('sol2')">Check</button>

<p id="sol2" style="display: none;">
<codep>SyntaxError: invalid syntax</codep>
</p>


<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>

<br>




<br>

</div>

</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
