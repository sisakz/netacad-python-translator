<problem chapter='2' section='3' slide='1' problem='9' title='Operators â€’ data manipulation tools'>

<!--
Update history:
2020-07-17 Grzegorz (reformatted; code - syntax-color and blank lines added)
2020-08-25 Grzegorz (the // operator added to the table)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>List of priorities</h1>


<p>Since you're new to Python operators, we don't want to present the complete list of operator priorities right now.</p>

<p>Instead, we'll show you a truncated form, and we'll expand it consistently as we introduce new operators.</p>

<p>Look at the table below:</p>

<table style="width:75%">

<tr>
<th>Priority</th>
<th>Operator</th>
<th></th>
</tr>

<tr>
<td>1</td>
<td><codel>+</codel>, <codel>-</codel></td>
<td>unary</td>
</tr>

<tr>
<td>2</td>
<td><codel>**</codel></td>
<td></td>
</tr>

<tr>
<td>3</td>
<td><codel>*</codel>, <codel>/</codel>, <codel>//</codel>, <codel>%</codel></td>
<td></td>
</tr>

<tr>
<td>4</td>
<td><codel>+</codel>, <codel>-</codel></td>
<td>binary</td>
</tr>

</table>

<br>

<p>Note: we've enumerated the operators in order <strong>from the highest (1) to the lowest (4) priorities</strong>.</p>

<br>

<p>Try to work through the following expression:</p>

<codep class="syntax-color">print(2 * 3 % 5)
</codep>

<br>

<p>Both operators (<codel>*</codel> and <codel>%</codel>) have the same priority, so the result can be guessed only when you know the binding direction. What do you think? What is the result?</p>

<button class="button tiny" onclick="solution('sol')">Check</button>

<br>

<p id="sol" style="display: none;">
<codel>1</codel>
</p>


<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>


<br>

</div>




<div class="small-12 large-6 columns">


<h1>Operators and parentheses</h1>


<p>Of course, you're always allowed to use <strong>parentheses</strong>, which can change the natural order of a calculation.</p>

<p>In accordance with the arithmetic rules, <strong>subexpressions in parentheses are always calculated first</strong>.</p>

<p>You can use as many parentheses as you need, and they're often used to <strong>improve the readability</strong> of an expression, even if they don't change the order of the operations.</p>

<p>An example of an expression with multiple parentheses is here:</p>


<codep class="syntax-color">print((5 * ((25 % 13) + 100) / (2 * 13)) // 2)
</codep>


<br>

<p>Try to compute the value that's printed to the console. What's the result of the <codel>print()</codel> function?</p>

<button class="button tiny" onclick="solution('sol2')">Check</button>


<p id="sol2" style="display: none;"><codel>10.0</codel></p>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>



<br>



</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
