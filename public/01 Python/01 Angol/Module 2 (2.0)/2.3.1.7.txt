<problem chapter='2' section='3' slide='1' problem='7' title='Operators â€’ data manipulation tools'>

<!--
Update history:
2020-07-17 Grzegorz (reformatted; code - syntax-color and blank lines added;)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Operators and their priorities</h1>


<p>So far, we've treated each operator as if it had no connection with the others. Obviously, such an ideal and simple situation is a rarity in real programming.</p>

<p>Also, you will very often find more than one operator in one expression, and then things are no longer so simple.</p>

<p>Consider the following expression:</p>

<codep>2 + 3 * 5</codep>

<br>

<p>You probably remember from school that <strong>multiplications precede additions</strong>.</p>

<p>You surely remember that you should first multiply 3 by 5 and, keeping the 15 in your memory, then add it to 2, thus getting the result of 17.</p>


<p>The phenomenon that causes some operators to act before others is known as <strong>the hierarchy of priorities</strong>.</p>

<p>Python precisely defines the priorities of all operators, and assumes that operators of a higher priority perform their operations before the operators of a lower priority.</p>

<p>So, if you know that <codel>*</codel> has a higher priority than <codel>+</codel>, the computation of the final result should be obvious.</p>


<br>

</div>


<div class="small-12 large-6 columns">

<h1>Operators and their bindings</h1>


<p>The <strong>binding</strong> of the operator determines the order of computations performed by some operators with equal priority, put side by side in one expression.</p>

<p>Most of Python's operators have left-sided binding, which means that the calculation of the expression is conducted from left to right.</p>

<p>This simple example will show you how it works. Take a look:</p>

<codep class="syntax-color">print(9 % 6 % 2)
</codep>

<br>

<p>There are two possible ways of evaluating this expression:</p>

<ul>
<li>from left to right: first <codel>9 % 6</codel> gives <codel>3</codel>, and then <codel>3 % 2</codel> gives <codel>1</codel>;</li>
<li>from right to left: first <codel>6 % 2</codel> gives <codel>0</codel>, and then <codel>9 % 0</codel> causes <strong>a fatal error</strong>.</li>
</ul>

<br>

<p>Run the example and see what you get.</p>

<p>The result should be <codel>1</codel>. This operator has <strong>left-sided binding</strong>. But there's one interesting exception.</p>

<br>

</div>


</div>
</div>

<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
