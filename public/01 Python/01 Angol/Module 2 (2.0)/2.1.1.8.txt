<problem chapter='2' section='1' slide='1' problem='8' title='Your very first program'>

<!--
Update history:
2020-07-17 Grzegorz (text format and page number change, code format)
2020-08-25 Grzegorz (changing the opening paragraph)
-->

<code>
print("The itsy bitsy spider climbed up the waterspout.")
print("Down came the rain and washed the spider out.")

</code>

<h1>The <span style="font-family:courier new;">print()</span> function ‒ instructions</h1>


<p>You have already seen a computer program that contains one function invocation. A function invocation is one of many possible kinds of Python <strong>instruction</strong>.</p>

<p>Of course, any complex program usually contains many more instructions than one. The question is: how do you couple more than one instruction into the Python code?</p>

<p>Python's syntax is quite specific in this area. Unlike most programming languages, Python requires that <strong>there cannot be more than one instruction in a line</strong>.</p>

<p>A line can be empty (i.e., it may contain no instruction at all) but it must not contain two, three or more instructions. This is strictly prohibited.</p>

<p>Note: Python makes one exception to this rule ‒ it allows one instruction to spread across more than one line (which may be helpful when your code contains complex constructions).</p>

<p>Let's expand the code a bit. You can see it in the editor on the right. Run it and note what you see in the console.</p>


<p>Your Python console should now look like this:</p>


<codep>The itsy bitsy spider climbed up the waterspout.
Down came the rain and washed the spider out.</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>


<p>This is a good opportunity to make some observations:</p>

<ul>
<li>the program <strong>invokes the <codel>print()</codel> function twice</strong>, and you can see two separate lines in the console ‒ this means that <codel>print()</codel> begins its output from a new line each time it starts its execution; you can change this behavior, but you can also use it to your advantage;</li>

<li>each <codel>print()</codel> invocation contains a different string, as its argument, and the console content reflects it ‒ this means that <strong>the instructions in the code are executed in the same order</strong> in which they have been placed in the source file; no subsequent instruction is executed until the previous one is completed (there are some exceptions to this rule, but you can ignore them for now.)</li>
</ul>

<br>


<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
