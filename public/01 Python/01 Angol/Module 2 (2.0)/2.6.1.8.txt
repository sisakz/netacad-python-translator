<problem chapter='2' section='6' slide='1' problem='8' title='How to talk to a computer: string operators'>

<!--
Update history:
2020-07-17 Grzegorz (reviewed; code - blank lines and syntax-color class added)
-->

<h1>Type conversion: <span style="font-family:courier new;">str()</span></h1>


<p>You already know how to use the <codel>int()</codel> and <codel>float()</codel> functions to convert a string into a number.</p>

<p>This type of conversion is not a one-way street. You can also <strong>convert a number into a string</strong>, which is way easier and safer â€’ this kind of operation is always possible.</p>

<p>A function capable of doing that is called <codel>str()</codel>:</p>

<codep class="syntax-color">str(number)
</codep>

<br>


<p>To be honest, it can do much more than just transform numbers into strings, but that can wait for later.</p>

<br>



<h1>The "right-angle triangle" again</h1>


<p>Here is our "right-angle triangle" program again:</p>

<codep>leg_a = float(input("Input first leg length: "))
leg_b = float(input("Input second leg length: "))
print("Hypotenuse length is " + <mark style="background-color:#e6f2ff;">str((leg_a**2 + leg_b**2)</mark> ** .5))

</codep>

<br>

<p>We've modified it a bit to show you how the <codel>str()</codel> function works. Thanks to this, we can <strong>pass the whole result to the <codel>print()</codel> function as one string</strong>, forgetting about the commas.</p>

<br>

<p>You've made some serious strides on your way to Python programming.</p>

<p>You already know the basic data types, and a set of fundamental operators. You know how to organize the output and how to get data from the user. These are very strong foundations for Module 3. But before we move on to the next module, let's do a few labs, and recap all that you've learned in this section.</p>


<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
