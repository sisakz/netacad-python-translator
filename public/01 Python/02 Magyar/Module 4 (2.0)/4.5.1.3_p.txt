<problem chapter='4' section='5' slide='1' problem='3' title='Függvények három paraméterrel'>

<!--
Update history:
2020-08-18 Grzegorz (reviewed, re-formatted, PEP-8 compliance check)
-->

<code>def is_a_triangle(a, b, c):
    if a + b <= c:
        return False
    if b + c <= a:
        return False
    if c + a <= b:
        return False
    return True


print(is_a_triangle(1, 1, 1))
print(is_a_triangle(1, 1, 3))

</code>



<h1>Egyszerű függvények: folytatás</h1>

<p>Játsszunk most a háromszögekkel. Kezdjük egy olyan függvénnyel, amely azt vizsgálja, hogy három adott hosszúságú oldal alkothat-e háromszöget!</p>

<img src="/uploads/media/default/0001/01/9688d65ce90b1ae12501b6a6a4f8e8914032069e.png" width="60%" alt="A triangle with equal sides">

<br>
<br>

<p>Az iskolai tanulmányainkból tudjuk, hogy <i>két tetszőleges oldal összegének hosszabbnak kell lennie, mint a harmadik oldal</i>.</p>

<p>Nem lesz nehéz kihívás. A függvénynek <strong>három paramétere</strong> lesz, oldalanként egy-egy.</p>

<p>A <codel>True</codel> értéket adja vissza, ha az oldalak háromszöget tudnak alkotni, és <codel>False</codel>-t, ha nem. Egy ilyen függvénynek az <codel>is_a_triangle</codel> egy tökéletes név.</p>

<br>

<p>Nézd meg a kódot a szerkesztőben, ott megtalálod a függvényünket! Futtasd le a programot!</p>

<p>Úgy tűnik, hogy jól működik - ezek az eredmények:</p>

<codep>True
False</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br>

<p>Lehetne tömörebbé tenni? Kicsit terjedelmesnek tűnik.</p>


<p>Ez egy rövidebb változat:</p>

<codep class="syntax-color copy">def is_a_triangle(a, b, c):
    if a + b <= c or b + c <= a or c + a <= b:
        return False
    return True


print(is_a_triangle(1, 1, 1))
print(is_a_triangle(1, 1, 3))
</codep>

<br>

<p>Esetleg lehetne még jobban tömöríteni?</p>

<p>Igen, megtehetjük - nézd:</p>

<codep class="syntax-color copy">def is_a_triangle(a, b, c):
    return a + b > c and b + c > a and c + a > b


print(is_a_triangle(1, 1, 1))
print(is_a_triangle(1, 1, 3))
</codep>

<br>

<p>Negáltuk a feltételt (megfordítottuk a relációsjeleket és az <codel>or</codel>-t <codel>and</codel>-re cseréltük, így kaptunk egy <strong>univerzális kifejezést a háromszög egyenlőtlenség tesztelésére</strong>).</p>

<p>Integráljuk a függvényt egy nagyobb programba! A felhasználótól három értéket fog kérni, majd felhasználja az előbbi függvényt!</p>

<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
