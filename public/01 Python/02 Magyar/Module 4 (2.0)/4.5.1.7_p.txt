<problem chapter='4' section='5' slide='1' problem='7' title='Függvények | Fibonacci számok'>

<!--
Update history:
2020-08-18 Grzegorz (reviewed, re-formatted, PEP-8 compliance check)
-->

<code>

</code>



<h1>Egyszerű függvények: Fibonacci-számok</h1>

<p>Ismered a <strong>Fibonacci-számokat</strong>?</p>

<p>A Fibonacci-számok egy egyszerű szabály alapján felépített <strong>egész számok sorozata</strong>:</p>

<ul>
<li>a sorozat első eleme 1 (<strong>Fib<sub>1</sub> = 1</strong>)</li>
<li>a második elem is 1 (<strong>Fib<sub>2</sub> = 1</strong>)</li>
<li>minden következő szám az előző két szám összege: <br>(<strong>Fib<sub>i</sub> = Fib<sub>i-1</sub> + Fib<sub>i-2</sub></strong>)</li>
</ul>

<p>Íme néhány az első Fibonacci-számok közül:</p>

<p style="font-family:courier new;">fib_1 = 1<br>
fib_2 = 1<br>
fib_3 = 1 + 1 = 2<br>
fib_4 = 1 + 2 = 3<br>
fib_5 = 2 + 3 = 5<br>
fib_6 = 3 + 5 = 8<br>
fib_7 = 5 + 8 = 13</p>


<p>Mit gondolsz, hogyan lehetne ezt <strong>egy függvényként megvalósítani</strong>?</p>

<p>Hozzuk létre a <codel>fib</codel> függvényünket és teszteljük! Itt is van:</p>

<codep class="syntax-color copy">def fib(n):
    if n < 1:
        return None
    if n < 3:
        return 1

    elem_1 = elem_2 = 1
    the_sum = 0
    for i in range(3, n + 1):
        the_sum = elem_1 + elem_2
        elem_1, elem_2 = elem_2, the_sum
    return the_sum


for n in range(1, 10):  # testing
    print(n, "->", fib(n))
</codep>

<br>


<p>Elemezd ki alaposan a <codel>for</codel> ciklus törzsét, és figyeld meg, hogyan <strong>mozgatjuk az <codel>elem_1</codel> és az <codel>elem_2</codel> változókat az egymást követő Fibonacci-számokon keresztül</strong>!</p>

<p>A kód teszt részének kimenete:</p>

<codep>1 -> 1
2 -> 1
3 -> 2
4 -> 3
5 -> 5
6 -> 8
7 -> 13
8 -> 21
9 -> 34</codep>
<p style="text-align: right;"><font size="-2"><b>kimenet</b></font></p>

<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
