<problem chapter='4' section='3' slide='1' problem='7' title="LAB: Saját függvény írása és használata - Hónap napjainak száma">

<!--
Update history:
2020-08-14 Grzegorz (reviewed, re-formatted)
-->

<code>

def is_year_leap(year):
#
# Your code from LAB 4.3.6.
#

def days_in_month(year, month):
#
# Write your new code here.
#

test_years = [1900, 2000, 2016, 1987]
test_months = [2, 2, 1, 11]
test_results = [28, 29, 31, 30]
for i in range(len(test_years)):
	yr = test_years[i]
	mo = test_months[i]
	print(yr, mo, "->", end="")
	result = days_in_month(yr, mo)
	if result == test_results[i]:
		print("OK")
	else:
		print("Failed")
		
</code>

<span class="label" style="background-color:rgb(205, 168, 105);"><strong>LABORGYAKORLAT</strong></span>

<br><br>

<h2>Becsült idő</h2>
<p>15-20 perc</p>

<h2>Nehézségi szint</h2>
<p>Közepes</p>

<h2>Előfeltétel</h2>
<p>LAB 4.3.1.6</p>


<h2>Célok</h2>

<p>Ismerkedjen meg a tanuló a következőkkel:</p>
<ul>
<li>paraméterezett függvények tervezése és írása;</li>
<li>a <font face="courier new">return</font> utasítás használata;</li>
<li>a tanuló saját függvényeinek felhasználása.</li>
</ul>


<h2>Feladatleírás</h2>

<p>Feladatod egy olyan függvény írása és tesztelése, amely két argumentumot (egy évet és egy hónapot) vár, és visszaadja a napok számát az adott hónap/év pároshoz (a február hónap érzékeny az <codel>év</codel> értékére, a függvénynek viszont univerzálisnak kell lennie).</p>

<p>A függvény kezdeti része készen áll. Érjük el, hogy függvény visszatérési értéke <codel>None</codel> legyen, ha az argumentumainak nincs értelme.</p>

<p>Természetesen használhatod (sőt, használnod kell) a korábban megírt és tesztelt függvényt (LAB 4.3.1.6). Ez nagyon hasznos lehet. Javasoljuk, hogy egy hónapok hosszával kitöltött listát használj! Ezt a függvényen belül is létrehozhatod - ez az apró trükk jelentősen lerövidíti a kódot.</p>

<p>Elkészítettünk egy tesztelési kódot számodra. Bővítsd ki, hogy több teszteset is szerepeljen benne!</p>

<br>

<studyMode>false</studyMode>
<labMode>true</labMode>


<hint>
def is_year_leap(year):
	if year % 4 != 0:
		return False
	elif year % 100 != 0:
		return True
	elif year % 400 != 0:
		return False
	else:
		return True

def days_in_month(year, month):
	# if statement
		# ...
	days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
	res  = days[month - 1]
	if month == 2 and is_year_leap(year):
		res = 29
	return res

test_years = [1900, 2000, 2016, 1987]
test_months = [ 2, 2, 1, 11]
test_results = [28, 29, 31, 30]
for i in range(len(test_years)):
	yr = test_years[i]
	mo = test_months[i]
	print(yr,mo,"-> ",end="")
	result = days_in_month(yr, mo)
	if result == test_results[i]:
		print("OK")
	else:
		print("Failed")

</hint>


<sampleSolution>
def is_year_leap(year):
	if year % 4 != 0:
		return False
	elif year % 100 != 0:
		return True
	elif year % 400 != 0:
		return False
	else:
		return True

def days_in_month(year,month):
	if year < 1582 or month < 1 or month > 12:
		return None
	days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
	res  = days[month - 1]
	if month == 2 and is_year_leap(year):
		res = 29
	return res

test_years = [1900, 2000, 2016, 1987]
test_months = [ 2, 2, 1, 11]
test_results = [28, 29, 31, 30]
for i in range(len(test_years)):
	yr = test_years[i]
	mo = test_months[i]
	print(yr,mo,"-> ",end="")
	result = days_in_month(yr, mo)
	if result == test_results[i]:
		print("OK")
	else:
		print("Failed")

</sampleSolution>

</problem>