<problem chapter='4' section='4' slide='1' problem='3' title='Hatókörök - A global kulcsszó'>

<!--
Update history:
2020-08-18 Grzegorz (reviewed, re-formatted)
-->

<code>
def my_function():
    global var
    var = 2
    print("Do I know that variable?", var)


var = 1
my_function()
print(var)

</code>



<h1>Függvények és hatókörök: a <font face="courier new">global</font> kulcsszó</h1>

<p>Remélhetőleg mostanra felmerült benned a következő kérdés: ez azt jelenti, hogy egy függvény nem képes módosítani egy rajta kívül definiált változót? Ez sok bosszúságot okozna.</p>

<p>Szerencsére a válasz: <i>nem</i>.</p>

<p>Van egy speciális Python-módszer, amely képes <strong>egy változó hatókörét úgy kiterjeszteni, hogy az magában foglalja a függvények törzsét is</strong> (akkor is, ha nem csak olvasni akarjuk az értékeket, hanem módosítani is).</p>

<p>Ilyen hatást a <codel>global</codel> kulcsszóval tudunk elérni:</p>

<codep class="syntax-color">global name
global name1, name2, ...
</codep>


<br>


<p>Ha ezt a kulcsszót egy függvényen belül használjuk a változó nevével (vagy vesszővel elválasztott nevekkel), akkor a Python nem hoz létre új változót a függvényen belül, helyette a kívülről elérhető változót fogja használni.</p>

<p>Más szóval, ez a név globális lesz (<strong>globális hatókörrel</strong> rendelkezik, és függetlenül attól, hogy olvasni vagy módosítani szeretnénk).</p>

<br>

<p>Vizsgáljuk meg a kódot a szerkesztőben!</p>

<p>A függvényhez hozzáadtuk a <codel>global</codel> kulcsszót.</p>

<p>A kódrészlet eredménye így alakul:</p>

<codep>Do I know that variable? 2
2</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br>

<p>Ez elegendő bizonyíték ahhoz, hogy lássuk: a <codel>global</codel> kulcsszó azt teszi, amit vártunk tőle.</p>

<br>


<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
