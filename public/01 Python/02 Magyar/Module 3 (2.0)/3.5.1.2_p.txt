<problem chapter='3' section='5' slide='1' problem='2' title='Listák rendezése | Buborékrendezés'>

<!--
Update history:
2020-08-12 Grzegorz (reviewed, re-formatted)
-->

<code>
</code>



<h1>Lista rendezése</h1>

<p>Hány bejárásra van szükségünk a teljes lista rendezéséhez?</p>

<p>Ezt a problémát a következő módon oldjuk meg: <strong>bevezetünk egy másik változót</strong>. Ennek a feladata, hogy megfigyelje, történt-e csere a bejárás során vagy sem. Ha nincs csere, akkor a lista már rendezett, és nincs további teendő. Létrehozunk egy <codel>swapped</codel> nevű változót, és <codel>False</codel> értéket rendelünk hozzá, amivel jelezzük, hogy nem volt csere. Ellenkező esetben <codel>True</codel> értéket kap.</p>

<codep class="syntax-color copy">my_list = [8, 10, 6, 2, 4]  # list to sort

for i in range(len(my_list) - 1):  # we need (5 - 1) comparisons
    if my_list[i] > my_list[i + 1]:  # compare adjacent elements
        my_list[i], my_list[i + 1] = my_list[i + 1], my_list[i]  # If we end up here, we have to swap the elements.
</codep>

<br>

<p>Ezt a programot minden gond nélkül el kell tudnod olvasni és megérteni:</p>

<codep class="syntax-color copy">my_list = [8, 10, 6, 2, 4]  # list to sort
swapped = True  # It's a little fake, we need it to enter the while loop.

while swapped:
    swapped = False  # no swaps so far
    for i in range(len(my_list) - 1):
        if my_list[i] > my_list[i + 1]:
            swapped = True  # a swap occurred!
            my_list[i], my_list[i + 1] = my_list[i + 1], my_list[i]

print(my_list)
</codep>

<br>

<p>Futtasd le és teszteld a programot!</p>



<br>


<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
