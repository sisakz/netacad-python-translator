<problem chapter='3' section='3' slide='1' problem='6' title='SZAKASZ ÖSSZEFOGLALÁS'>

<!--
Update history:
2020-07-21 Grzegorz (reviewed, reformatted)
2020-08-26 Grzegorz (two-s complement note added)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>A legfontosabb tudnivalók</h1>

<br>


<p>1. A Python a következő logikai operátorokat támogatja:</p>

<ul>
<li><codel>and</codel> &rarr; ha mindkét operandus igaz, akkor a feltétel igaz, pl.: <codel>(True and True)</codel> az <codel>True</codel>,</li>
<li><codel>or</codel> &rarr; ha bármelyik operandus igaz, akkor a feltétel igaz, pl.: <codel>(True or False)</codel> az <codel>True</codel>,</li>
<li><codel>not</codel> &rarr; hamisat ad vissza, ha az eredmény igaz, és igazat ad vissza, ha az eredmény hamis, pl.: <codel>not True</codel> az <codel>False</codel>.</li>
</ul>

<p>2. A bitwise operátorok segítségével az adatok egyes bitjeit manipulálhatod. A következő mintaadatokat fogjuk használni, hogy szemléltessük a bitwise operátorok jelentését Pythonban:</p>

<ul>
<li><codel>x = 15</codel>, ami binárisan <codel>0000 1111</codel>,</li>
<li><codel>y = 16</codel>, ami binárisan <codel>0001 0000</codel>.</li>
</ul>

<p>Elemezd az alábbi példákat:</p>

<ul>

<li>A <codel>&amp;</codel> egy <i>bitwise and</i>, pl.: <codel>x &amp; y = 0</codel>, ami binárisan <codel>0000 0000</codel>,</li>
<li>A <codel>|</codel> egy <i>bitwise or</i>, pl.: <codel>x | y = 31</codel>, ami binárisan <codel>0001 1111</codel> in binary,</li>
<li>A <codel>&tilde; </codel> egy <i>bitwise not</i>, pl.: <codel>&tilde; x = 240</codel>*, which is <codel>1111 0000</codel>,</li>
<li>A <codel>^</codel> egy <i>bitwise xor</i>, pl.: <codel>x ^ y = 31</codel>, ami binárisan <codel>0001 1111</codel>,</li>
<li>A <codel>&gt;&gt;</codel> egy <i>bitwise right shift</i>, pl.: <codel>y &gt;&gt; 1 = 8</codel>, ami binárisan <codel>0000 1000</codel>,</li>
<li>A <codel>&lt;&lt;</codel> egy <i>bitwise left shift</i>, pl.: <codel>y &lt;&lt; 3 = 128</codel>, ami binárisan <codel>1000 0000</codel>,</li>
</ul>

<br>

<p>* <codel>-16</codel> (decimális érték az előjeles 2-es komplemensből) - Tudj meg többet a <a href=https://en.wikipedia.org/wiki/Two%27s_complement target="_blank">kettes komplemens</a> műveletről.</p>
<br>

</div>




<div class="small-12 large-6 columns">

<br>


<p><strong>1. gyakorlat</strong></p>
<p>Mi a kimenete a következő kódrészletnek?</p>

<codep>x = 1
y = 0

z = ((x == y) and (x == y)) or not(x == y)
print(not(z))

</codep>

<br>

<button class="button tiny" onclick="solution('sol')">Ellenőrzés</button>

<p id="sol" style="display: none;">
<codep>False</codep>
</p>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>

<br>



<p><strong>2. gyakorlat</strong></p>
<p>Mi a kimenete a következő kódrészletnek?</p>

<codep>x = 4
y = 1

a = x & y
b = x | y
c = ~x  # tricky!
d = x ^ 5
e = x >> 2
f = x << 2

print(a, b, c, d, e, f)

</codep>

<br>


<button class="button tiny" onclick="solution('sol2')">Ellenőrzés</button>

<p id="sol2" style="display: none;">
<codep>0 5 -5 1 1 16</codep>
</p>


<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>

<br>



<br>

</div>

</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
