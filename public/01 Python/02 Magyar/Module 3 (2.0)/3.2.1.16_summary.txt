<problem chapter='3' section='2' slide='1' problem='16' title='SZAKASZ ÖSSZEFOGLALÁS (1/2)'>


<!--
Update history:
2020-07-21 Grzegorz (reviewed, re-formatted)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>A legfontosabb tudnivalók</h1>

<br>


<p>1. A Pythonban kétféle ciklus létezik, a <codel>while</codel> és a <codel>for</codel>:</p>

<ul>
<li>a <codel>while</codel> ciklus addig hajt végre egy utasítást vagy utasítások sorozatát, amíg egy megadott logikai feltétel igaz, pl.:</li>

<br>
<codep class="copy syntax-color"># Example 1
while True:
    print("Stuck in an infinite loop.")

# Example 2
counter = 5
while counter > 2:
    print(counter)
    counter -= 1
</codep>
<br>

<li>a <codel>for</codel> ciklus többször hajt végre egy utasításhalmazt. Arra szolgál, hogy egy sorozaton (pl.: egy listán, egy szótáron, egy tuplén (sokaságon) vagy egy halmazon – hamarosan megismerkedsz velük) vagy más, iterálható objektumokon (pl.: karakterláncokon) végigmenjen. A <codel>for</codel> ciklus segítségével egy számsorozaton mehetünk végig a beépítet <codel>range</codel> függvény segítségével. Nézzük meg az alábbi példákat:</li>

<br>
<codep class="copy syntax-color"># Example 1
word = "Python"
for letter in word:
    print(letter, end="*")

# Example 2
for i in range(1, 10):
    if i % 2 == 0:
        print(i)
</codep>
<br>

</ul>

<p>2. A <codel>break</codel> és a <codel>continue</codel> kifejezésekkel megváltoztathatjuk a ciklus menetét:</p>

<ul>
<li>A <codel>break</codel>-et a ciklusból való kilépéshez használjuk, pl.:</li>
<br>

<codep class="copy syntax-color">text = "OpenEDG Python Institute"
for letter in text:
    if letter == "P":
        break
    print(letter, end="")
</codep>

<br>

<li>A <codel>continue</codel> használatával kihagyhatjuk az aktuális iterációt, és folytathatjuk a következő iterációval, pl.:</li>
<br>

<codep class="copy syntax-color">text = "pyxpyxpyx"
for letter in text:
    if letter == "x":
        continue
    print(letter, end="")
</codep>
<br>

</ul>



<br>
<br>

</div>




<div class="small-12 large-6 columns">

<br>


<p>3. A <codel>while</codel> és a <codel>for</codel> ciklusok a Pythonban <codel>else</codel> záradékkal is rendelkezhetnek. Az <codel>else</codel> záradék a ciklus végrehajtása után fut le, amennyiben a ciklus nem szakadt meg a <codel>break</codel>-kel, pl.:</p>

<codep class="copy syntax-color">n = 0

while n != 3:
    print(n)
    n += 1
else:
    print(n, "else")

print()

for i in range(0, 3):
    print(i)
else:
    print(i, "else")
</codep>

<br>

<p>4. A <codel>range()</codel> függvény egy számsorozatot generál. Egész számokat fogad el, és tartományobjektumokat ad vissza. A <codel>range()</codel> szintaxisa a következőképpen néz ki: <codel>range(start, stop, step)</codel>, ahol:<p>

<ul>
<li>a <codel>start</codel> egy opcionális paraméter, amely a szekvencia kezdőszámát adja meg (alapértelmezés szerint <font face="Courier New">0</font>);</li>
<li>a <codel>stop</codel> egy opcionális paraméter, amely a generált szekvencia végét adja meg (de nincs benne);</li>
<li>a <codel>step</codel> egy opcionális paraméter, amely a sorozatban szereplő számok közötti különbséget adja meg (alapértelmezés szerint <font face="Courier New">1</font>).</li>
</ul>

<p>Példakód:</p>

<codep class="copy syntax-color">for i in range(3):
    print(i, end=" ")  # Outputs: 0 1 2

for i in range(6, 1, -2):
    print(i, end=" ")  # Outputs: 6, 4, 2
</codep>


<br>



</div>

</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
