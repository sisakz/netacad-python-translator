<problem chapter='3' section='2' slide='1' problem='2' title='Ciklusok | while'>

<!--
Update history:
2020-07-20 Grzegorz (reviewed, re-formatted)
-->

<h1>A <font face="Courier New">while</font> ciklus: további példák</h1>

<br>

<p>Nézzünk egy másik példát a <codel>while</codel> ciklus alkalmazására. Kövesd a megjegyzéseket, hogy megismerd az elképzelést és a megoldást.</p>

<codep class="copy line-numbers syntax-color"># A program that reads a sequence of numbers
# and counts how many numbers are even and how many are odd.
# The program terminates when zero is entered.

odd_numbers = 0
even_numbers = 0

# Read the first number.
number = int(input("Enter a number or type 0 to stop: "))

# 0 terminates execution.
while number != 0:
    # Check if the number is odd.
    if number % 2 == 1:
        # Increase the odd_numbers counter.
        odd_numbers += 1
    else:
        # Increase the even_numbers counter.
        even_numbers += 1
    # Read the next number.
    number = int(input("Enter a number or type 0 to stop: "))

# Print results.
print("Odd numbers count:", odd_numbers)
print("Even numbers count:", even_numbers)
</codep>

<br>

<p>Bizonyos kifejezések egyszerűsíthetők a program viselkedésének megváltoztatása nélkül.</p>

<p>Próbáld meg felidézni, hogy a Python hogyan értelmezi a feltétel igazságát, és vedd észre, hogy ez a két forma egyenértékű:</p>
<p><codel>while number != 0:</codel> and <codel>while number:</codel>.</p>

<p>Az a feltétel, amely azt ellenőrzi, hogy egy szám páratlan-e, szintén kódolható ezekben az egyenértékű formákban:</p>
<p><codel>if number % 2 == 1:</codel> and <codel>if number % 2:</codel>.</p>

<br>

<h2>Egy <font face="courier new">counter</font> változó használata a ciklusból való kilépéshez</h2>

<p>Nézd meg az alábbi kódrészletet:</p>

<codep class="copy line-numbers syntax-color">counter = 5
while counter != 0:
    print("Inside the loop.", counter)
    counter -= 1
print("Outside the loop.", counter)
</codep>

<br>

<p>Ennek a kódnak az a célja, hogy pontosan ötször kiírja az <codel>"Inside the loop."</codel> karakterláncot és a <codel>counter</codel> változóban tárolt értéket egy adott ciklus alatt. Ha a feltétel nem teljesül (a <codel>counter</codel> változó elérte a <codel>0</codel>-t), a ciklus kilép, és az <codel>"Outside the loop."</codel> üzenet, valamint a <codel>counter</codel> változóban tárolt érték kerül kiírásra.</p>

<p>De van egy dolog, amit tömörebben is meg lehet írni: a <codel>while</codel> ciklus feltétele.</p>

<p>Látod a különbséget?</p>

<codep class="copy line-numbers syntax-color">counter = 5
while counter:
    print("Inside the loop.", counter)
    counter -= 1
print("Outside the loop.", counter)
</codep>

<br>

<p>Tömörebb, mint korábban? Egy kicsit. Jobban olvasható? Ez vitatható.</p>

<p><span class="label" style="background-color:orange;"><b>EMLÉKEZZ</b></span></p>
<p>Ne érezd kötelezőnek, hogy mindig a legrövidebb és legtömörebb módon kódold a programjaidat. Az olvashatóság fontosabb tényező lehet. Legyen értelmezhető a kódod egy új programozó számára!</p>

<br>


<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
