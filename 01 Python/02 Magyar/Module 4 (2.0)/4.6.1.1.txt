<problem chapter='4' section='6' slide='1' problem='1' title='A tuple és szótár adattípus'>

<!--
Update history:
2020-08-18 Grzegorz (reviewed, re-formatted, PEP-8 compliance check)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">


<h1>Szekvencia típusok és a módosíthatóság</h1>


<p>Mielőtt bevezetnénk a <strong>tuple</strong> és <strong>szótár</strong> típusokat, két fontos fogalmat kell bemutatnunk: a <strong>szekvencia típust</strong> és a <strong>módosíthatóságot</strong>.</p>

<p>A <strong>szekvencia típus egy olyan adattípus a Pythonban, amely egynél több (vayg amikor a szekvencia üres, akkor kevesebb) értéket képes tárolni, és ezeket az értékeket elemről elemre, szekvenciálisan lehet kiolvasni belőle (innen a neve)</strong>.</p>

<p>Mivel a <codel>for</codel> ciklus egy olyan eszköz, amelyet kifejezetten szekvenciák végigjárására terveztek, a definíciónk a következő: <strong>a szekvencia olyan adat, amelyet a <codel>for</codel> ciklus bejárhat</strong>.</p>

<p>Eddig egy Python szekvenciával találkoztál - a listával. A lista a Python szekvencia klasszikus példája, bár van még néhány más szekvencia is, amit érdemes megemlíteni. Ezeket mutatjuk be ebben a részben.</p>

<br>

<p>A második fogalom - a <strong>módosíthatóság</strong> − a Python bármely adatának olyan tulajdonsága, amely leírja, hogy a program végrehajtása során szabadon megváltoztatható. Kétféle Python-adat létezik: a <strong>módosítható</strong> és a <strong>nem módosítható</strong>.</p>

<p><strong>A módosítható adatok bármikor szabadon frissíthetők</strong>. Az ilyen műveletet in situ műveletnek nevezzük.</p>

<p>Az <i>in situ</i> egy latin kifejezés, amelynek szó szerinti jelentése <i>helyzetben</i>. A következő utasítás például in situ módosítja az adatokat:</p>


<codep class="syntax-color">list.append(1)
</codep>
<br>

<p><strong>A nem módosítható adatok nem változtathatók meg ilyen módon</strong>.</p>

<p>Képzeljünk el egy listát, amelyen csak két művelet hajtható végre: kezdeti értéket rendelhetünk hozzá és olvasni lehet belőle. Nem tudunk hozzáfűzni elemet, és nem tudunk eltávolítani sem belőle elemet. Ez azt jelenti, hogy egy elem hozzáadása a lista végéhez a lista újbóli létrehozását igényelné a semmiből.</p>

<p>Egy teljesen új listát kell létrehoznia, amely a már meglévő lista összes eleméből és az új elemből áll.</p>

<p>Az adattípus, amelyről most beszélni szeretnénk, a <strong>tuple</strong>. <strong>A tuple egy nem módosítható szekvencia típus</strong>. Úgy viselkedhet, mint egy lista, de in situ nem módosítható.</p>


<br>

</div>





<div class="small-12 large-6 columns">


<h2>Mi az a tuple?</h2>

<p>Az első és legegyértelműbb különbség a lista és a tuple között a létrehozásukhoz használt szintaxis. <strong>A tuple deklarálásához zárójeleket használunk</strong>, míg a listák esetében szögletes zárójeleket, bár az is <strong>lehetséges, hogy egy tuple-t csak vesszővel elválasztott értékekből hozunk létre</strong>.</p>

<p>Nézzük meg az alábbi példát:</p>

<codep class="syntax-color">tuple_1 = (1, 2, 4, 8)
tuple_2 = 1., .5, .25, .125
</codep>

<br>

<p>Két tuple van, mindkettő <strong>négy elemet</strong> tartalmaz.</p>

<p>Írassuk ki őket:</p>

<codep class="syntax-color">tuple_1 = (1, 2, 4, 8)
tuple_2 = 1., .5, .25, .125

print(tuple_1)
print(tuple_2)
</codep>


<br>

<p>Ezt kell látnunk a kimeneti konzolon:</p>

<codep>(1, 2, 4, 8)
(1.0, 0.5, 0.25, 0.125)</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br>

<p>Megjegyzés: <strong>minden egyes tuple elem eltérő típusú lehet</strong> (lebegőpontos, egész szám vagy bármilyen más, még be nem vezetett adattípus).</p>



<h2>Hogyan hozzunk létre egy tuple-t?</h2>

<p>Lehetőség van üres tuple létrehozására, ehhez zárójelek szükségesek:</p>

<codep class="syntax-color">empty_tuple = ()
</codep>
<br>

<p>Ha <strong>egyelemű tuple-t</strong> akarunk létrehozni, akkor szintaktikai okokból vesszőt kell írnunk az érték után, így tudjuk megkülönböztetni a tuple-t egy közönséges változótól:</p>

<codep>one_element_tuple_1 = (1<mark style="background-color:#e6f2ff;">,</mark> )
one_element_tuple_2 = 1.<mark style="background-color:#e6f2ff;">,</mark>

</codep>

<br>


<p>A vesszők eltávolítása semmilyen szintaktikai hibát sem okoz, de helyette két egyszerű változót kapunk, nem pedig két tuple-t.</p>



<br>


</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
