<problem chapter='4' section='1' slide='1' problem='5' title='Függvények vizsgálata'>

<!--
Update history:
2020-08-13 Grzegorz (reviewed, re-formatted)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">


<h1>Hogyan működnek a függvények?</h1>

<p>Nézd meg az alábbi képet:</p>

<center><img src="/uploads/media/default/0001/01/f3a3fa6991f0ecb817a2a09c1aac0b45dba5579a.png" width="90%" alt="Explaining how functions work"></center>

<br>
<br>

<p>Megpróbálja bemutatni az egész folyamatot:</p>

<ul>
<li>amikor <strong>meghívunk</strong> egy függvényt, a Python megjegyzi a helyet, ahol ez történt, és a meghívott függvénybe <i>ugrik</i>;</li>
<li>a függvény teste ezután <strong>végrehajtásra kerül</strong>;</li>
<li>a függvény végének elérése arra készteti a Pythont, hogy <strong>visszatérjen</strong> közvetlenül a hívás helye utáni helyre.</li>
</ul>


<br> 


<p>Van két, nagyon fontos kivétel. Itt az első:</p>

<p><strong>Nem szabad olyan függvényt meghívni, amely a meghívás pillanatában nem ismert!</strong></p>

<p>Ne feledjük, a Python felülről lefelé olvassa a kódot. Nem fog előre nézni, hogy megtalálja azt a függvényt, amit elfelejtettünk a megfelelő helyre tenni ("megfelelő" azt jelenti, hogy "a meghívás előtt").</p>

<p>Beillesztettünk egy hibát ebbe a kódba - látod a különbséget?</p>

<codep style="color:red;">print("We start here.")
<mark style="background-color:#e6f2ff;color:red;">message()</mark>
print("We end here.")


def message():
    print("Enter a value: ")

</codep>

<br>

<p>A függvényt a kód végére helyeztük át. A Python képes vajon megtalálni, amikor a végrehajtás eléri a meghívást?</p>

<p>Nem, nem képes. A következő hibaüzenetet adja:</p>

<codep>NameError: name 'message' is not defined</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>
<br>

<p>Ne próbáld meg rákényszeríteni a Pythont, hogy olyan függvényeket keressen, amelyeket nem a megfelelő helyen definiáltál!</p>

<br>


</div>






<div class="small-12 large-6 columns">

<br>

<p>A második szabály egy kicsit egyszerűbben hangzik:</p>

<p><strong>Nem nevezhetsz egy függvényt és egy változót ugyanazon a néven!</strong>.</p>

<p>A következő kódrészlet hibás:</p>

<codep style="color:red;">def message():
    print("Enter a value: ")

<mark style="background-color:#e6f2ff;color:red;">message = 1</mark>

</codep>

<br>


<p>A message nevű változóhoz értéket rendelve a Python elfelejti korábbi szerepét és a <codel>message</codel> nevű függvény elérhetetlenné válik.</p>

<p>Szerencsére <strong>bárhol használhatod a kódodban a függvényeket</strong>, nem kell az összes függvényt a forrásfájlod elejére tenni.</p>

<p>Nézd meg a kódrészletet:</p>

<codep class="syntax-color">print("We start here.")


def message():
    print("Enter a value: ")

message()

print("We end here.")
</codep>

<br>

<p>Ez furcsának tűnhet, de teljesen helyes és az elvárásoknak megfelelően működik.</p>

<br>

<p>Térjünk vissza az elsődleges példánkhoz, és alkalmazzuk a függvényünket a megfelelő feladatra:</p>

<codep class="syntax-color copy">def message():
    print("Enter a value: ")

message()
a = int(input())
message()
b = int(input())
message()
c = int(input())
</codep>

<br>


<p>A felszólító üzenet módosítása így egyszerű és világos, a <strong>kód egyetlen helyén</strong> - a függvény testén belül - <strong>történő módosítással</strong> tehetjük meg.</p>

<p>Nyisd meg a SandBox felületet és próbáld meg magadtól!</p>

<br>


</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
