<problem chapter='4' section='2' slide='1' problem='6' title='Hogyan kommunikálnak a függvények a környezetükkel?'>

<!--
Update history:
2020-08-13 Grzegorz (reviewed, re-formatted)
-->

<code>
def adding(a, b, c):
    print(a, "+", b, "+", c, "=", a + b + c)

# Call the adding function here.

</code>



<h1>Pozicionális és kulcsszavas argumentumok keverése</h1>

<p>Ha akarjuk, keverhetjük mindkét előbb ismertetett módszert. Egyetlen megszeghetetlen szabály van: a <strong>pozicionális argumentumokat a kulcsszavas argumentumok elé</strong> kell helyeznünk!</p>

<p>Ha egy pillanatra elgondolkodsz rajta, biztosan kitalálod, hogy miért van így.</p>

<p>Hogy megmutassuk, miként működik, a következő egyszerű háromparaméteres függvényt fogjuk használni:</p>

<codep class="syntax-color">def adding(a, b, c):
    print(a, "+", b, "+", c, "=", a + b + c)
</codep>

<br>

<p>Célja, hogy kiszámolja az összes argumentumának összegét.</p>

<p>A függvényt a következő módon hívjuk meg:</p>

<codep class="syntax-color">adding(1, 2, 3)
</codep>


<br>

<p>A kimenete ez lesz:</p>

<codep>1 + 2 + 3 = 6</codep>
<p style="text-align: right;"><font size="-2"><b>kimenet</b></font></p>

<br>

<p>Ez - ahogyan azt te is tudhatod már - a <strong>pozicionális paraméter átadásnak</strong> egy egyszerű példája volt.</p>

<hr>

<p>Természetesen az ilyen meghívást helyettesíthetjük egy tisztán kulcsszavas változattal is, például így:</p>

<codep class="syntax-color">adding(c = 1, a = 2, b = 3)
</codep>

<br>

<p>A programunk egy ilyen sort fog kiadni:</p>

<codep>2 + 3 + 1 = 6</codep>
<p style="text-align: right;"><font size="-2"><b>kimenet</b></font></p>

<br>

<p>Figyeljd meg az értékek sorrendjét!</p>

<hr>

<p>Próbáld meg most a két stílust keverni!</p>

<p>Nézd meg az alábbi függvényhívást:</p>

<codep class="syntax-color">adding(3, c = 1, b = 2)
</codep>

<br>

<p>Elemezzük ki:</p>

<ul>
<li>az <codel>a</codel> paraméter (<codel>3</codel>) argumentuma pozicionális módon kerül átadásra;</li>
<li>a <codel>c</codel> és <codel>b</codel> argumentumok kulcsszóként vannak megadva.</li>
</ul>

<p>Ezt fogjuk látni a kimeneti konzolon:</p>

<codep>3 + 2 + 1 = 6</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<hr>

<p>Legyél figyelmes és kerüld el a hibákat! Ha egy argumentumhoz egynél több értéket próbálsz átadni, futásidejű hibát kapsz.</p>

<p>Nézzük meg az alábbi függvényhívást - úgy tűnik, kétszer próbáltuk az <codel>a</codel> paramétert beállítani:</p>

<codep style="color:red;">adding(<mark style="background-color:#e6f2ff;color:red;">3, a = 1</mark>, b = 2)

</codep>

<br>

<p>A Python válasza:</p>

<codep>TypeError: adding() got multiple values for argument 'a'</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br>

<p>Nézzük meg az alábbi kódrészletet. Egy ilyen kód teljesen szabályos, de nincs sok értelme:</p>

<codep class="syntax-color">adding(4, 3, c = 2)
</codep>

<br>

<p>Minden szabályos, de ha csak egy kulcsszavas paramétert hagyunk benne, az egy kicsit furcsának tűnik - mi a véleményed?</p>


<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
