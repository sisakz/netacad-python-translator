<problem chapter='4' section='5' slide='1' problem='6' title='Függvények | Faktoriális'>

<!--
Update history:
2020-08-18 Grzegorz (reviewed, re-formatted, PEP-8 compliance check)
-->

<code>

</code>



<h1>Egyszerű függvényEK: faktoriális</h1>

<p>A következő függvény, amit most megírunk, a <strong>faktoriális</strong>. Emlékszel, hogyan definiáljuk a faktoriálist?</p>

<p style="font-family:courier new;">0! = 1 (yes! it's true)<br>
1! = 1<br>
2! = 1 * 2<br>
3! = 1 * 2 * 3<br>
4! = 1 * 2 * 3 * 4<br>
:<br>
:<br>
n! = 1 * 2 ** 3 * 4 * ... * n-1 * n</p>


<p><strong>Felkiáltójellel</strong> jelöljük, és eredménye egyenlő az összes természetes szám <strong>szorzatával</strong> egytől a paraméter értékéig.</p>


<p>Írjuk meg a kódunkat! Létrehozunk egy függvényt, és <codel>factorial_function</codel>-nak nevezzük el. Íme a kód:</p>

<codep class="syntax-color copy">def factorial_function(n):
    if n < 0:
        return None
    if n < 2:
        return 1
    
    product = 1
    for i in range(2, n + 1):
        product *= i
    return product


for n in range(1, 6):  # testing
    print(n, factorial_function(n))
</codep>

<br>

<p>Figyeljük meg, hogyan követjük lépésről lépésre a matematikai definíciót, és hogyan használjuk a <codel>for</codel> ciklust a <strong>szorzat eredményének kiszámítására</strong>.</p>

<p>Egy egyszerű teszt eredményeként ezt kaptuk:</p>

<codep>1 1
2 2
3 6
4 24
5 120</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br>


<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
