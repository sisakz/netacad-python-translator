<problem chapter='4' section='4' slide='1' problem='4' title='Hatókörök'>

<!--
Update history:
2020-08-18 Grzegorz (reviewed, re-formatted)
2020-08-27 Grzegorz (function examples and outputs changed)
-->

<code>
def my_function(n):
    print("I got", n)
    n += 1
    print("I have", n)


var = 1
my_function(var)
print(var)

</code>

<h1>Függvény és argumentuminak kapcsolata</h1>

<p>Most nézzük meg, hogyan lép kölcsönhatásba a függvény az argumentumaival!</p>

<p>A szerkesztőben lévő kódból tanulhatunk valamit. Mint látható, a függvény megváltoztatja a paraméterének értékét. Vajon a változás hatással van az argumentumra?</p>

<p>Futtasd a programot és ellenőrizd le!</p>

<p>A kód kimenete a következő:</p>

<codep>I got 1
I have 2
1</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br>

<p>A következtetés nyilvánvaló: a <strong>paraméter értékének megváltoztatása nem terjed ki a függvényen kívülre</strong> (akkor biztosan nem, ha a változó egy skalár, mint a példában).</p>

<p>Ez azt is jelenti, hogy a függvény az <strong>argumentum értékét</strong> kapja meg, nem pedig magát az argumentumot. Ez a skalárok esetében igaz.</p>

<p>Érdemes megnézni, hogyan működik mindez listákkal (emlékszel a listaszeletek hozzárendelésének sajátosságaira a listák egészének hozzárendelésével szemben?).</p>

<hr>

<p>A következő példa megvilágítja a kérdést:</p>

<codep class="syntax-color copy" class="copy">def my_function(my_list_1):
    print("Print #1:", my_list_1)
    print("Print #2:", my_list_2)
    my_list_1 = [0, 1]
    print("Print #3:", my_list_1)
    print("Print #4:", my_list_2)


my_list_2 = [2, 3]
my_function(my_list_2)
print("Print #5:", my_list_2)
</codep>

<br>


<p>A kód kimenete a következő:</p>

<codep>Print #1: [2, 3]
Print #2: [2, 3]
Print #3: [0, 1]
Print #4: [2, 3]
Print #5: [2, 3]
</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>


<p>Úgy tűnik, hogy az előbbi szabály még mindig működik.</p>

<hr>

<p>Végül, figyeld meg a módosítást az alábbi példában:</p>

<codep class="copy syntax-color">def my_function(my_list_1):
    print("Print #1:", my_list_1)
    print("Print #2:", my_list_2)
    del my_list_1[0]  # Pay attention to this line.
    print("Print #3:", my_list_1)
    print("Print #4:", my_list_2)


my_list_2 = [2, 3]
my_function(my_list_2)
print("Print #5:", my_list_2)
</codep>

<br>

<p>Nem változtattuk meg a <codel>my_list_1</codep> paraméter értékét (már tudjuk, hogy ez nem befolyásolja magát az argumentumot), hanem az általa azonosított listát módosítottuk.</p>

<p>A kimenet meglepő lehet. Futtasd a kódot és ellenőrizd!</p>

<codep>Print #1: [2, 3]
Print #2: [2, 3]
Print #3: [3]
Print #4: [3]
Print #5: [3]
</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br>

<p>Meg tudod magyarázni?</p>

<p>Próbáljuk meg:</p>

<ul>
<li>ha az argumentum egy lista, akkor a megfelelő paraméter értékének megváltoztatása nem érinti a listát (ne feledjük: a listákat tartalmazó változók másképp kerülnek tárolásra, mint a skalárok);</li>

<li>de ha megváltoztatod a paraméter által azonosított listát (a listát, nem a paramétert!), a lista tükrözi a változást.</li>
</ul>

<p>Itt az ideje, hogy írjunk néhány példafüggvényt! Ezt a következő szakaszban megtesszük.</p>

<br>


<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
