<problem chapter='4' section='3' slide='1' problem='4' title='Függvény visszatérési értéke'>

<!--
Update history:
2020-08-14 Grzegorz (reviewed, re-formatted)
-->

<code>
def list_sum(lst):
    s = 0
    
    for elem in lst:
        s += elem
    
    return s

</code>



<h1>Hatások és eredmények: listák és függvények</h1>


<p>Két további kérdésre kell még választ adnunk.</p>


<p>Az első: <strong>Lehet-e egy listát argumentumként átadni egy függvénynek?</strong></p>


<p>Persze, hogy lehet! Bármilyen, a Python által ismert entitás játszhatja a függvény argumentumának szerepét, csak biztosítani kell, hogy a függvény képes legyen megbirkózni vele.</p>


<p>Ha tehát egy listát adunk át egy függvénynek, magának a függvénynek listaként kell kezelnie azt.</p>


<p>Egy olyan függvény, mint például ez itt:</p>

<codep class="syntax-color">def list_sum(lst):
    s = 0
    
    for elem in lst:
        s += elem
    
    return s
</codep>

<br>

<p>és amit így hívunk meg:</p>

<codep class="syntax-color">print(list_sum([5, 4, 3]))
</codep>
<br>
 

<p>eredményként <codel>12</codel>-t fog visszaadni. Számolnunk kell viszont problémákkal, ha ilyen kockázatos módon hívjuk meg:</p>

<codep style="color:red;">print(list_sum(5))

</codep>
<br>

<p>A Python válasza egyértelmű lesz:</p>

<codep>TypeError: 'int' object is not iterable</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>
<br>
 

<p>Ezt a hibát az okozza, hogy <strong>egyetlen egész értéket nem lehet a <codel>for</codel> ciklusban végig iterálni</strong>.</p>

<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
