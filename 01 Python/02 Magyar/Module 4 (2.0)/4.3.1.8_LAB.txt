<problem chapter='4' section='3' slide='1' problem='8' title="LAB: Saját függvény írása és használata - Az év egy napja">

<!--
Update history:
2020-08-14 Grzegorz (reviewed, re-formatted)
-->


<code>
def is_year_leap(year):
#
# Your code from LAB 4.3.1.6.
#

def days_in_month(year, month):
#
# Your code from LAB 4.3.1.7.
#

def day_of_year(year, month, day):
#
# Write your new code here.
#

print(day_of_year(2000, 12, 31))

</code>

<span class="label" style="background-color:rgb(205, 168, 105);"><strong>LABORGYAKORLAT</strong></span>

<br><br>


<h2>Becsült idő</h2>
<p>20-30 perc</p>


<h2>Nehézségi szint</h2>
<p>Közepes</p>

<h2>Előfeltételek</h2>
<p>LAB 4.3.1.6
<br>
LAB 4.3.1.7</p>


<h2>Célok</h2>

<p>Ismerkedjen meg a tanuló a következőkkel:</p>

<ul>
<li>paraméterezett függvények tervezése és írása;</li>
<li>a <font face="courier new">return</font> utasítás használata;</li>
<li>egy általánosan használható függvénykészlet összeállítása;;</li>
<li> tanuló saját függvényeinek felhasználása.</li>
</ul>


<h2>Feladatleírás</h2>

<p>Feladatod egy olyan függvény írása és tesztelése, amely három argumentumot (év, hónap, a hónap egy napja) vesz fel, és az év megfelelő napját adja vissza, vagy a <codel>None</codel> értéket adja vissza, ha valamelyik paraméter érvénytelen.</p>

<p>Használd a korábban megírt és tesztelt függvényeket! Adj hozzá néhány tesztesetet a kódhoz. A kódban szereplő teszt csak egy példa.</p>




<studyMode>false</studyMode>
<labMode>true</labMode>


<hint>
def is_year_leap(year):
	if year % 4 != 0:
		return False
	elif year % 100 != 0:
		return True
	elif year % 400 != 0:
		return False
	else:
		return True

def days_in_month(year, month):
	if year < 1582 or month < 1 or month > 12:
		return None
	days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
	res  = days[month - 1]
	if month == 2 and is_year_leap(year):
		res = 29
	return res

def day_of_year(year, month, day):
	days = 0
	for m in range(1, month):
		# ...
		# if statement
			# ...
		days += md
	md = days_in_month(year, month)
	if day >= 1 and day <= md:
		# ...
	else:
		# ...

print(day_of_year(2000, 12, 31))

</hint>


<sampleSolution>
def is_year_leap(year):
	if year % 4 != 0:
		return False
	elif year % 100 != 0:
		return True
	elif year % 400 != 0:
		return False
	else:
		return True

def days_in_month(year, month):
	if year < 1582 or month < 1 or month > 12:
		return None
	days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
	res  = days[month - 1]
	if month == 2 and is_year_leap(year):
		res = 29
	return res

def day_of_year(year, month, day):
	days = 0
	for m in range(1, month):
		md = days_in_month(year, m)
		if md == None:
			return None
		days += md
	md = days_in_month(year, month)
	if day >= 1 and day <= md:
		return days + day
	else:
		return None

print(day_of_year(2000, 12, 31))

</sampleSolution>

</problem>