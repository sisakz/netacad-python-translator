<problem chapter='2' section='2' slide='1' problem='3' title='Literálok'>

<!--
Update history:
2019-12-02 Grzegorz (correcting "-11111111" to "11111111", added underscores in numeric literals)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Egész számok</h1>

<p>Talán már tudsz egy keveset arról, hogy a számítógépek hogyan hajtják végre a számolási műveleteket. Talán hallottál már a <strong>bináris rendszerről</strong>, és tudod, hogy a számítógépek ezt a rendszert használják a számok tárolására, és hogy bármilyen műveletet el tudnak végezni rajtuk.</strong>

<p>Nem fogjuk itt a helyiértékes számrendszerek bonyolult tulajdonságait vizsgálni, de annyit elmondhatunk, hogy a modern számítógépek által kezelt számok kétfélék:</p>

<ul>
<li><strong>egész számok</strong>, azaz olyanok, amelyeknek nincs tört részük;</li>
<li><strong>lebegőpontos</strong> számok, amelyek tartalmazzák (vagy képesek tartalmazni) a törtrészt.</li>
</ul>

<p>Ez a meghatározás nem teljesen pontos, de egyelőre elégséges. A megkülönböztetés nagyon fontos, és a két számtípus közötti határvonal nagyon szigorú. A két számtípus jelentősen különbözik abban, ahogyan a számítógép memóriájában tároljuk őket, és a bennük tárolható értékek tartományában is.</p>

<p>A numerikus értéknek azt a jellemzőjét, amely meghatározza a fajtáját, a tartományát és az alkalmazhatóságát, <strong>típusnak</strong> nevezzük.</p>

<p>Ha egy litertált használunk és elhelyezzük a Python kódban, a literál formája határozza meg, hogy a Python milyen reprezentációt (típust) fog használni a <strong>memóriában való tárolásához</strong>.</p>

<p>Egyelőre tegyük félre a lebegőpontos számokat (hamarosan visszatérünk rájuk), és foglalkozzunk azzal a kérdéssel, hogy a Python hogyan ismeri fel az egész számokat.</p>

<br>

</div>

<div class="small-12 large-6 columns">

<h1></h1>

A folyamat majdnem olyan, mintha ceruzával írnád őket a papírra. Egyszerűen csak egy számjegyekből álló számsor, amely a számot alkotja. De van egy megszorítás - a számon belül nem szabad olyan karaktereket beszúrni, amelyek nem számjegyek.</p>

<p>Vegyük például a <i>tizenegymillió-száztizenegyezer-száztizenegy</i> számot. Ha most egy ceruzát vennél a kezedbe, így írnád le a számot: <codel>11,111,111</codel>, vagy így: <codel>11.111.111</codel>, vagy akár így: <codel>11 111 111</codel>.</p>

<p>Nyilvánvaló, hogy ez az írásmód megkönnyíti az olvasást, különösen akkor, ha a szám sok számjegyből áll. A Python azonban nem fogad el ilyeneket. Ez <strong>tilos</strong>! Amit a Python megenged, az az <strong>aláhúzások</strong> használata a numerikus literálokban.*</p>

<p>Ezért ezt a számot így is írhatjuk: <codel>11111111</codel>, vag így: <codel>11_111_111</codel>.</p>

<p><span class="label" style="background-color: orange;"><b>MEGJEGYZÉS</b></span> &nbsp; *A Python 3.6-os verziója vezette be az aláhúzásokat a numerikus literálokban, lehetővé téve az egyszerű aláhúzások elhelyezését az előjelek után és a számjegyek között a jobb olvashatóság érdekében. Ez a funkció a Python régebbi verzióiban nem áll rendelkezésre.</p>

<br>

<p>És hogyan kódoljuk a negatív számokat Pythonban? A szokásos módon egy <strong>mínusz</strong> jel hozzáadásával. Leírhatjuk így: <codel>-11111111</codel>, vagy így: <codel>-11_111_111</codel>.</p>

<p>A pozitív számok előtt nem kell plusz jelet használni, de ha szeretnéd, akkor ez megengedett. A következő sorok ugyanazt a számot írják le: <codel>+11111111</codel> és <codel>11111111</codel>.</p>

<br>

</div>


</div>
</div>

<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
