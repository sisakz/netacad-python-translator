<problem chapter='2' section='3' slide='1' problem='3' title='Operátorok'>

<!--
Update history:
2020-07-17 Grzegorz (reformatted; code - syntax-color and blank lines added;)
-->

<h1>Aritmetikai operátorok: szorzás</h1>


<p>A <codel>*</codel> (csillag) a <strong>szorzás</strong> jele.</p>

<p>Futtasd le az alábbi kódot, és ellenőrizd, hogy az <i>egész vagy lebegőpontos</i> szabályunk még mindig működik-e!<p>

<codep class="syntax-color">print(2 * 3)
print(2 * 3.)
print(2. * 3)
print(2. * 3.)
</codep>


<br>

<h1>Aritmetikai operátorok: osztás</h1>


<p>A <codel>/</codel> (perjel) az <strong>osztás</strong> jele.</p>

<p>A perjel előtti érték az <strong>osztandó</strong>, a perjel mögötti érték pedig az <strong>osztó</strong>.<p>

<p>Futtasd az alábbi kódot, és elemezd az eredményeket!</p>

<codep class="syntax-color">print(6 / 3)
print(6 / 3.)
print(6. / 3)
print(6. / 3.)
</codep>

<br>

<p>Vedd észre, hogy itt az eredmény típusára más szabály érvényes.</p>

<p><strong>Az osztás művelete által adott eredmény mindig lebegőpontos szám</strong>, függetlenül attól, hogy az eredmény első pillantásra lebegőpontosnak, (<codel>1 / 2</codel>), vagy kerek egész számnak tűnik: (<codel>2 / 1</codel>).</p>

<p>Ez probléma? Igen, az. Néha előfordul, hogy valóban olyan osztásra van szükség, amely egész számot ad, nem pedig lebegőpontos számot.</p>

<p>Szerencsére a Python ebben is segít.</p>

<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
