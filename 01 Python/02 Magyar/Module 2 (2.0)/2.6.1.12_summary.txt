<problem chapter='2' section='6' slide='1' problem='12' title='SZAKASZ ÖSSZEFOGLALÁS'>

<!--
Update history:
2020-07-17 Grzegorz (reviewed; code - blank lines and the syntax-color class added; variable names changed)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>A legfontosabb tudnivalók</h1>

<br>


<p>1. Az <codel>print()</codel> függvény <strong>adatokat küld a konzolra</strong>, míg az <codel>input()</codel> függvény <strong>adatokat olvas a konzolról</strong>.</p>

<p>2. Az <codel>input()</codel> függvénynek van egy opcionális paramétere: <strong>a a megadandó adatra utaló kérdés vagy felszólítás</strong>, ami lehetővé teszi, hogy a felhasználói adatbevitel előtt üzenetet írjunk a konzolra, pl.:</p>

<codep>name = input(<mark style="background-color:#e6f2ff;">"Enter your name: "</mark>)
print("Hello, " + name + ". Nice to meet you!")

</codep>
<br>

<p>3. Az <codel>input()</codel> függvény meghívásakor a program futása megáll, a prompt szimbólum villog (a konzol beviteli módba kapcsolásakor a felhasználót cselekvésre szólítja fel), amíg a felhasználó be nem gépel valamit és/vagy meg nem nyomja az <i>Enter</i> billentyűt.</p>

<p><strong><span style="background-color:orange;" class="label">MEGJEGYZÉS</span></strong></p>
<p>Az <codel>input()</codel> függvény működését minden korlátozás nélkül tesztelheted helyben, a gépeden. Erőforrás-optimalizálási okokból azonban a program maximális végrehajtási idejét az Edube-ban néhány másodpercre korlátoztuk. Menj a Sandboxba, másold be a fenti részletet, futtasd a programot, és ne csinálj semmit! Csak várj néhány másodpercet, hogy lásd, mi történik. A programodnak néhány pillanat múlva automatikusan le kell állnia. Most nyisd meg az IDLE-t, és futtasd ott ugyanezt a programot! Látod a különbséget?</p>

<p>Tipp: az <codel>input()</codel> függvény fent említett funkciója használható arra, hogy a felhasználót a program befejezésére kérje. Nézd meg az alábbi kódot:</p>

<codep class="syntax-color">name = input("Enter your name: ")
print("Hello, " + name + ". Nice to meet you!")

print("\nPress Enter to end the program.")
input()
print("THE END.")
</codep>

<br>

<p>4. Az <codel>input()</codel> függvény eredménye egy karakterlánc. A karakterláncokat a konkatenációs (<codel>+</codel>) operátorral lehet egymáshoz hozzáadni. Nézd meg ezt a kódot:</p>

<codep class="syntax-color">num_1 = input("Enter the first number: ") # Enter 12
num_2 = input("Enter the second number: ") # Enter 21

print(num_1 + num_2) # the program returns 1221
</codep>
<br>

<p>5. A <codel>*</codel> (sokszorozás) operátor használatával karakterláncokat lehet többszörözni, pl:</p>

<codep class="syntax-color">my_input = input("Enter something: ") # Example input: hello
print(my_input * 3) # Expected output: hellohellohello
</codep>
<br>


<br>
<br>

</div>




<div class="small-12 large-6 columns">

<br>


<p><strong>1. gyakorlat</strong></p>
<p>Mi a kimenete a következő részletnek?</p>

<codep class="syntax-color">x = int(input("Enter a number: ")) # The user enters 2
print(x * "5")
</codep>

<br>

<button class="button tiny" onclick="solution('sol')">Ellenőrzés</button>

<p id="sol" style="display: none;">
<codep>55</codep>
</p>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>

<br>



<p><strong>2. gyakorlat</strong></p>
<p>Mi a várható kimenete a következő részletnek?</p>

<codep class="syntax-color">x = input("Enter a number: ") # The user enters 2
print(type(x))
</codep>

<br>


<button class="button tiny" onclick="solution('sol2')">Ellenőrzés</button>

<p id="sol2" style="display: none;">
<codep>&lt;class 'str'&gt;</codep>
</p>


<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>

<br>






<br>

</div>

</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
