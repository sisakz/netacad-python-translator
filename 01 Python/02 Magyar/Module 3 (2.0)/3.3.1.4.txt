<problem chapter='3' section='3' slide='1' problem='4' title='Logikai és bitszintű műveletek | Bitwise operátorok'>

<!--
Update history:
2020-07-21 Grzegorz (reviewed, reformatted)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">


<h1>Hogyan kezeljük az egyes biteket?</h1>

<p>Most megmutatjuk, hogy mire használhatod a bitwise operátorokat. Képzeld el, hogy egy fejlesztő vagy, akinek egy operációs rendszer fontos részét kell megírnia. Azt mondták neked, hogy egy változót használhatsz, amelyhez a következőképpen van érték megadva:</p>

<codep>flag_register = 0x1234

</codep>

<br>

<p>A változó a rendszer működésének különböző aspektusaira vonatkozó információkat tárolja. <strong>A változó minden egyes bitje egy-egy igen/nem értéket tárol</strong>. Azt is elmondták, hogy ezek közül a bitek közül csak egy a tiéd - a harmadik (ne feledd, hogy a biteket nullától számozzák, és a nullás számú bit a legalacsonyabb, míg a legmagasabb a 31-es számú). A többi bit nem változhat, mert más adatok tárolására szolgálnak. Itt van a te bited <codel>x</codel> betűvel jelölve:</p>

<codep>flag_register = 0000000000000000000000000000<mark style="background-color:#e6f2ff;">x</mark>000

</codep>

<br>


<p>A következő feladatokkal szembesülhetsz:</p>

<p>1. <strong>A bit állapotának ellenőrzése</strong>  - Szeretnéd megtudni a bit értékét. Az egész változó nullával való összehasonlítása nem megoldás, mert a maradék bitek teljesen kiszámíthatatlan értékeket vehetnek fel. Használhatod viszont a következő konjunkciós tulajdonságot:</p>

<codep class="syntax-color">x & 1 = x
x & 0 = 0
</codep>

<br>


<P>Ha a <codel>flag_register</codel> változóra az <codel>&</codel> műveletet alkalmazod a következő bithalmazkép mellett:</p>


<codep>0000000000000000000000000000<mark style="background-color:#e6f2ff;">1</mark>000</codep>

<br>


<p>(figyeljük meg az <codel>1</codel>-est a bited pozíciójánál), akkor a következő bitsorozatok egyikét kapod:</p>

<ul>
<li><codel>0000000000000000000000000000<mark style="background-color:#e6f2ff;">1</mark>000</codel>, ha a bited <codel>1</codel>-re volt állítva,</li>
<li><codel>0000000000000000000000000000<mark style="background-color:#e6f2ff;">0</mark>000</codel>, ha a bited <codel>0</codel>-ra lett visszaállítva.</li>
</ul>

<p>Az ilyen nullák és egyesek sorozatát, amelynek feladata az érték megragadása vagy a kiválasztott bitek megváltoztatása, <strong>bitmaszknak</strong> nevezzük.</p>

<p>Építsünk egy bitmaszkot a bit állapotának érzékelésére. Ennek a <strong>harmadik bitre</strong> kell mutatnia. Ennek a bitnek a súlya <codel>2<sup>3</sup> = 8</codel>. A megfelelő maszkot a következő deklarációval hozhatjuk létre:</p>

<codep class="syntax-color">the_mask = 8
</codep>

<br>


</div>


<div class="small-12 large-6 columns">

<br>

<p>Készíthetsz egy utasítás sorozatot az i bited állapotától függően is:</p>

<codep class="syntax-color">if flag_register & the_mask:
    # My bit is set.
else:
    # My bit is reset.
</codep>

<br>

<p>2. <strong>A bited nullára állítása</strong> - A bitedhez nullát szeretnél rendelni, miközben az összes többi bitnek változatlanul kell maradnia. Használd ugyanazt a tulajdonságot a konjunkcióra, mint korábban, de használj egy kicsit más maszkot, pontosan az alábbit:</p>

<codep>1111111111111111111111111111<mark style="background-color:#e6f2ff;">0</mark>111

</codep>

<br>

<p>Vegyük észre, hogy a <codel>the_mask</codel> változó összes bitjének negálásával jött létre a maszk. A bit visszaállítása egyszerű, és így néz ki (válaszd ki a neked jobban tetszőt):</p>

<codep class="syntax-color">flag_register = flag_register & ~the_mask
flag_register &= ~the_mask

</codep>

<br>

<p>3. <strong>A bited beállítása</strong> ‒ A bitedhez <codel>1</codel>-et szeretnél rendelni, míg a többi bitnek változatlanul kell maradnia. Használd a következő diszjunkciós tulajdonságot:</p>

<codep class="syntax-color">x | 1 = 1
x | 0 = x
</codep>

<br>

<p>Most már készen állsz a bit beállítására az alábbi utasítások valamelyikével:</p>

<codep class="syntax-color">flag_register = flag_register | the_mask
flag_register |= the_mask
</codep>

<br>

<p>4. <strong>A bited negálása</strong> ‒ Az <codel>1</codel>-et <codel>0</codel>-ra, a <codel>0</codel>-t <codel>1</codel>-re szeretnéd cserélni. Ehhez az <codel>xor</codel> operátor egy érdekes tulajdonságát használhatod fel:</p>

<codep class="syntax-color">x ^ 1 = ~x
x ^ 0 = x
</codep>

<br>

<p>és negáld a bitet a következő utasításokkal:</p>

<codep class="syntax-color">flag_register = flag_register ^ the_mask
flag_register ^= the_mask
</codep>


<br>




</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
