<problem chapter='3' section='1' slide='1' problem='9' title='Döntéshozatal Pythonban'>

<!--
Update history:
2020-07-20 Grzegorz (reviewed)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Pszeudokód és bevezetés a ciklusokba</h1>


<p>Most már képesnek kell lenned arra, hogy olyan programot írj, amely négy, öt, hat vagy akár tíz szám közül a legnagyobbat találja meg.</p>

<p>Már ismered a sémát, így a probléma kiterjesztése nem lesz különösebben bonyolult.</p>

<p>De mi történik, ha arra kérünk, hogy írj egy olyan programot, amely kétszáz szám közül a legnagyobbat találja meg? El tudod képzelni a kódot?</p>

<p>Kétszáz változóra lesz szükséged. Ha kétszáz változó nem elég elrettentő, próbáld meg elképzelni, hogy egymillió szám közül a legnagyobbat keresed.</p>

<p>Képzelj el egy kódot, amely 199 feltételes utasítást és az <codel>input()</codel> függvény kétszáz meghívását tartalmazza. Szerencsére ezzel nem kell foglalkoznod. Van egy egyszerűbb megközelítés.<p>

<br>

<p><img src="/uploads/media/default/0001/01/2ee8e913548e001a020dccc115eb0d108412820c.png" alt="The concept of numbers" align="middle" width="80%"></p>

<br>

<p>Egyelőre figyelmen kívül hagyjuk a Python szintaxis követelményeit, és megpróbáljuk elemezni a problémát anélkül, hogy a valódi programozásra gondolnánk. Más szóval, megpróbáljuk megírni az <strong>algoritmust</strong>, és ha elégedettek vagyunk vele, akkor implementáljuk.</p>

<p>Ebben az esetben egy olyan jelölést fogunk használni, amely nem egy valódi programozási nyelv (nem fordítható és nem futtatható), de formalizált, tömör és olvasható. Ezt <strong>pszeudokódnak</strong> nevezzük.</p>

<p>Nézzük meg az alábbi pszeudokódunkat:</p>

<codep class="line-numbers syntax-color">largest_number = -999999999
number = int(input())
if number == -1:
    print(largest_number)
    exit()
if number > largest_number:
    largest_number = number
# Go to line 02
</codep>

<br>

<p>Mi történik benne?<p>

<p>Először is egyszerűsíthetjük a programot, ha a kód legelején a <codel>largest_number</codel> változóhoz olyan értéket rendelünk, amely kisebb lesz, mint bármelyik beírt szám. Erre a célra a <codel>-999999999</codel>-et fogjuk használni.</p>

<p>Másodszor, feltételezzük, hogy az algoritmusunk nem tudja előre, hogy hány számot fog a program kapni. Arra számítunk, hogy a felhasználó annyi számot fog megadni, amennyit csak akar. Az algoritmus száz vagy ezer számmal is jól fog működni. Hogyan csináljuk ezt?</p>



<br>

</div>





<div class="small-12 large-6 columns">

<br>

<p>Megállapodást kötünk a felhasználóval: ha a <codel>-1</codel> értéket írjuk be, az annak a jele, hogy nincs több adat, és a programnak be kell fejeznie a munkáját.<p>

<p>Ellenkező esetben, ha a beírt érték nem egyenlő <codel>-1</codel>-gyel, a program egy másik számot olvas be, és így tovább.</p>

<p>A trükk azon a feltételezésen alapul, hogy a kód bármely része többször is elvégezhető. Pontosan annyiszor, ahányszor csak szükséges.</p>

<p>A kód egy bizonyos részének többszöri végrehajtását <strong>ciklusnak</strong> nevezzük. Ennek a kifejezésnek a jelentése valószínűleg nyilvánvaló számodra.</p>


<p>A <codel>02</codel> és <codel>08</codel> közötti sorok egy ciklust alkotnak. <strong>Annyiszor megyünk rajtuk végig, ahányszor csak szükséges</strong>, hogy az összes beírt értéket átnézzük.</p>

<p>Lehet hasonló struktúrát használni egy Python nyelven írt programban? Igen, lehet.</p>

<br>

<p><span class="label" style="background-color:orange;"><b>Extra információ</b></span></p>

<p>A Python gyakran több beépített függvényt is tartalmaz, amelyek elvégzik a munkát helyetted. Például a legnagyobb szám megkereséséhez használhatod a Python beépített <codel>max()</codel> függvényét. Ezt több argumentummal is használhatod. Elemezd az alábbi kódot:</p>

<codep class="copy syntax-color"># Read three numbers.
number1 = int(input("Enter the first number: "))
number2 = int(input("Enter the second number: "))
number3 = int(input("Enter the third number: "))

# Check which one of the numbers is the greatest
# and pass it to the largest_number variable.

largest_number = max(number1, number2, number3)

# Print the result.
print("The largest number is:", largest_number)
</codep>

<br>

<p>Ugyanígy a <codel>min()</codel> függvényt is használhatod a legalacsonyabb szám visszaadására. A fenti kódot újraépítheted és kísérletezhetsz vele a Sandboxban.</p>

<p>Ezekről (és sok más funkcióról) hamarosan beszélni fogunk. Egyelőre a hangsúlyt az elágazásokra és a ciklusokra helyezzük, hogy nagyobb magabiztosságot szerezz a programozásban, és megtanítsuk neked azokat a készségeket, amelyek segítségével teljes mértékben megértheted és alkalmazhatod a két fogalmat a kódodban. Egyelőre tehát nem rövidítünk semmit.<p>


</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
