<problem chapter='3' section='1' slide='1' problem='5' title='Döntéshozatal Pythonban'>

<!--
Update history:
2020-07-20 Grzegorz (reviewed)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Feltételek és feltételes végrehajtás</h1>


<p>Már tudod, hogyan kell Python-kérdéseket feltenni, de még mindig nem tudod, hogyan használd fel a válaszokat. Szükséged van egy olyan mechanizmusra, amely lehetővé teszi, hogy <strong>tegyél valamit, ha egy feltétel teljesül, és ne tedd meg, ha nem</strong>.</p>

<p>Csakúgy, mint a való életben: attól függően, hogy egy adott feltétel teljesül vagy sem, bizonyos dolgokat megteszel vagy éppenséggel nem, pl.: elmész sétálni, ha jó az idő, vagy otthon maradsz, ha nedves és hideg van.</p>

<p>Az ilyen döntések meghozatalához a Python egy speciális utasítást kínál. Természetéből és alkalmazásából adódóan <strong>feltételes utasításnak</strong> nevezik.</p>

<p>Ennek több változata is létezik. A legegyszerűbbel kezdjük, és lassan haladunk a nehezebbek felé.</p>

<p>A feltételes kijelentés első formája, amelyet alább láthatsz, nagyon informálisan, de képletesen van leírva:</p>

<codep><mark style="background-color:#e6f2ff;">if</mark> true_or_not:
    do_this_if_true

</codep>

<br>

<p>Ez a feltételes állítás a következő, szigorúan szükséges elemekből áll, kizárólag ebben a sorrendben:</p>

<ul>
<li>az <codel>if</codel> kulcsszó;</li>

<li>egy vagy több szóköz;</li>

<li>egy olyan kifejezés (kérdés vagy válasz), amelynek értékét kizárólag a <codel>True</codel> (amikor az értéke nem nulla) és <codel>False</codel> (amikor nulla) kifejezésekkel értelmezzük;</li>

<li>egy <strong>kettőspont</strong>, amelyet egy új sor követ;</li>

<li>egy <strong>behúzott</strong> utasítás vagy utasításkészlet (legalább egy utasítás feltétlenül szükséges). A <strong>behúzás</strong> kétféleképpen valósítható meg: egy adott számú szóköz beillesztésével (az ajánlás szerint <strong>négy szóköznyi behúzást</strong>) kell használni), vagy a <i>tabulátor</i> karakter használatával. Megjegyzés: ha a behúzott részben egynél több utasítás van, a behúzásnak minden sorban azonosnak kell lennie. Még ha ugyanúgy is néz ki, ha szóközökkel kevert tabulátorokat használunk, fontos, hogy minden behúzás <strong>pontosan ugyanolyan legyen</strong> – a Python 3 <strong>nem engedi a szóközök és tabulátorok keverését</strong> a behúzáshoz.</li>

</ul>

<br>



</div>





<div class="small-12 large-6 columns">


<br>

<p>Hogyan működik ez az utasítás?</p>

<ul>
<li>ha a <codel>true_or_not</codel> kifejezés <strong>igaz</strong> (azaz értéke nem egyenlő nullával), akkor a <strong>behúzott utasítás(ok) végrehajtásra kerül(nek)</strong>;</li>

<li>ha a <coodel>true_or_not</codel> kifejezés <strong>nem igaz</strong> (vagyis az értéke nulla), akkor a <strong>behúzott utasítás(ok) végrehajtása nem történi meg</strong> (figyelmen kívül lesz hagyva), és a következő végrehajtott utasítás az eredeti behúzási szint utáni utasítás lesz.</li>
</ul>

<br>

<p>A való életben gyakran fejezünk ki vágyakat:</p>

<p><i>Ha jó idő lesz, elmegyünk sétálni,</p>

<p>aztán ebédelünk.</i></p>

<br>

 

<p>Amint látod, az ebéd <strong>nem egy feltételes tevékenység</strong>, és nem függ az időjárástól.</p>

<p>Ha tudjuk, hogy milyen feltételek befolyásolják a viselkedésünket, és feltételezzük, hogy rendelkezünk a paraméter nélküli <codel>go_for_a_walk()</codel> és <codel>have_lunch()</codel>függvényekkel, akkor megírhatjuk a fenti mondatoknak megfelelő kódrészletünket:</p>

<codep>if the_weather_is_good:
    go_for_a_walk()
have_lunch()

</codep>

<br>

</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
