<problem chapter='3' section='3' slide='1' problem='3' title='Logikai és bitszintű műveletek'>

<!--
Update history:
2020-07-21 Grzegorz (reviewed, reformatted)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">


<h1>Logikai vs. bitszintű műveletek: folytatás</h1>


<p>Most mutatunk egy példát a logikai és a bitszintű műveletek közötti különbségre. Tegyük fel, hogy a következő értékadásokat hajtottuk végre:</p>

<codep class="syntax-color">i = 15
j = 22
</codep>

<br>

<p>Ha feltételezzük, hogy az egész számok 32 bitesek, akkor a két változó bitenkénti képe a következő lesz:</p>

<codep>i: 00000000000000000000000000001111
j: 00000000000000000000000000010110</codep>


<br>


<p>A hozzárendelés adott:</p>

<codep class="syntax-color">log = i and j
</codep>

<br>

<p>Itt egy logikai konjunkcióval van dolgunk. Kövessük nyomon a számítások menetét. A két változó, az <codel>i</codel> és a <codel>j</codel> nem nulla, tehát úgy tekintjük, hogy <codel>True</codel>. Az <codel>and</codel> operátor igazságtáblázatát megnézve láthatjuk, hogy az eredmény is <codel>True</codel> lesz. Más műveletet nem végzünk.</p>

<codep>log: True</codep>

<br>

<p>Most a bitenkénti művelet:</p>

<codep class="syntax-color">bit = i & j
</codep>

<br>

<p>A <codel>&amp;</codel> operátor a megfelelő bitek minden egyes párjával külön-külön dolgozik, és az eredmény megfelelő bitjeinek értékeit adja ki. Az eredmény tehát a következő lesz:</p>

<table width="90%">

<tr>
<td><codel>i</codel></td>
<td><codel>000000000000000000000000000<mark style="background-color:#e6f2ff;">01111</mark></codel></td>
</tr>

<tr>
<td><codel>j</codel></td>
<td><codel>000000000000000000000000000<mark style="background-color:#e6f2ff;">10110</mark></codel></td>
</tr>

<tr>
<td><codel>bit = i &amp; j</codel></td>
<td><codel>000000000000000000000000000<mark style="background-color:#e6f2ff;">00110</mark></codel></td>
</tr>

</table>

<p>Ezek a bitek a hatos egész szám értéknek felelnek meg.</p>

<br>


</div>





<div class="small-12 large-6 columns">

<br>


<p>Most nézzük meg a negációs operátorokat. Először a logikait:</p>

<codep class="syntax-color">logneg = not i
</codep>

<br>


<p>A <codel>logneg</codel> változót <codel>False</codel> értékre állítjuk – nincs több teendőnk.</p>



<p>A bitwise negáció így néz ki:</p>

<codep class="syntax-color">bitneg = ~i
</codep>

<br>

<p>Kicsit meglepő lehet, hogy a <codel>bitneg</codel> változó értéke <codel>-16</codel>. Ez furcsának tűnhet, de egyáltalán nem az. Ha többet szeretnél megtudni erről, érdemes megnézni a bináris számrendszert és a kettes komplemens képzésére vonatkozó szabályokat.</p>

<table width="90%">

<tr>
<td><codel>i</codel></td>
<td><codel>0000000000000000000000000000<mark style="background-color:#e6f2ff;">1111</mark></codel></td>
</tr>

<tr>
<td><codel>bitneg = ~i</codel></td>
<td><codel>1111111111111111111111111111<mark style="background-color:#e6f2ff;">0000</mark></codel></td>
</tr>

</table>


<hr>

<p>Mindegyik két argumentumos operátor használható <strong>rövidített formában</strong> is. Ezek az egyenértékű jelöléseik:</p>

<table width="45%">

<tr>
<td><codel>x = x &amp; y</codel></td>
<td><codel>x <mark style="background-color:#e6f2ff;">&amp;=</mark> y</codel></td>
</tr>

<tr>
<td><codel>x = x | y</codel></td>
<td><codel>x <mark style="background-color:#e6f2ff;">|=</mark> y</codel></td>
</tr>

<tr>
<td><codel>x = x ^ y</codel></td>
<td><codel>x <mark style="background-color:#e6f2ff;">^=</mark> y</codel></td>
</tr>

</table>

<br>

</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
