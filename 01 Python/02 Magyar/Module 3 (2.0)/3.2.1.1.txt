<problem chapter='3' section='2' slide='1' problem='1' title='Ciklusok | while'>

<!--
Update history:
2020-07-20 Grzegorz (reviewed)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Ciklusok kódolása <font face="Courier New">while</font> segítségével</h1>

<p>Egyetértesz az alábbi állítással?</p>

<codep>while there is something to do
    do it

</codep>

<br>

<p>Vegyük észre, hogy ez azt is kijelenti, hogy ha nincs mit tenni, akkor egyáltalán semmi sem fog történni.</p>

<p>Általánosságban, a Pythonban egy ciklus a következőképpen ábrázolható:</p>

<codep><mark style="background-color:#e6f2ff;">while</mark> conditional_expression:
    instruction

</codep>

<br>


<p>Ha észreveszel némi hasonlóságot az <i>if</i> utasítással, az teljesen rendben van. Valójában az egyetlen szintaktikai különbség, hogy a <codel>while</codel> szót használjuk az <codel>if</codel> helyett.</p>

<p>A szemantikai különbség sokkal fontosabb: ha a feltétel teljesül, akkor az <i>if</i> <strong>csak egyszer</strong> hajtja végre az utasításokat, míg a <i>while</i> <strong>addig ismétli a végrehajtást, amíg a feltétel <codel>True</codel> lesz</strong>.</p>

<p>Megjegyzés: a <strong>behúzásra</strong> vonatkozó összes szabály itt is érvényes. Ezt hamarosan megmutatjuk.</p>

<hr>

<p>Nézd meg az alábbi algoritmust:</p>

<codep>while conditional_expression:
    instruction_one
    instruction_two
    instruction_three
    :
    :
    instruction_n

</codep>


<br>

<p>Néhány fontos dolog, amit tudnod kell:</p>

<ul>

<li><strong>ha egy <codel>while</codel> cikluson belül egynél több utasítást</strong> akarunk végrehajtani, akkor (az <codel>if</codel>-hez hasonlóan) minden utasítást ugyanúgy kell <strong>behúznunk</strong>;</li>

<li>a <codel>while</codel> cikluson belül végrehajtott utasítást vagy utasításkészletet a <strong>ciklus törzsének</strong> nevezzük;</li>

<li>ha a feltétel már az első kiértékeléskor <codel>False</codel> (egyenlő nullával), akkor a ciklus törzse egyszer sem hajtódik végre (figyeljük meg az analógiát, hogy nem kell semmit sem tenni, ha nincs mit tenni);</li>

<li>a ciklus törzsének képesnek kell lennie arra, hogy megváltoztassa a feltétel értékét, mert ha a feltétel az elején <codel>True</codel>, akkor a törzs folyamatosan futhat a végtelenségig. (Vegyük észre, hogy egy dolog elvégzése általában csökkenti a tennivalók számát).</li>

<ul>

<br>


</div>





<div class="small-12 large-6 columns">

<h2>Végtelen ciklus</h2>

<p>A végtelen ciklus, más néven <strong>vég nélküli ciklus</strong>, olyan utasítássorozat egy programban, amely a végtelenségig ismétlődik (a végtelenségig ciklikus).</p>

<p>Íme egy példa egy olyan ciklusra, amely nem képes befejezni a végrehajtását:</p>

<codep class="syntax-color">while True:
    print("I'm stuck inside a loop.")
</codep>

<br>

<p>Ez a ciklus a végtelenségig kiírja a képernyőre, hogy <codel>"I'm stuck inside a loop."</codel></p>

<p><span class="label" style="background-color:orange;"><b>MEGJEGYZÉS</b></span></p>

<p>Ha szeretnéd jobban megismerni, hogyan viselkedik egy végtelen ciklus, indítsd el az IDLE-t, hozz létre egy Új fájlt, másold be a fenti kódot, mentsd el a fájlt, és futtasd le a programot! Amit látni fogsz, az a Python konzol ablakába kiírt <codel>"I'm stuck inside a loop."</codel> karakterláncok véget nem érő sorozata. A program befejezéséhez csak nyomd le a <i>Ctrl-C</i> (vagy egyes számítógépeken a <i>Ctrl-Break</i>) billentyűtkombinációt. Ez egy úgynevezett <codel style="color:red;">KeyboardInterrupt</codel> kivételt fog eredményezni, és a programod kilép a ciklusból. Erről a tanfolyam későbbi részében még beszélünk.</p>

<hr>

<p>Térjünk vissza az algoritmus vázlatához, amelyet nemrég mutattunk. Nézzük meg, hogyan használhatjuk ezt az újonnan megtanult ciklust arra, hogy egy nagyszámú beírt adathalmazból megtaláljuk a legnagyobb számot.<p>

<p>Alaposan elemezd ki a programot! Nézd meg, hol kezdődik a ciklus (8. sor). Keresd meg a ciklus törzsét, és találd meg, <strong>hogyan lép ki a törzsből</strong>:</p>

<codep class="copy line-numbers syntax-color"># Store the current largest number here.
largest_number = -999999999

# Input the first value.
number = int(input("Enter a number or type -1 to stop: "))

# If the number is not equal to -1, continue.
while number != -1:
    # Is number larger than largest_number?
    if number > largest_number:
        # Yes, update largest_number.
        largest_number = number
    # Input the next number.
    number = int(input("Enter a number or type -1 to stop: "))

# Print the largest number.
print("The largest number is:", largest_number)
</codep>

<br>
    

<p>Nézd meg, hogyan valósítja meg ez a kód a korábban bemutatott algoritmust.</p>


<br>

</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
