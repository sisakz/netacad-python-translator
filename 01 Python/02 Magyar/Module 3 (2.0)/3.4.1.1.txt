<problem chapter='3' section='4' slide='1' problem='1' title='Listák'>

<!--
Update history:
2020-07-21 Grzegorz (reviewed)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">


<h1>Miért van szükségünk listákra?</h1>

<p>Előfordulhat, hogy több tucat, esetleg több száz, esetleg több ezer számot kell beolvasnod, tárolnod, feldolgoznod és végül kiíratnod. Ilyenkor mi lesz? Minden egyes értékhez külön változót kell létrehozni? Hosszú órákat kell majd az alábbihoz hasonló utasítások írásával töltened?</p>

<codep>var1 = int(input())
var2 = int(input())
var3 = int(input())
var4 = int(input())
var5 = int(input())
var6 = int(input())
:
:

</codep>

<br>

<p>Ha úgy gondolod, hogy ez nem egy bonyolult feladat, akkor fogj egy darab papírt, és írj egy programot, amely:</p>

<ul>
<li>öt számot beolvas;</li>
<li>a legkisebbtől a legnagyobbig rendezett sorrendben kiírja őket (ezt a fajta feldolgozást nevezzük <strong>rendezésnek</strong>).</li>
</ul>

<p>Valószínűleg arra a következtetésre jutnál, hogy nincs elegendő mennyíségű papírod a feladat elvégzéséhez.</p>


<p>Eddig megtanultad, hogyan kell olyan változókat létrehoznod (deklarálnod), amelyek egyszerre pontosan egy adott értéket képesek tárolni. Az ilyen változókat a matematika analógiájára néha <strong>skalároknak</strong> nevezik. Az összes eddig használt változó valójában skalár.</p>

<p>Gondolj bele, milyen kényelmes lenne egy olyan változót deklarálni, amely <strong>egynél több értéket képes tárolni</strong>. Például százat, vagy ezret, vagy akár tízezret. Ez még mindig egy és ugyanaz a változó lenne, de nagyon széles és tágas. Jól hangzik? Talán, de hogyan kezelnél egy ilyen, különböző értékekkel teli tárolót? Hogyan választanád ki éppen azt az egyet, amire szükséged van?</p>


</div>


<div class="small-12 large-6 columns">

<br>

<p>Mi lenne, ha egyszerűen megszámozhatnád őket? És aztán azt mondanád: <i>add meg a 2-es értékét; rendeld hozzá 15-ös értékét; növeld meg a 10000-es értékét.</i>.</p>

<p>Megmutatjuk, hogyan lehet ilyen <strong>többértékű változókat</strong> létrehozni. Ezt az imént javasolt példán keresztül fogjuk megtenni. Írunk egy <strong>programot, amely egy számsorozatot rendez</strong>. Nem leszünk különösebben nagyra vágyóak – feltételezzük, hogy pontosan öt szám van.</p>

<p>Hozzunk létre egy <codel>numbers</codel> nevű változót, amihez nemcsak egy számot rendelünk, hanem egy öt értékből álló listát (figyelem: <strong>a lista egy nyitott szögletes zárójellel kezdődik és egy zárt szögletes zárójellel végződik</strong>. A zárójelek közötti helyet öt, vesszővel elválasztott számmal töltjük ki).</p>

<codep>numbers = <mark style="background-color:#e6f2ff;">[</mark>10, 5, 7, 2, 1<mark style="background-color:#e6f2ff;">]</mark>

</codep>

<br>

<p>A megfelelő terminológiával ez így hangzik: a <strong><codel>numbers</codel> egy lista, amely öt értékből áll, amelyek mindegyike szám</strong>. Azt is mondhatjuk, hogy ez az utasítás egy ötös hosszúságú listát hoz létre (mivel öt elem van benne).</p>

<p>A listán belüli elemek <strong>különböző típusúak lehetnek</strong>. Egyesek közülük lehetnek egész számok, mások lebegőpontos számok, megint mások pedig listák.</p>

<p>A Python elfogadott egy konvenciót, amely szerint a listák elemeit <strong>mindig nullától kezdve számozzuk</strong>. Ez azt jelenti, hogy a lista elején tárolt elem száma nulla. Mivel a mi listánkban öt elem van, az utolsó elem a négyes számot kapja. Ezt ne felejtsd el!</p>

<p>Hamarosan megszokod ezt, és természetes lesz.</p>

<p>Mielőtt továbblépnénk, a következőket kell megállapítanunk: <strong>a listánk elemek gyűjteménye, de minden egyes elem egy skalár</strong>.</p>


<br>




</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
