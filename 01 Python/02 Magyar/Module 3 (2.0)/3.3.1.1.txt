<problem chapter='3' section='3' slide='1' problem='1' title='Logikai és bitszintű műveletek | and, or, not'>

<!--
Update history:
2020-07-21 Grzegorz (reviewed, reformatted)
-->


<div class="container">
<div class="row">

<div class="small-12 large-6 columns">


<h1>Számítógépes logika</h1>

<p>Észrevetted, hogy az eddig használt feltételek nagyon egyszerűek, sőt, eléggé primitívek voltak? A való életben használt feltételek sokkal összetettebbek. Nézzük meg ezt a mondatot:</p>

<p><i>Ha van egy kis szabadidőnk, <mark style="background-color:#e6f2ff;">és</mark> jó az idő, elmegyünk sétálni.</i></p>

<br>

<p>Az és (<codel>and</codel>) kötőszót használtuk, ami azt jelenti, hogy a séta a két feltétel egyidejű teljesülésétől függ. A logika nyelvén a feltételek ilyen összekapcsolását <strong>konjunkciónak</strong> nevezzük. És most egy másik példa:</p>

<p><i>Ha te <mark style="background-color:#e6f2ff;">vagy</mark> én a bevásárlóközpontban vagyunk, valamelyikünk vesz ajándékot anyának.</i></p>

<br>

<p>A vagy (<codel>or</codel>) szó megjelenése azt jelenti, hogy a vásárlás legalább az egyik ilyen feltételtől függ. A logikában az ilyen összetételt <strong>diszjunkciónak</strong> nevezzük.</p>

<p>Nyilvánvaló, hogy a Pythonban szükség van operátorokra a konjunkciók és diszjunkciók létrehozásához. Ezek nélkül a nyelv kifejezőereje jelentősen gyengülne. Ezeket <strong>logikai operátoroknak</strong> nevezzük.</p>


<h2><font face="courier new">and</font></h2>

<p>A Python egyik logikai konjunkciós operátora az <i>and</i> (és) szó. Ez egy <strong>bináris operátor, amelynek prioritása alacsonyabb, mint az összehasonlító operátorok által kifejezett prioritás</strong>. Lehetővé teszi számunkra, hogy összetett feltételeket kódoljunk zárójelek használata nélkül, mint amilyen az alábbi:</p>

<codep>counter > 0 <mark style="background-color:#e6f2ff;">and</mark> value == 100

</codep>

<br>

<p>Az <codel>and</codel> operátor által szolgáltatott eredményt az <strong>igazságtáblázat</strong> alapján lehet meghatározni.</p>

<p>Ha az <codel>A <mark style="background-color:#e6f2ff;">and</mark> B</codel> konjunkcióját tekintjük, akkor az argumentumok lehetséges értékeinek és a konjunkció megfelelő értékeinek halmaza a következőképpen néz ki:</p>

<br>

<style>
th, td {
text-align: center;
}
</style>

<table style="width:90%" align="middle">

<tr>
<th><codel>A</codel> argumentum</th>
<th><codel>B</codel> argumentum</th>
<th><codel>A <mark style="background-color:#e6f2ff;">and</mark> B</codel></th>
</tr>

<tr>
<td><codel>False</codel></td>
<td><codel>False</codel></td>
<td><codel>False</codel></td>
</tr>

<tr>
<td><codel>False</codel></td>
<td><codel>True</codel></td>
<td><codel>False</codel></td>
</tr>

<tr>
<td><codel>True</codel></td>
<td><codel>False</codel></td>
<td><codel>False</codel></td>
</tr>

<tr>
<td><codel>True</codel></td>
<td><codel>True</codel></td>
<td><codel>True</codel></td>
</tr>

</table>

<br>


</div>





<div class="small-12 large-6 columns">

<h2><font face="courier new">or</font></h2>


<p>Az <codel>or</codel> (vagy) szó egy diszjunkciós operátor. Ez egy <strong>bináris operátor, amelynek alacsonyabb prioritása van, mint az <codel>and</codel>-nek</strong> (akárcsak a <codel>+</codel>-nak a <codel>*</codel>-hoz képest). Igazságtáblája a következő:</p>

<br>

<table style="width:90%" align="middle">

<tr>
<th><codel>A</codel> argumentum</th>
<th><codel>B</codel> argumentum</th>
<th><codel>A <mark style="background-color:#e6f2ff;">or</mark> B</codel></th>
</tr>

<tr>
<td><codel>False</codel></td>
<td><codel>False</codel></td>
<td><codel>False</codel></td>
</tr>

<tr>
<td><codel>False</codel></td>
<td><codel>True</codel></td>
<td><codel>True</codel></td>
</tr>

<tr>
<td><codel>True</codel></td>
<td><codel>False</codel></td>
<td><codel>True</codel></td>
</tr>

<tr>
<td><codel>True</codel></td>
<td><codel>True</codel></td>
<td><codel>True</codel></td>
</tr>

</table>


<br>

<h2><font face="courier new">not</font></h2>

<p>Ezen kívül van egy másik operátor is, amely a feltételek kialakításához alkalmazható. Ez egy <strong>unáris operátor, amely logikai negációt hajt végre</strong>. Működése egyszerű: az igazat hamissá, a hamisat pedig igazzá változtatja.</p>

<p>Ezt az operátort a <codel>not</codel> (nem) szóval jelöljük, és a <strong>prioritása nagyon magas: ugyanolyan, mint az unáris  <codel>+</codel> és <codel>-</codel></strong>. Igazságtáblája egyszerű:</p>

<br>

<table style="width:90%" align="middle">

<tr>
<th>Argumentum</th>
<th><codel><mark style="background-color:#e6f2ff;">not</mark></codel> argumentum</th>
</tr>

<tr>
<td><codel>False</codel></td>
<td><codel>True</codel></td>

</tr>

<tr>
<td><codel>True</codel></td>
<td><codel>False</codel></td>

</tr>

</table>

<br>


</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
