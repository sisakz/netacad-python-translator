<problem chapter='4' section='2' slide='1' problem='6' title='How functions communicate with their environment'>

<!--
Update history:
2020-08-13 Grzegorz (reviewed, re-formatted)
-->

<code>
def adding(a, b, c):
    print(a, "+", b, "+", c, "=", a + b + c)

# Call the adding function here.

</code>



<h1>Mixing positional and keyword arguments</h1>

<p>You can mix both styles if you want ‒ there is only one unbreakable rule: you have to put <strong>positional arguments before keyword arguments</strong>.</p>

<p>If you think for a moment, you'll certainly guess why.</p>

<p>To show you how it works, we'll use the following simple three-parameter function:</p>

<codep class="syntax-color">def adding(a, b, c):
    print(a, "+", b, "+", c, "=", a + b + c)
</codep>

<br>

<p>Its purpose is to evaluate and present the sum of all its arguments.</p>

<p>The function, when invoked in the following way:</p>

<codep class="syntax-color">adding(1, 2, 3)
</codep>


<br>

<p>will output:</p>

<codep>1 + 2 + 3 = 6</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br>

<p>It was ‒ as you may suspect ‒ a pure example of <strong>positional argument passing</strong>.

<hr>

<p>Of course, you can replace such an invocation with a purely keyword variant, like this:</p>

<codep class="syntax-color">adding(c = 1, a = 2, b = 3)
</codep>

<br>

<p>Our program will output a line like this:</p>

<codep>2 + 3 + 1 = 6</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br>

<p>Note the order of the values.</p>

<hr>

<p>Let's try to mix both styles now.</p>

<p>Look at the function invocation below:</p>

<codep class="syntax-color">adding(3, c = 1, b = 2)
</codep>

<br>

<p>Let's analyze it:</p>

<ul>
<li>the argument (<codel>3</codel>) for the <codel>a</codel> parameter is passed using the positional way;</li>
<li>the arguments for <codel>c</codel> and <codel>b</codel> are specified as keyword ones.</li>
</ul>

<p>This is what you'll see in the console:</p>

<codep>3 + 2 + 1 = 6</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<hr>

<p>Be careful, and beware of mistakes. If you try to pass more than one value to one argument, all you'll get is a runtime error.</p>

<p>Look at the invocation below - it seems that we've tried to set <codel>a</codel> twice:</p>

<codep style="color:red;">adding(<mark style="background-color:#e6f2ff;color:red;">3, a = 1</mark>, b = 2)

</codep>

<br>

<p>Python's response:</p>

<codep>TypeError: adding() got multiple values for argument 'a'</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br>

<p>Look at the snipet below. A code like this is fully correct, but it doesn't make much sense:</p>

<codep class="syntax-color">adding(4, 3, c = 2)
</codep>

<br>

<p>Everything is right, but leaving in just one keyword argument looks a bit weird ‒ what do you think?</p>


<br>

<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
