<problem chapter='4' section='6' slide='1' problem='10' title='SECTION SUMMARY (1/3)'>

<!--
Update history:
2020-08-18 Grzegorz (reviewed, re-formatted, PEP-8 compliance check)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Key takeaways: tuples</h1>

<br>


<p>1. <strong>Tuples</strong> are ordered and unchangeable (immutable) collections of data. They can be thought of as immutable lists. They are written in round brackets:</p>

<codep class="syntax-color copy">my_tuple = (1, 2, True, "a string", (3, 4), [5, 6], None)
print(my_tuple)

my_list = [1, 2, True, "a string", (3, 4), [5, 6], None]
print(my_list)
</codep>
<br>

<p>Each tuple element may be of a different type (i.e., integers, strings, booleans, etc.). What is more, tuples can contain other tuples or lists (and the other way round).</p>

<p>2. You can create an empty tuple like this:</p>

<codep class="copy"><mark style="background-color:#e6f2ff;">empty_tuple = ()</mark>
print(type(empty_tuple))    # outputs: &lt;class 'tuple'&gt;

</codep>
<br>

<p>3. A one-element tuple may be created as follows:</p>

<codep class="syntax-color copy">one_elem_tuple_1 = ("one", )    # Brackets and a comma.
one_elem_tuple_2 = "one",       # No brackets, just a comma.
</codep>
<br>

<p>If you remove the comma, you will tell Python to create a <b>variable</b>, not a tuple:</p>

<codep class="syntax-color copy">my_tuple_1 = 1, 
print(type(my_tuple_1))    # outputs: &lt;class 'tuple'&gt;

my_tuple_2 = 1             # This is not a tuple.
print(type(my_tuple_2))    # outputs: &lt;class 'int'&gt;
</codep>
<br>

<p>4. You can access tuple elements by indexing them:</p>

<codep class="syntax-color copy">my_tuple = (1, 2.0, "string", [3, 4], (5, ), True)
print(my_tuple[3])    # outputs: [3, 4]
</codep>
<br>

<p>5. Tuples are <b>immutable</b>, which means you cannot change their elements (you cannot append tuples, or modify, or remove tuple elements). The following snippet will cause an exception:</p>

<codep class="syntax-color copy">my_tuple = (1, 2.0, "string", [3, 4], (5, ), True)
my_tuple[2] = "guitar"    # The TypeError exception will be raised.
</codep>
<br>

<p>However, you can delete a tuple as a whole:<p>

<codep class="syntax-color copy">my_tuple = 1, 2, 3, 
del my_tuple
print(my_tuple)    # NameError: name 'my_tuple' is not defined
</codep>
<br>





<br>
<br>

</div>




<div class="small-12 large-6 columns">

<br>


<p>6. You can loop through a tuple elements (Example 1), check if a specific element is (not) present in a tuple (Example 2), use the <codel>len()</codel> function to check how many elements there are in a tuple (Example 3), or even join/multiply tuples (Example 4):</p>

<codep class="syntax-color copy"># Example 1
tuple_1 = (1, 2, 3)
for elem in tuple_1:
    print(elem)

# Example 2
tuple_2 = (1, 2, 3, 4)
print(5 in tuple_2)
print(5 not in tuple_2)

# Example 3
tuple_3 = (1, 2, 3, 5)
print(len(tuple_3))

# Example 4
tuple_4 = tuple_1 + tuple_2
tuple_5 = tuple_3 * 2

print(tuple_4)
print(tuple_5)
</codep>
<br>

<p><span class="label" style="background-color:orange;"><b>EXTRA</b></span></p>
<p>You can also create a tuple using a built-in Python function called <codel>tuple()</codel>. This is particularly useful when you want to convert a certain iterable (e.g., a list, range, string, etc.) to a tuple:</p>

<codep class="syntax-color copy">my_tuple = tuple((1, 2, "string"))
print(my_tuple)

my_list = [2, 4, 6]
print(my_list)    # outputs: [2, 4, 6]
print(type(my_list))    # outputs: &lt;class 'list'&gt;
tup = tuple(my_list)
print(tup)    # outputs: (2, 4, 6)
print(type(tup))    # outputs: &lt;class 'tuple'&gt;
</codep>
<br>

<p>By the same fashion, when you want to convert an iterable to a list, you can use a built-in Python function called <codel>list()</codel>:</p>

<codep class="syntax-color copy">tup = 1, 2, 3, 
my_list = list(tup)
print(type(my_list))    # outputs: &lt;class 'list'&gt;
</codep>
<br>


<br>

</div>

</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
