<problem chapter='4' section='3' slide='1' problem='11' title='SECTION SUMMARY'>

<!--
Update history:
2020-08-14 Grzegorz (reviewed, re-formatted)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Key takeaways</h1>

<br>


<p>1. You can use the <codel>return</codel> keyword to tell a function to return some value. The <codel>return</codel> statement exits the function, e.g.:</p>

<codep class="syntax-color copy">def multiply(a, b):
    return a * b

print(multiply(3, 4))    # outputs: 12


def multiply(a, b):
    return

print(multiply(3, 4))    # outputs: None
</codep>
<br>

<p>2. The result of a function can be easily assigned to a variable, e.g.:</p>

<codep>def wishes():
    return "Happy Birthday!"

<mark style="background-color:#e6f2ff;">w = wishes()</mark>

print(w)    # outputs: Happy Birthday!
</codep>
<br>

<p>Look at the difference in output in the following two examples:</p>

<codep class="syntax-color copy"># Example 1
def wishes():
    print("My Wishes")
    return "Happy Birthday"

wishes()    # outputs: My Wishes


# Example 2
def wishes():
    print("My Wishes")
    return "Happy Birthday"

print(wishes())

# outputs: My Wishes
#          Happy Birthday
</codep>
<br>

<p>3. You can use a list as a function's argument, e.g.:</p>

<codep class="syntax-color copy">def hi_everybody(my_list):
    for name in my_list:
        print("Hi,", name)

hi_everybody(["Adam", "John", "Lucy"])
</codep>
<br>

<p>4. A list can be a function result, too, e.g.:</p>

<codep class="syntax-color copy">def create_list(n):
    my_list = []
    for i in range(n):
        my_list.append(i)
    return my_list

print(create_list(5))
</codep>
<br>

<br>
<br>

</div>




<div class="small-12 large-6 columns">

<br>


<p><strong>Exercise 1</strong></p>
<p>What is the output of the following snippet?</p>

<codep>def hi():
    return
    print("Hi!")

hi()

</codep>

<br>
<div align="right">
<button class="button tiny" onclick="solution('sol')">Check</button>
</div>

<p id="sol" style="display: none;">
the function will return an implicit <codel>None</codel> value
</p>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>

<br>



<p><strong>Exercise 2</strong></p>
<p>What is the output of the following snippet?</p>

<codep>def is_int(data):
    if type(data) == int:
        return True
    elif type(data) == float:
        return False

print(is_int(5))
print(is_int(5.0))
print(is_int("5"))

</codep>

<br>

<div align="right">
<button class="button tiny" onclick="solution('sol2')">Check</button>
</div>

<p id="sol2" style="display: none;">
<codep>True
False
None</codep>
</p>


<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>

<br>




<p><strong>Exercise 3</strong></p>
<p>What is the output of the following snippet?</p>

<codep>def even_num_lst(ran):
    lst = []
    for num in range(ran):
        if num % 2 == 0:
            lst.append(num)
    return lst

print(even_num_lst(11))

</codep>

<br>

<div align="right">
<button class="button tiny" onclick="solution('sol3')">Check</button>
</div>

<p id="sol3" style="display: none;">
<codep>[0, 2, 4, 6, 8, 10]</codep>
</p>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>


<br>





<p><strong>Exercise 4</strong></p>
<p>What is the output of the following snippet?</p>

<codep>def list_updater(lst):
    upd_list = []
    for elem in lst:
        elem **= 2
        upd_list.append(elem)
    return upd_list

foo = [1, 2, 3, 4, 5]
print(list_updater(foo))

</codep>

<br>

<div align="right">
<button class="button tiny" onclick="solution('sol4')">Check</button>
</div>

<p id="sol4" style="display: none;">
<codep>[1, 4, 9, 16, 25]</codep>
</p>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>


<br>

</div>

</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
