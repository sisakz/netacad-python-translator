<problem chapter='3' section='2' slide='1' problem='5' title='Loops in Python | for'>

<!--
Update history:
2020-07-20 Grzegorz (reviewed, re-formatted)
-->

<code>for i in range(2, 8, 3):
    print("The value of i is currently", i)

</code>

<h1>More about the <font face="Courier New">for</font> loop and the <font face="Courier New">range()</font> function with three arguments</h1>

<p>The <codel>range()</codel> function may also accept <strong>three arguments</strong> - take a look at the code in the editor.</p>

<p>The third argument is an <strong>increment</strong> – it's a value added to control the variable at every loop turn (as you may suspect, the <strong>default value of the increment is 1</strong>).</p>

<p>Can you tell us how many lines will appear in the console and what values they will contain?</p>

<p>Run the program to find out if you're right.</p>

<br>

<p>You should be able to see the following lines in the console window:</p>

<codep>The value of i is currently 2
The value of i is currently 5</codep>
<p style="text-align: right;"><font size="-2"><b>output</b></font></p>

<br>

<p>Do you know why? The first argument passed to the <codel>range()</codel> function tells us what the <strong>starting</strong> number of the sequence is (hence <codel>2</codel> in the output). The second argument tells the function where to <strong>stop</strong> the sequence (the function generates numbers up to the number indicated by the second argument, but does not include it). Finally, the third argument indicates the <strong>step</strong>, which actually means the difference between each number in the sequence of numbers generated by the function.</p>

<p><codel>2</codel> (starting number) &rarr; <codel>5</codel> (<codel>2</codel> increment by 3 equals <codel>5</codel> – the number is within the range from 2 to 8) &rarr; <codel>8</codel> (<codel>5</codel> increment by 3 equals <codel>8</codel> – the number is not within the range from 2 to 8, because the stop parameter is not included in the sequence of numbers generated by the function.)</p>

<hr>

<p>Note: if the set generated by the <codel>range()</codel> function is empty, the loop won't execute its body at all.</p>

<p>Just like here – there will be no output:</p>

<codep class="syntax-color">for i in range(1, 1):
    print("The value of i is currently", i)
</codep>

<br>

<hr>

<p>Note: the set generated by the <codel>range()</codel> has to be sorted in <strong>ascending order</strong>. There's no way to force the <codel>range()</codel> to create a set in a different form when the <codel>range()</codel> function accepts exactly two arguments. This means that the <codel>range()</codel>'s second argument must be greater than the first.</p>

<p>Thus, there will be no output here, either:</p>

<codep class="syntax-color">for i in range(2, 1):
    print("The value of i is currently", i)
</codep>

<br>

<hr>

<p>Let's have a look at a short program whose task is to write some of the first powers of two:</p>

<codep class="syntax-color copy">power = 1
for expo in range(16):
    print("2 to the power of", expo, "is", power)
    power *= 2
</codep>

<br>

<p>The <codel>expo</codel> variable is used as a control variable for the loop, and indicates the current value of the <i>exponent</i>. The exponentiation itself is replaced by multiplying by two. Since 2<sup>0</sup> is equal to 1, then 2 &times; 1 is equal to 2<sup>1</sup>, 2 &times; 2<sup>1</sup> is equal to 2<sup>2</sup>, and so on. What is the greatest exponent for which our program still prints the result?</p>

</p>Run the code and check if the output matches your expectations.</p>

<br>


<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
