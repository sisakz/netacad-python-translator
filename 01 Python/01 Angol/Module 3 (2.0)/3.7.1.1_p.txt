<problem chapter='3' section='7' slide='1' problem='1' title='Lists in advanced applications'>

<!--
Update history:
2020-08-12 Grzegorz (reviewed)
2020-08-27 Grzegorz (right corner changed to left)
-->

<code>
</code>

<h1>Lists in lists</h1>


<p>Lists can consist of scalars (namely numbers) and elements of a much more complex structure (you've already seen such examples as strings, booleans, or even other lists in the previous Section Summary lessons). Let's have a closer look at the case where a <strong>list's elements are just lists</strong>.</p>

<p>We often find such <strong>arrays</strong> in our lives. Probably the best example of this is a <strong>chessboard</strong>.</p>

<p>A chessboard is composed of rows and columns. There are eight rows and eight columns. Each column is marked with the letters A through H. Each line is marked with a number from one to eight.</p>

<p>The location of each field is identified by letter-digit pairs. Thus, we know that the bottom left corner of the board (the one with the white rook) is A1, while the opposite corner is H8.</p>

<br>

<p>Let's assume that we're able to use the selected numbers to represent any chess piece. We can also assume that <strong>every row on the chessboard is a list</strong>.</p>

<p>Look at the code below:</p>

<codep class="syntax-color">row = []

for i in range(8):
    row.append(WHITE_PAWN)
</codep>

<br>



<p>It builds a list containing eight elements representing the second row of the chessboard â€’ the one filled with pawns (assume that <codel>WHITE_PAWN</codel> is a <strong>predefined symbol</strong> representing a white pawn).</p>

<hr>

<p>The same effect may be achieved by means of a <strong>list comprehension</strong>, the special syntax used by Python in order to fill massive lists.</p>

<p>A list comprehension is actually a list, but <strong>created on-the-fly during program execution, and is not described statically</strong>.</p>

<p>Take a look at the snippet:</p>

<codep class="syntax-color">row = [WHITE_PAWN for i in range(8)]
</codep>

<br>


<p>The part of the code placed inside the brackets specifies:</p>

<ul>
<li>the data to be used to fill the list (<codel>WHITE_PAWN</codel>)</li>
<li>the clause specifying how many times the data occurs inside the list (<codel>for i in range(8)</codel>)</li>
</ul>

<hr>

<p>Take a look at some other <strong>list comprehension examples</strong>:</p>

<p>Example #1:</p>
<codep class="syntax-color">squares = [x ** 2 for x in range(10)]
</codep>
<br>

<p>The snippet produces a ten-element list filled with squares of ten integer numbers starting from zero (0, 1, 4, 9, 16, 25, 36, 49, 64, 81)</p>

<p>Example #2:</p>
<codep class="syntax-color">twos = [2 ** i for i in range(8)]
</codep>
<br>

<p>The snippet creates an eight-element array containing the first eight powers of two (1, 2, 4, 8, 16, 32, 64, 128)</p>

<p>Example #3:</p>
<codep class="syntax-color">odds = [x for x in squares if x % 2 != 0 ]
</codep>

<br>

<p>The snippet makes a list with only the odd elements of the <codel>squares</codel> list.</p>

<br>




<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
