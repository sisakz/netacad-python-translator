<problem chapter='3' section='1' slide='1' problem='6' title='Making decisions in Python'>

<!--
Update history:
2020-07-20 Grzegorz (reviewed)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Conditional execution: the <font face="Courier New">if</font> statement</h1>


<p>If a certain sleepless Python developer falls asleep when he or she counts 120 sheep, and the sleep-inducing procedure may be implemented as a special function named <codel>sleep_and_dream()</codel>, the whole code takes the following shape:</p>

<codep>if sheep_counter >= 120: # Evaluate a test expression
    sleep_and_dream() # Execute if test expression is True
	
</codep>

<br>

<p>You can read it as: if <codel>sheep_counter</codel> is greater than or equal to <codel>120</codel>, then fall asleep and dream (i.e., execute the <codel>sleep_and_dream</codel> function.)</p>

<hr>

<p>We've said that <strong>conditionally executed statements have to be indented</strong>. This creates a very legible structure, clearly demonstrating all possible execution paths in the code.</p>

<p>Take a look at the following code:</p>

<codep>if sheep_counter >= 120:
    make_a_bed()
    take_a_shower()
    sleep_and_dream()
feed_the_sheepdogs()

</codep>


<br>

<p>As you can see, making a bed, taking a shower and falling asleep and dreaming are all <strong>executed conditionally</strong> – when <codel>sheep_counter</codel> reaches the desired limit.</p>

<p>Feeding the sheepdogs, however, is <strong>always done</strong> (i.e., the <codel>feed_the_sheepdogs()</codel> function is not indented and does not belong to the <codel>if</codel> block, which means it is always executed.)</p>

<p>Now we're going to discuss another variant of the conditional statement, which also allows you to perform an additional action when the condition is not met.</p>

<br>

</div>





<div class="small-12 large-6 columns">


<h1>Conditional execution: the <font face="Courier New">if-else</font> statement</h1>

<p>We started out with a simple phrase which read: <i>If the weather is good, we will go for a walk</i>.</p>
 
<p>Note: there is not a word about what will happen if the weather is bad. We only know that we won't go outdoors, but what we could do instead is not known. We may want to plan something in case of bad weather, too.</p>

<p>We can say, for example: <i>If the weather is good, we will go for a walk, otherwise we will go to a theater</i>.</p>

<p>Now we know what we'll do <strong>if the conditions are met</strong>, and we know what we'll do <strong>if not everything goes our way</strong>. In other words, we have a "Plan B".</p>

<p>Python allows us to express such alternative plans. This is done with a second, slightly more complex form of the conditional statement, the <i>if-else</i> statement:</p>

<codep>if true_or_false_condition:
    perform_if_condition_true
<mark style="background-color:#e6f2ff;">else:</mark>
    perform_if_condition_false

</codep>


<br>

<p>Thus, there is a new word: <codel>else</codel> – this is a <strong>keyword</strong>.</p>

<p>The part of the code which begins with <codel>else</codel> says what to do if the condition specified for the <codel>if</codel> is not met (note the <strong>colon</strong> after the word).</p>

<p>The <i>if-else</i> execution goes as follows:<p>

<ul>
<li>if the condition evaluates to <strong>True</strong> (its value is not equal to zero), the <codel>perform_if_condition_true</codel> statement is executed, and the conditional statement comes to an end;</li>

<li>if the condition evaluates to <strong>False</strong> (it is equal to zero), the <codel>perform_if_condition_false</codel> statement is executed, and the conditional statement comes to an end.</li>
</ul>

<br>


</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
