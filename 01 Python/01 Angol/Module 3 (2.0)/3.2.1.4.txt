<problem chapter='3' section='2' slide='1' problem='4' title='Loops in Python | for'>

<!--
Update history:
2020-07-20 Grzegorz (reviewed, re-formatted)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Looping your code with <font face="Courier New">for</font></h1>

<p>Another kind of loop available in Python comes from the observation that sometimes it's more important to <strong>count the "turns" of the loop</strong> than to check the conditions.</p>

<p>Imagine that a loop's body needs to be executed exactly one hundred times. If you would like to use the <codel>while</codel> loop to do it, it may look like this:</p>

<codep class="syntax-color">i = 0
while i < 100:
    # do_something()
    i += 1
</codep>

<br>

<p>It would be nice if somebody could do this boring counting for you. Is that possible?</p>

<p>Of course it is – there's a special loop for these kinds of tasks, and it is named <codel>for</codel>.</p>

<p>Actually, the <codel>for</codel> loop is designed to do more complicated tasks – <strong>it can "browse" large collections of data item by item</strong>. We'll show you how to do that soon, but right now we're going to present a simpler variant of its application.</p>

<hr>

<p>Take a look at the snippet:</p>

<codep><mark style="background-color:#e6f2ff;">for</mark> i in range(100):
    # do_something()
    pass

</codep>

<br>

<p>There are some new elements. Let us tell you about them:</p>

<ul>

<li>the <i>for</i> keyword opens the <codel>for</codel> loop; note – there's no condition after it; you don't have to think about conditions, as they're checked internally, without any intervention;</li>

<li>any variable after the <i>for</i> keyword is the <strong>control variable</strong> of the loop; it counts the loop's turns, and does it automatically;</li>

<li>the <i>in</i> keyword introduces a syntax element describing the range of possible values being assigned to the control variable;</li>

<li>the <codel>range()</codel> function (this is a very special function) is responsible for generating all the desired values of the control variable; in our example, the function will create (we can even say that it will <strong>feed</strong> the loop with) subsequent values from the following set: 0, 1, 2 .. 97, 98, 99; note: in this case, the <codel>range()</codel> function starts its job from 0 and finishes it one step (one integer number) before the value of its argument;</li>

<li>note the <i>pass</i> keyword inside the loop body – it does nothing at all; it's an <strong>empty instruction</strong> – we put it here because the <codel>for</codel> loop's syntax demands at least one instruction inside the body (by the way – <codel>if</codel>, <codel>elif</codel>, <codel>else</codel> and <codel>while</codel> express the same thing)</li>

</ul>

<p>Our next examples will be a bit more modest in the number of loop repetitions.</p>


<br>


</div>





<div class="small-12 large-6 columns">

<br>

<p>Take a look at the snippet below. Can you predict its output?</p>

<codep class="copy syntax-color">for i in range(10):
    print("The value of i is currently", i)
</codep>

<br>

<p>Run the code to check if you were right.</p>


<p>Note:</p>

<ul>

<li>the loop has been executed ten times (it's the <codel>range()</codel> function's argument)</li>

<li>the last control variable's value is <codel>9</codel> (not <codel>10</codel>, as <strong>it starts from <codel>0</codel></strong>, not from <codel>1</codel>)</li>

</ul>

<hr>

<p>The <codel>range()</codel> function invocation may be equipped with two arguments, not just one:</p>

<codep>for i in range(<mark style="background-color:#e6f2ff;">2, 8</mark>):
    print("The value of i is currently", i)

</codep>

<br>

<p>In this case, the first argument determines the initial (first) value of the control variable.<p>

<p>The last argument shows the first value the control variable will not be assigned.</p>

<p>Note: the <codel>range()</codel> function <strong>accepts only integers as its arguments</strong>, and generates sequences of integers.</p>

<p>Can you guess the output of the program? Run it to check if you were right now, too.</p>

<p>The first value shown is <codel>2</codel> (taken from the <codel>range()</codel>'s first argument.)</p>

<p>The last is <codel>7</codel> (although the <codel>range()</codel>'s second argument is <codel>8</codel>).</p>




<br>

</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
