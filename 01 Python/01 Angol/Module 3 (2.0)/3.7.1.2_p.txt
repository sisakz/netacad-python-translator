<problem chapter='3' section='7' slide='1' problem='2' title='Lists in advanced applications â€’ Arrays'>

<!--
Update history:
2020-08-12 Grzegorz (reviewed)
-->

<code>
</code>

<h1>Lists in lists: two-dimensional arrays</h1>

<p>Let's also assume that a <strong>predefined symbol</strong> named <codel>EMPTY</codel> designates an empty field on the chessboard.</p>

<p>So, if we want to create a list of lists representing the whole chessboard, it may be done in the following way:</p>

<codep class="syntax-color">board = []

for i in range(8):
    row = [EMPTY for i in range(8)]
    board.append(row)
</codep>

<br>

<p>Note:</p>

<ul>
<li>the inner part of the loop creates a row consisting of eight elements (each of them equal to <codel>EMPTY</codel>) and appends it to the <codel>board</codel> list;</li>
<li>the outer part repeats it eight times;</li>
<li>in total, the <codel>board</codel> list consists of 64 elements (all equal to <codel>EMPTY</codel>)</li>

</ul>


<p>This model perfectly mimics the real chessboard, which is in fact an eight-element list of elements, all being single rows. Let's summarize our observations:</p>

<ul>
<li>the elements of the rows are fields, eight of them per row;</li>
<li>the elements of the chessboard are rows, eight of them per chessboard.</li>
</ul>


<p>The <codel>board</codel> variable is now a <strong>two-dimensional array</strong>. It's also called, by analogy to algebraic terms, a <strong>matrix</strong>.</p>


<br>

<p>As list comprehensions can be <strong>nested</strong>, we can shorten the board creation in the following way:</p>

<codep class="syntax-color">board = [[EMPTY for i in range(8)] for j in range(8)]
</codep>

<br>

<p>The inner part creates a row, and the outer part builds a list of rows.</p>


<br>


<studyMode>false</studyMode>
<labMode>false</labMode>

</problem>
