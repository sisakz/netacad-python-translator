<problem chapter='3' section='6' slide='1' problem='10' title='SECTION SUMMARY'>

<!--
Update history:
2020-08-12 Grzegorz (reviewed, reformatted)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Key takeaways</h1>

<br>


<p>1. If you have a list <codel>list_1</codel>, then the following assignment: <codel>list_2 = list_1</codel> does not make a copy of the <codel>list_1</codel> list, but makes the variables <codel>list_1</codel> and <codel>list_2</codel> <strong>point to one and the same list in memory</strong>. For example:</p>

<codep class="syntax-color copy">vehicles_one = ['car', 'bicycle', 'motor']
print(vehicles_one) # outputs: ['car', 'bicycle', 'motor']

vehicles_two = vehicles_one
del vehicles_one[0] # deletes 'car'
print(vehicles_two) # outputs: ['bicycle', 'motor']
</codep>

<br>

<p>2. If you want to copy a list or part of the list, you can do it by performing <strong>slicing</strong>:</p>

<codep class="syntax-color copy">colors = ['red', 'green', 'orange']

copy_whole_colors = colors[:]  # copy the entire list
copy_part_colors = colors[0:2]  # copy part of the list
</codep>
<br>


<p>3. You can use <strong>negative indices</strong> to perform slices, too. For example:</p>

<codep class="syntax-color copy">sample_list = ["A", "B", "C", "D", "E"]
new_list = sample_list[2:-1]
print(new_list)  # outputs: ['C', 'D']
</codep>
<br>

<p>4. The <codel>start</codel> and <codel>end</codel> parameters are <strong>optional</strong> when performing a slice: <codel>list[start:end]</codel>, e.g.:</p>

<codep class="syntax-color copy">my_list = [1, 2, 3, 4, 5]
slice_one = my_list[2: ]
slice_two = my_list[ :2]
slice_three = my_list[-2: ]

print(slice_one)  # outputs: [3, 4, 5]
print(slice_two)  # outputs: [1, 2]
print(slice_three)  # outputs: [4, 5]
</codep>
<br>

<p>5. You can <strong>delete slices</strong> using the <codel>del</codel> instruction:</p>

<codep class="syntax-color copy">my_list = [1, 2, 3, 4, 5]
del my_list[0:2]
print(my_list)  # outputs: [3, 4, 5]

del my_list[:]
print(my_list)  # deletes the list content, outputs: []
</codep>
<br>

<p>6. You can test if some items <strong>exist in a list or not</strong> using the keywords <codel>in</codel> and <codel>not in</codel>, e.g.:</p>

<codep class="syntax-color copy">my_list = ["A", "B", 1, 2]

print("A" in my_list)  # outputs: True
print("C" not in my_list)  # outputs: True
print(2 not in my_list)  # outputs: False
</codep>

<br>

<br>
<br>

</div>




<div class="small-12 large-6 columns">

<br>


<p><strong>Exercise 1</strong></p>
<p>What is the output of the following snippet?</p>

<codep>list_1 = ["A", "B", "C"]
list_2 = list_1
list_3 = list_2

del list_1[0]
del list_2[0]

print(list_3)

</codep>

<br>

<button class="button tiny" onclick="solution('sol')">Check</button>

<p id="sol" style="display: none;">
<codep>['C']</codep>
</p>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>

<br>



<p><strong>Exercise 2</strong></p>
<p>What is the output of the following snippet?</p>

<codep>list_1 = ["A", "B", "C"]
list_2 = list_1
list_3 = list_2

del list_1[0]
del list_2

print(list_3)

</codep>

<br>


<button class="button tiny" onclick="solution('sol2')">Check</button>

<p id="sol2" style="display: none;">
<codep>['B', 'C']</codep>
</p>


<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>

<br>




<p><strong>Exercise 3</strong></p>
<p>What is the output of the following snippet?</p>

<codep>list_1 = ["A", "B", "C"]
list_2 = list_1
list_3 = list_2

del list_1[0]
del list_2[:]

print(list_3)

</codep>

<br>

<button class="button tiny" onclick="solution('sol3')">Check</button>

<p id="sol3" style="display: none;">
<codep>[]</codep>
</p>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>


<br>

<p><strong>Exercise 4</strong></p>
<p>What is the output of the following snippet?</p>

<codep>list_1 = ["A", "B", "C"]
list_2 = list_1[:]
list_3 = list_2[:]

del list_1[0]
del list_2[0]

print(list_3)</codep>

<br>

<button class="button tiny" onclick="solution('sol4')">Check</button>

<p id="sol4" style="display: none;">
<codep>['A', 'B', 'C']</codep>
</p>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>


<br>


<p><strong>Exercise 5</strong></p>
<p>Insert <codel>in</codel> or <codel>not in</codel> instead of <codel>???</codel> so that the code outputs the expected result.</p>

<codep>my_list = [1, 2, "in", True, "ABC"]

print(1 ??? my_list)  # outputs True
print("A" ??? my_list)  # outputs True
print(3 ??? my_list)  # outputs True
print(False ??? my_list)  # outputs False</codep>

<br>

<button class="button tiny" onclick="solution('sol5')">Check</button>

<p id="sol5" style="display: none;">
<codep>my_list = [1, 2, "in", True, "ABC"]

print(1 in my_list)  # outputs True
print("A" not in my_list)  # outputs True
print(3 not in my_list)  # outputs True
print(False in my_list)  # outputs False</codep>
</p>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>


<br>

</div>

</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
