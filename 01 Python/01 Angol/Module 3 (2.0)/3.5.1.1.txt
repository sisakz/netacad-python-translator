<problem chapter='3' section='5' slide='1' problem='1' title='Sorting simple lists ‒ the bubble sort algorithm'>

<!--
Update history:
2020-08-11 Grzegorz (reviewed, re-formatted)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">


<h1>The bubble sort</h1>

<p>Now that you can effectively juggle the elements of lists, it's time to learn how to <strong>sort</strong> them. Many sorting algorithms have been invented so far, which differ a lot in speed, as well as in complexity. We are going to show you a very simple algorithm, easy to understand, but unfortunately not too efficient, either. It's used very rarely, and certainly not for large and extensive lists.</p>

<p>Let's say that a list can be sorted in two ways:</p>

<ul>
<li>increasing (or more precisely ‒ non-decreasing) ‒ if in every pair of adjacent elements, the former element is not greater than the latter;</li>
<li>decreasing (or more precisely ‒ non-increasing) ‒ if in every pair of adjacent elements, the former element is not less than the latter.</li>
</ul>

<p>In the following sections, we'll sort the list in increasing order, so that the numbers will be ordered from the smallest to the largest.</p>

<p>Here's the list:</p>

<style>
    table, tr, td {
        border:1px solid #000;
        border-collapse: collapse;
        
    }
</style>


<table width="75%">
<tr>
<td width="20%"><center>8</center></td> <td width="20%"><center>10</center></td> <td width="20%"><center>6</center></td> <td width="20%"><center>2</center></td> <td width="20%"><center>4</center></td>
</tr>

</table>


<p>We'll try to use the following approach: we'll take the first and the second elements and compare them; if we determine that they're in the wrong order (i.e., the first is greater than the second), we'll swap them round; if their order is valid, we'll do nothing. A glance at our list confirms the latter ‒ the elements 01 and 02 are in the proper order, as in <codel>8 < 10</codel>.</p>

<p>Now look at the second and the third elements. They're in the wrong positions. We have to swap them:</p>

<table width="75%">
<tr>
<td width="20%"><center>8</center></td> <td width="20%" style="background-color:#e6f2ff;"><center><strong>6</strong></center></td> <td width="20%" style="background-color:#e6f2ff;"><center><strong>10</strong></center></td> <td width="20%"><center>2</center></td> <td width="20%"><center>4</center></td>
</tr>

</table>

<br>

<p>We go further, and look at the third and the fourth elements. Again, this is not what it's supposed to be like. We have to swap them:</p>

<table width="75%">
<tr>
<td width="20%"><center>8</center></td> <td width="20%"><center>6</center></td> <td width="20%" style="background-color:#e6f2ff;"><center><strong>2</strong></center></td> <td width="20%" style="background-color:#e6f2ff;"><center><strong>10</strong></center></td> <td width="20%"><center>4</center></td>
</tr>

</table>

<br>

<p>Now we check the fourth and the fifth elements. Yes, they too are in the wrong positions. Another swap occurs:</p>


<table width="75%">
<tr>
<td width="20%"><center>8</center></td> <td width="20%"><center>6</center></td> <td width="20%"><center>2</center></td> <td width="20%" style="background-color:#e6f2ff;"><center><strong>4</strong></center></td> <td width="20%" style="background-color:#e6f2ff;"><center><strong>10</strong></center></td>
</tr>

</table>

<br>

<p>The first pass through the list is already finished. We're still far from finishing our job, but something curious has happened in the meantime. The largest element, <codel>10</codel>, has already gone to the end of the list. Note that this is the <strong>desired place</strong> for it. All the remaining elements form a picturesque mess, but this one is already in place.</p>

<br> 

</div>






<div class="small-12 large-6 columns">

<br>

<p>Now, for a moment, try to imagine the list in a slightly different way ‒ namely, like this:</p>

<table width="30%">
<tr>
<td><center>10</center></td>
</tr>

<tr>
<td><center>4</center></td>
</tr>

<tr>
<td><center>2</center></td>
</tr>

<tr>
<td><center>6</center></td>
</tr>

<tr>
<td><center>8</center></td>
</tr>

</table>

<br>

<p>Look ‒ <codel>10</codel> is at the top. We could say that it floated up from the bottom to the surface, just like the <strong>bubble in a glass of champagne</strong>. The sorting method derives its name from the same observation ‒ it's called a <strong>bubble sort</strong>.</p>


<p>Now we start with the second pass through the list. We look at the first and second elements - a swap is necessary:</p>

<style>
    table, tr, td {
        border:1px solid #000;
        border-collapse: collapse;
        
    }
</style>

<table width="75%">
<tr>
<td width="20%" style="background-color:#e6f2ff;"><center><strong>6</strong></center></td> <td width="20%" style="background-color:#e6f2ff;"><center><strong>8</strong></center></td> <td width="20%"><center>2</center></td> <td width="20%"><center>4</center></td> <td width="20%"><center>10</center></td>
</tr>

</table>

<br>

<p>Time for the second and third elements: we have to swap them too:</p>

<table width="75%">
<tr>
<td width="20%"><center>6</center></td> <td width="20%" style="background-color:#e6f2ff;"><center><strong>2</strong></center></td> <td width="20%" style="background-color:#e6f2ff;"><center><strong>8</strong></center></td> <td width="20%"><center>4</center></td> <td width="20%"><center>10</center></td>
</tr>

</table>

<br>

<p>Now the third and fourth elements, and the second pass is finished, as <codel>8</codel> is already in place:</p>

<table width="75%">
<tr>
<td width="20%"><center>6</center></td> <td width="20%"><center>2</center></td> <td width="20%" style="background-color:#e6f2ff;"><center><strong>4</strong></center></td> <td width="20%" style="background-color:#e6f2ff;"><center><strong>8</strong></center></td> <td width="20%"><center>10</center></td>
</tr>

</table>

<br>

<p>We start the next pass immediately. Watch the first and the second elements carefully - another swap is needed:</p>

<table width="75%">
<tr>
<td width="20%" style="background-color:#e6f2ff;"><center><strong>2</strong></center></td> <td width="20%" style="background-color:#e6f2ff;"><center><strong>6</strong></center></td> <td width="20%"><center>4</center></td> <td width="20%"><center>8</center></td> <td width="20%"><center>10</center></td>
</tr>

</table>

<br>

<p>Now <codel>6</codel> needs to go into place. We swap the second and the third elements:</p>

<table width="75%">
<tr>
<td width="20%"><center>2</center></td> <td width="20%" style="background-color:#e6f2ff;"><center><strong>4</strong></center></td> <td width="20%" style="background-color:#e6f2ff;"><center><strong>6</strong></center></td> <td width="20%"><center>8</center></td> <td width="20%"><center>10</center></td>
</tr>

</table>

<br>

<p>The list is already sorted. We have nothing more to do. This is exactly what we want.</p>

<p>As you can see, the essence of this algorithm is simple: <strong>we compare the adjacent elements, and by swapping some of them, we achieve our goal</strong>.</p>

<p>Let's code into Python all the actions performed during a single pass through the list, and then we'll consider how many passes we actually need in order to perform it. We haven't explained this so far, and we'll do that a little later.</p>

<br>

</div>


</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
