<problem chapter='3' section='2' slide='1' problem='16' title='SECTION SUMMARY (1/2)'>


<!--
Update history:
2020-07-21 Grzegorz (reviewed, re-formatted)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Key takeaways</h1>

<br>


<p>1. There are two types of loops in Python: <codel>while</codel> and <codel>for</codel>:</p>

<ul>
<li>the <codel>while</codel> loop executes a statement or a set of statements as long as a specified boolean condition is true, e.g.:</li>

<br>
<codep class="copy syntax-color"># Example 1
while True:
    print("Stuck in an infinite loop.")

# Example 2
counter = 5
while counter > 2:
    print(counter)
    counter -= 1
</codep>
<br>

<li>the <codel>for</codel> loop executes a set of statements many times; it's used to iterate over a sequence (e.g., a list, a dictionary, a tuple, or a set â€“ you will learn about them soon) or other iterable objects (e.g., strings). You can use the <codel>for</codel> loop to iterate over a sequence of numbers using the built-in <codel>range</codel> function. Look at the examples below:</li>

<br>
<codep class="copy syntax-color"># Example 1
word = "Python"
for letter in word:
    print(letter, end="*")

# Example 2
for i in range(1, 10):
    if i % 2 == 0:
        print(i)
</codep>
<br>

</ul>

<p>2. You can use the <codel>break</codel> and <codel>continue</codel> statements to change the flow of a loop:</p>

<ul>
<li>You use <codel>break</codel> to exit a loop, e.g.:</li>
<br>

<codep class="copy syntax-color">text = "OpenEDG Python Institute"
for letter in text:
    if letter == "P":
        break
    print(letter, end="")
</codep>

<br>

<li>You use <codel>continue</codel> to skip the current iteration, and continue with the next iteration, e.g.:</li>
<br>

<codep class="copy syntax-color">text = "pyxpyxpyx"
for letter in text:
    if letter == "x":
        continue
    print(letter, end="")
</codep>
<br>

</ul>



<br>
<br>

</div>




<div class="small-12 large-6 columns">

<br>


<p>3. The <codel>while</codel> and <codel>for</codel> loops can also have an <codel>else</codel> clause in Python. The <codel>else</codel> clause executes after the loop finishes its execution as long as it has not been terminated by <codel>break</codel>, e.g.:</p>

<codep class="copy syntax-color">n = 0

while n != 3:
    print(n)
    n += 1
else:
    print(n, "else")

print()

for i in range(0, 3):
    print(i)
else:
    print(i, "else")
</codep>

<br>

<p>4. The <codel>range()</codel> function generates a sequence of numbers. It accepts integers and returns range objects. The syntax of <codel>range()</codel> looks as follows: <codel>range(start, stop, step)</codel>, where:<p>

<ul>
<li><codel>start</codel> is an optional parameter specifying the starting number of the sequence (<font face="Courier New">0</font> by default)</li>
<li><codel>stop</codel> is an optional parameter specifying the end of the sequence generated (it is not included),</li>
<li>and <codel>step</codel> is an optional parameter specifying the difference between the numbers in the sequence (<font face="Courier New">1</font> by default.)</li>
</ul>

<p>Example code:</p>

<codep class="copy syntax-color">for i in range(3):
    print(i, end=" ")  # Outputs: 0 1 2

for i in range(6, 1, -2):
    print(i, end=" ")  # Outputs: 6, 4, 2
</codep>


<br>



</div>

</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
