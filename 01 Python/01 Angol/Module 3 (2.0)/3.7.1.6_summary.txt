<problem chapter='3' section='7' slide='1' problem='6' title='SECTION SUMMARY'>

<!--
Update history:
2020-08-12 Grzegorz (reviewed)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Key takeaways</h1>

<br>


<p>1. <strong>List comprehension</strong> allows you to create new lists from existing ones in a concise and elegant way. The syntax of a list comprehension looks as follows:</p>

<codep>[expression <mark style="background-color:#e6f2ff;">for</mark> element <mark style="background-color:#e6f2ff;">in</mark> list <mark style="background-color:#e6f2ff;">if</mark> conditional]

</codep>
<br>

<p>which is actually an equivalent of the following code:</p>

<codep><mark style="background-color:#e6f2ff;">for</mark> element <mark style="background-color:#e6f2ff;">in</mark> list:
    <mark style="background-color:#e6f2ff;">if</mark> conditional:
        expression

</codep>
<br>

<p>Here's an example of a list comprehension ‒ the code creates a five-element list filled with with the first five natural numbers raised to the power of 3:</p>

<codep class="syntax-color">cubed = [num ** 3 for num in range(5)]
print(cubed)  # outputs: [0, 1, 8, 27, 64]
</codep>
<br>


<p>2. You can use <strong>nested lists</strong> in Python to create <strong>matrices</strong> (i.e., two-dimensional lists). For example:</p>

<img class="lightbox" src="/uploads/media/default/0001/01/9c20da970fc3b140efa05e507050d181482477ab.png" alt="Table - a two-dimensional array" width="65%">
<br><br>

<codep class="syntax-color"># A four-column/four-row table ‒ a two dimensional array (4x4)

table = [[":(", ":)", ":(", ":)"],
         [":)", ":(", ":)", ":)"],
         [":(", ":)", ":)", ":("],
         [":)", ":)", ":)", ":("]]

print(table)
print(table[0][0])  # outputs: ':('
print(table[0][3])  # outputs: ':)'
</codep>

<br>



<br>

</div>




<div class="small-12 large-6 columns">

<br>


<p>3. You can nest as many lists in lists as you want, thereby creating n-dimensional lists, e.g., three-, four- or even sixty-four-dimensional arrays. For example:</p>

<img class="lightbox" src="/uploads/media/default/0001/01/c2db5fba6dddfb6606c305c21a0445c516c99a7f.png" alt="Cube - a three-dimensional array" width="65%">
<br><br>

<codep class="syntax-color"># Cube - a three-dimensional array (3x3x3)

cube = [[[':(', 'x', 'x'],
         [':)', 'x', 'x'],
         [':(', 'x', 'x']],

        [[':)', 'x', 'x'],
         [':(', 'x', 'x'],
         [':)', 'x', 'x']],

        [[':(', 'x', 'x'],
         [':)', 'x', 'x'],
         [':)', 'x', 'x']]]

print(cube)
print(cube[0][0][0])  # outputs: ':('
print(cube[2][2][0])  # outputs: ':)'
</codep>
<br>


<br>

</div>

</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
