<problem chapter='2' section='6' slide='1' problem='12' title='SECTION SUMMARY'>

<!--
Update history:
2020-07-17 Grzegorz (reviewed; code - blank lines and the syntax-color class added; variable names changed)
-->

<div class="container">
<div class="row">

<div class="small-12 large-6 columns">

<h1>Key takeaways</h1>

<br>


<p>1. The <codel>print()</codel> function <strong>sends data to the console</strong>, while the <codel>input()</codel> function <strong>gets data from the console</strong>.</p>

<p>2. The <codel>input()</codel> function comes with an optional parameter: <strong>the prompt string</strong>. It allows you to write a message before the user input, e.g.:</p>

<codep>name = input(<mark style="background-color:#e6f2ff;">"Enter your name: "</mark>)
print("Hello, " + name + ". Nice to meet you!")

</codep>
<br>

<p>3. When the <codel>input()</codel> function is called, the program's flow is stopped, the prompt symbol keeps blinking (it prompts the user to take action when the console is switched to input mode) until the user has entered an input and/or pressed the <i>Enter</i> key.</p>

<p><strong><span style="background-color:orange;" class="label">NOTE</span></strong></p>
<p>You can test the functionality of the <codel>input()</codel> function in its full scope locally on your machine. For resource optimization reasons, we have limited the maximum program execution time in Edube to a few seconds. Go to the Sandbox, copy-paste the above snippet, run the program, and do nothing ‒ just wait a few seconds to see what happens. Your program should be stopped automatically after a short moment. Now open IDLE, and run the same program there ‒ can you see the difference?</p>

<p>Tip: the above-mentioned feature of the <codel>input()</codel> function can be used to prompt the user to end a program. Look at the code below:</p>

<codep class="syntax-color">name = input("Enter your name: ")
print("Hello, " + name + ". Nice to meet you!")

print("\nPress Enter to end the program.")
input()
print("THE END.")
</codep>

<br>

<p>3. The result of the <codel>input()</codel> function is a string. You can add strings to each other using the concatenation (<codel>+</codel>) operator. Check out this code:</p>

<codep class="syntax-color">num_1 = input("Enter the first number: ") # Enter 12
num_2 = input("Enter the second number: ") # Enter 21

print(num_1 + num_2) # the program returns 1221
</codep>
<br>

<p>4. You can also multiply (<codel>*</codel> ‒ replication) strings, e.g.:</p>

<codep class="syntax-color">my_input = input("Enter something: ") # Example input: hello
print(my_input * 3) # Expected output: hellohellohello
</codep>
<br>


<br>
<br>

</div>




<div class="small-12 large-6 columns">

<br>


<p><strong>Exercise 1</strong></p>
<p>What is the output of the following snippet?</p>

<codep class="syntax-color">x = int(input("Enter a number: ")) # The user enters 2
print(x * "5")
</codep>

<br>

<button class="button tiny" onclick="solution('sol')">Check</button>

<p id="sol" style="display: none;">
<codep>55</codep>
</p>

<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>

<br>



<p><strong>Exercise 2</strong></p>
<p>What is the expected output of the following snippet?</p>

<codep class="syntax-color">x = input("Enter a number: ") # The user enters 2
print(type(x))
</codep>

<br>


<button class="button tiny" onclick="solution('sol2')">Check</button>

<p id="sol2" style="display: none;">
<codep>&lt;class 'str'&gt;</codep>
</p>


<script>
function solution (id) {
    var element = document.getElementById(id);
    
if (element.style.display === "none") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
</script>

<br>






<br>

</div>

</div>
</div>


<studyMode>true</studyMode>
<labMode>false</labMode>

</problem>
